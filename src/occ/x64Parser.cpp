#include "InstructionParser.h"
#include "x64Operand.h"
#include "x64Parser.h"

InstructionParser* InstructionParser::GetInstance() { return static_cast<InstructionParser*>(new x64Parser()); }
Coding x64Parser::stateCoding_eot[] = {{Coding::eot}};
Coding x64Parser::stateCoding1_1[] = {
    {CODING_NAME("addr16")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding1_2[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding2_1[] = {
    {CODING_NAME("addr32")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 103, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding2_2[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding3_1[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding4_1[] = {
    {CODING_NAME("data16")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding4_2[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding5_1[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding5_2[] = {
    {CODING_NAME("data32")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding6_1[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding7_1[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding7_2[] = {
    {CODING_NAME("no64") Coding::illegal},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding8_1[] = {
    {CODING_NAME("only64") Coding::illegal},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding8_2[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::stateCoding9_1[] = {
    {CODING_NAME("rex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding* x64Parser::StateFunc1()
{
    if (stateVars[0] != 16)
    {
        return stateCoding1_1;
    }
    if (stateVars[0] == 16)
    {
        return stateCoding1_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc2()
{
    if (stateVars[0] != 32)
    {
        return stateCoding2_1;
    }
    if (stateVars[0] == 32)
    {
        return stateCoding2_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc3()
{
    if (true)
    {
        return stateCoding3_1;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc4()
{
    if (stateVars[0] != 16)
    {
        return stateCoding4_1;
    }
    if (stateVars[0] == 16)
    {
        return stateCoding4_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc5()
{
    if (stateVars[0] != 16)
    {
        return stateCoding5_1;
    }
    if (stateVars[0] == 16)
    {
        return stateCoding5_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc6()
{
    if (true)
    {
        return stateCoding6_1;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc7()
{
    if (stateVars[0] != 64)
    {
        return stateCoding7_1;
    }
    if (stateVars[0] == 64)
    {
        return stateCoding7_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc8()
{
    if (stateVars[0] != 64)
    {
        return stateCoding8_1;
    }
    if (stateVars[0] == 64)
    {
        return stateCoding8_2;
    }
    return stateCoding_eot;
}
Coding* x64Parser::StateFunc9()
{
    if (true)
    {
        return stateCoding9_1;
    }
    return stateCoding_eot;
}
x64Parser::StateFuncDispatchType x64Parser::stateFuncs[] = {
    &x64Parser::StateFunc1, &x64Parser::StateFunc2, &x64Parser::StateFunc3, &x64Parser::StateFunc4, &x64Parser::StateFunc5,
    &x64Parser::StateFunc6, &x64Parser::StateFunc7, &x64Parser::StateFunc8, &x64Parser::StateFunc9,
};
bool x64Parser::Number1(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 1, 8, 1, tokenPos);
    }
    return rv;
}
bool x64Parser::Number2(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 1, 8, 1, tokenPos);
    }
    return rv;
}
bool x64Parser::Number3(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 0, 6, 1, tokenPos);
    }
    return rv;
}
bool x64Parser::Number4(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 0, 8, 1, tokenPos);
    }
    return rv;
}
bool x64Parser::Number5(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 0, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number6(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(0, 0, 32, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number7(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 16)
    {
        rv = ParseNumber(0, 0, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number8(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 32)
    {
        rv = ParseNumber(0, 0, 32, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number9(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 64)
    {
        rv = ParseNumber(0, 0, 32, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number10(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(1, 1, 8, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number11(int tokenPos)
{
    bool rv = false;
    if (!rv)
    {
        rv = ParseNumber(-1, 1, 8, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number12(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 16)
    {
        rv = ParseNumber(2, 1, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number13(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 16)
    {
        rv = ParseNumber(-2, 1, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number14(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 16)
    {
        rv = ParseNumber(2, 1, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number15(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] == 16)
    {
        rv = ParseNumber(-2, 1, 16, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number16(int tokenPos)
{
    bool rv = false;
    if (!rv && stateVars[0] != 16)
    {
        rv = ParseNumber(4, 1, 32, 0, tokenPos);
    }
    return rv;
}
bool x64Parser::Number17(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 1, 0);
    if (!rv)
        rv = SetNumber(tokenPos, 2, 1);
    if (!rv)
        rv = SetNumber(tokenPos, 4, 2);
    if (!rv)
        rv = SetNumber(tokenPos, 8, 3);
    return rv;
}
bool x64Parser::Number18(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 0, 0);
    return rv;
}
bool x64Parser::Number19(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 1, 1);
    return rv;
}
bool x64Parser::Number20(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 2, 2);
    return rv;
}
bool x64Parser::Number21(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 4, 4);
    return rv;
}
bool x64Parser::Number22(int tokenPos)
{
    bool rv = false;
    if (!rv)
        rv = SetNumber(tokenPos, 8, 8);
    return rv;
}
x64Parser::NumberDispatchType x64Parser::numberFuncs[] = {
    &x64Parser::Number1,  &x64Parser::Number2,  &x64Parser::Number3,  &x64Parser::Number4,  &x64Parser::Number5,
    &x64Parser::Number6,  &x64Parser::Number7,  &x64Parser::Number8,  &x64Parser::Number9,  &x64Parser::Number10,
    &x64Parser::Number11, &x64Parser::Number12, &x64Parser::Number13, &x64Parser::Number14, &x64Parser::Number15,
    &x64Parser::Number16, &x64Parser::Number17, &x64Parser::Number18, &x64Parser::Number19, &x64Parser::Number20,
    &x64Parser::Number21, &x64Parser::Number22,
};

unsigned char x64Parser::RegClassData1[] = {
    255,
    15,
    0,
    0,
};
unsigned char x64Parser::RegClassData2[] = {
    127,
    0,
    0,
    0,
};
unsigned char x64Parser::RegClassData3[] = {
    190,
    15,
    0,
    0,
};
unsigned char x64Parser::RegClassData4[] = {
    63,
    7,
    0,
    0,
};
unsigned char x64Parser::RegClassData5[] = {
    191,
    12,
    0,
    0,
};
unsigned char x64Parser::RegClassData6[] = {
    4,
    16,
    0,
    0,
};
unsigned char x64Parser::RegClassData7[] = {
    8,
    96,
    0,
    0,
};
unsigned char x64Parser::RegClassData8[] = {
    8,
    224,
    0,
    0,
};
unsigned char x64Parser::RegClassData9[] = {
    16,
    0,
    3,
    0,
};
unsigned char x64Parser::RegClassData10[] = {
    32,
    0,
    12,
    0,
};
unsigned char x64Parser::RegClassData11[] = {
    128,
    0,
    48,
    0,
};
unsigned char x64Parser::RegClassData12[] = {
    0,
    1,
    192,
    1,
};
unsigned char x64Parser::RegClassData13[] = {
    0,
    2,
    0,
    14,
};

unsigned char x64Parser::registerData17[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData13[] = {
    0, 0, 0, 32, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData6[] = {
    136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData9[] = {
    16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData22[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0, 0,
};
unsigned char x64Parser::registerData23[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0,
};
unsigned char x64Parser::registerData21[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7, 0, 0, 0,
};
unsigned char x64Parser::registerData1[] = {
    255, 255, 255, 255, 15, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData4[] = {
    2, 4, 8, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData16[] = {
    0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData7[] = {
    136, 16, 33, 66, 4, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData10[] = {
    16, 33, 66, 132, 8, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData3[] = {
    33, 66, 132, 8, 17, 17, 17, 17, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData12[] = {
    0, 0, 0, 120, 0, 0, 96, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData5[] = {
    68, 136, 16, 33, 34, 34, 34, 34, 2, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData8[] = {
    136, 16, 33, 66, 68, 68, 68, 68, 4, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData11[] = {
    16, 33, 66, 132, 136, 136, 136, 136, 8, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData2[] = {
    35, 70, 140, 24, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData15[] = {
    0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData19[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 32, 73, 146, 4, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData18[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 224, 255, 255, 31, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData20[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 7, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData14[] = {
    0, 0, 0, 0, 240, 255, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
unsigned char x64Parser::registerData24[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 7,
};

unsigned char* x64Parser::registerDataIndirect[] = {
    registerData1,  registerData2,  registerData3,  registerData4,  registerData5,  registerData6,  registerData7,  registerData8,
    registerData9,  registerData10, registerData11, registerData12, registerData13, registerData14, registerData15, registerData16,
    registerData17, registerData18, registerData19, registerData20, registerData21, registerData22, registerData23, registerData24,
};

int x64Parser::registerValues[][8] = {
    {
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        0,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        0,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        0,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        0,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        0,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        1,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        1,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        1,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        1,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        2,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        2,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        2,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        2,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        0,
        0,
        0,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        3,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        3,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        3,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        3,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        4,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        4,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        4,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        4,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        5,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        5,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        5,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        5,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        0,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        6,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        6,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        6,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        6,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        8,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        7,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        7,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        7,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        1,
        7,
        4,
        8,
        2,
        -1,
        -1,
        -1,
    },
    {
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        0,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        1,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        1,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        2,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        2,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        3,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        3,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        4,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        4,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        5,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        5,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        6,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        6,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        0,
        7,
        0,
        0,
        0,
        -1,
        -1,
        -1,
    },
    {
        1,
        7,
        4,
        0,
        2,
        -1,
        -1,
        -1,
    },
    {
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        38,
    },
    {
        -1,
        1,
        -1,
        -1,
        -1,
        -1,
        -1,
        46,
    },
    {
        -1,
        2,
        -1,
        -1,
        -1,
        -1,
        -1,
        54,
    },
    {
        -1,
        3,
        -1,
        -1,
        -1,
        -1,
        -1,
        62,
    },
    {
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        100,
    },
    {
        -1,
        5,
        -1,
        -1,
        -1,
        -1,
        -1,
        101,
    },
    {
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        3,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        5,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        6,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        7,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        3,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        5,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        6,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        7,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        3,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        5,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        6,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        7,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        0,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        2,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        3,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        4,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        5,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        6,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
    {
        -1,
        7,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
    },
};

void x64Parser::Init()
{
    memset(&stateVars, 0, sizeof(stateVars));
    stateVars[0] = 16;
    tokenTable[""] = 0;
    tokenTable["*"] = 5;
    tokenTable["+"] = 4;
    tokenTable[","] = 7;
    tokenTable[":"] = 3;
    tokenTable["["] = 1;
    tokenTable["]"] = 2;
    tokenTable["byte"] = 11;
    tokenTable["dword"] = 9;
    tokenTable["far"] = 15;
    tokenTable["near"] = 14;
    tokenTable["qword"] = 10;
    tokenTable["short"] = 13;
    tokenTable["tword"] = 12;
    tokenTable["word"] = 8;
    tokenTable["al"] = 1000;
    tokenTable["ah"] = 1001;
    tokenTable["ax"] = 1002;
    tokenTable["eax"] = 1003;
    tokenTable["rax"] = 1004;
    tokenTable["r8b"] = 1005;
    tokenTable["r8w"] = 1006;
    tokenTable["r8d"] = 1007;
    tokenTable["r8"] = 1008;
    tokenTable["cl"] = 1009;
    tokenTable["ch"] = 1010;
    tokenTable["cx"] = 1011;
    tokenTable["ecx"] = 1012;
    tokenTable["rcx"] = 1013;
    tokenTable["r9b"] = 1014;
    tokenTable["r9w"] = 1015;
    tokenTable["r9d"] = 1016;
    tokenTable["r9"] = 1017;
    tokenTable["dl"] = 1018;
    tokenTable["dh"] = 1019;
    tokenTable["dx"] = 1020;
    tokenTable["edx"] = 1021;
    tokenTable["rdx"] = 1022;
    tokenTable["r10b"] = 1023;
    tokenTable["r10w"] = 1024;
    tokenTable["r10d"] = 1025;
    tokenTable["r10"] = 1026;
    tokenTable["bl"] = 1027;
    tokenTable["bh"] = 1028;
    tokenTable["bx"] = 1029;
    tokenTable["ebx"] = 1030;
    tokenTable["rbx"] = 1031;
    tokenTable["r11b"] = 1032;
    tokenTable["r11w"] = 1033;
    tokenTable["r11d"] = 1034;
    tokenTable["r11"] = 1035;
    tokenTable["spl"] = 1036;
    tokenTable["sp"] = 1037;
    tokenTable["esp"] = 1038;
    tokenTable["rsp"] = 1039;
    tokenTable["r12b"] = 1040;
    tokenTable["r12w"] = 1041;
    tokenTable["r12d"] = 1042;
    tokenTable["r12"] = 1043;
    tokenTable["bpl"] = 1044;
    tokenTable["bp"] = 1045;
    tokenTable["ebp"] = 1046;
    tokenTable["rbp"] = 1047;
    tokenTable["r13b"] = 1048;
    tokenTable["r13w"] = 1049;
    tokenTable["r13d"] = 1050;
    tokenTable["r13"] = 1051;
    tokenTable["sil"] = 1052;
    tokenTable["si"] = 1053;
    tokenTable["esi"] = 1054;
    tokenTable["rsi"] = 1055;
    tokenTable["r14b"] = 1056;
    tokenTable["r14w"] = 1057;
    tokenTable["r14d"] = 1058;
    tokenTable["r14"] = 1059;
    tokenTable["dil"] = 1060;
    tokenTable["di"] = 1061;
    tokenTable["edi"] = 1062;
    tokenTable["rdi"] = 1063;
    tokenTable["r15b"] = 1064;
    tokenTable["r15w"] = 1065;
    tokenTable["r15d"] = 1066;
    tokenTable["r15"] = 1067;
    tokenTable["rip"] = 1068;
    tokenTable["mm0"] = 1069;
    tokenTable["xmm0"] = 1070;
    tokenTable["xmm8"] = 1071;
    tokenTable["mm1"] = 1072;
    tokenTable["xmm1"] = 1073;
    tokenTable["xmm9"] = 1074;
    tokenTable["mm2"] = 1075;
    tokenTable["xmm2"] = 1076;
    tokenTable["xmm10"] = 1077;
    tokenTable["mm3"] = 1078;
    tokenTable["xmm3"] = 1079;
    tokenTable["xmm11"] = 1080;
    tokenTable["mm4"] = 1081;
    tokenTable["xmm4"] = 1082;
    tokenTable["xmm12"] = 1083;
    tokenTable["mm5"] = 1084;
    tokenTable["xmm5"] = 1085;
    tokenTable["xmm13"] = 1086;
    tokenTable["mm6"] = 1087;
    tokenTable["xmm6"] = 1088;
    tokenTable["xmm14"] = 1089;
    tokenTable["mm7"] = 1090;
    tokenTable["xmm7"] = 1091;
    tokenTable["xmm15"] = 1092;
    tokenTable["es"] = 1093;
    tokenTable["cs"] = 1094;
    tokenTable["ss"] = 1095;
    tokenTable["ds"] = 1096;
    tokenTable["fs"] = 1097;
    tokenTable["gs"] = 1098;
    tokenTable["st0"] = 1099;
    tokenTable["st1"] = 1100;
    tokenTable["st2"] = 1101;
    tokenTable["st3"] = 1102;
    tokenTable["st4"] = 1103;
    tokenTable["st5"] = 1104;
    tokenTable["st6"] = 1105;
    tokenTable["st7"] = 1106;
    tokenTable["cr0"] = 1107;
    tokenTable["cr1"] = 1108;
    tokenTable["cr2"] = 1109;
    tokenTable["cr3"] = 1110;
    tokenTable["cr4"] = 1111;
    tokenTable["cr5"] = 1112;
    tokenTable["cr6"] = 1113;
    tokenTable["cr7"] = 1114;
    tokenTable["dr0"] = 1115;
    tokenTable["dr1"] = 1116;
    tokenTable["dr2"] = 1117;
    tokenTable["dr3"] = 1118;
    tokenTable["dr4"] = 1119;
    tokenTable["dr5"] = 1120;
    tokenTable["dr6"] = 1121;
    tokenTable["dr7"] = 1122;
    tokenTable["tr0"] = 1123;
    tokenTable["tr1"] = 1124;
    tokenTable["tr2"] = 1125;
    tokenTable["tr3"] = 1126;
    tokenTable["tr4"] = 1127;
    tokenTable["tr5"] = 1128;
    tokenTable["tr6"] = 1129;
    tokenTable["tr7"] = 1130;
    opcodeTable["aaa"] = 32;
    opcodeTable["aad"] = 33;
    opcodeTable["aam"] = 34;
    opcodeTable["aas"] = 35;
    opcodeTable["adc"] = 36;
    opcodeTable["add"] = 37;
    opcodeTable["and"] = 38;
    opcodeTable["arpl"] = 39;
    opcodeTable["bound"] = 40;
    opcodeTable["bsf"] = 41;
    opcodeTable["bsr"] = 42;
    opcodeTable["bswap"] = 43;
    opcodeTable["bt"] = 44;
    opcodeTable["btc"] = 45;
    opcodeTable["btr"] = 46;
    opcodeTable["bts"] = 47;
    opcodeTable["call"] = 48;
    opcodeTable["cbw"] = 49;
    opcodeTable["cdq"] = 50;
    opcodeTable["cdqe"] = 51;
    opcodeTable["clc"] = 52;
    opcodeTable["cld"] = 53;
    opcodeTable["cli"] = 54;
    opcodeTable["clts"] = 55;
    opcodeTable["cmc"] = 56;
    opcodeTable["cmova"] = 57;
    opcodeTable["cmovae"] = 58;
    opcodeTable["cmovb"] = 59;
    opcodeTable["cmovbe"] = 60;
    opcodeTable["cmovc"] = 61;
    opcodeTable["cmove"] = 62;
    opcodeTable["cmovg"] = 63;
    opcodeTable["cmovge"] = 64;
    opcodeTable["cmovl"] = 65;
    opcodeTable["cmovle"] = 66;
    opcodeTable["cmovna"] = 67;
    opcodeTable["cmovnae"] = 68;
    opcodeTable["cmovnb"] = 69;
    opcodeTable["cmovnbe"] = 70;
    opcodeTable["cmovnc"] = 71;
    opcodeTable["cmovne"] = 72;
    opcodeTable["cmovng"] = 73;
    opcodeTable["cmovnge"] = 74;
    opcodeTable["cmovnl"] = 75;
    opcodeTable["cmovnle"] = 76;
    opcodeTable["cmovno"] = 77;
    opcodeTable["cmovnp"] = 78;
    opcodeTable["cmovns"] = 79;
    opcodeTable["cmovnz"] = 80;
    opcodeTable["cmovo"] = 81;
    opcodeTable["cmovp"] = 82;
    opcodeTable["cmovpe"] = 83;
    opcodeTable["cmovpo"] = 84;
    opcodeTable["cmovs"] = 85;
    opcodeTable["cmovz"] = 86;
    opcodeTable["cmp"] = 87;
    opcodeTable["cmps"] = 88;
    opcodeTable["cmpsb"] = 89;
    opcodeTable["cmpsw"] = 90;
    opcodeTable["cmpsd"] = 91;
    opcodeTable["cmpsq"] = 92;
    opcodeTable["cmpxchg"] = 93;
    opcodeTable["cmpxchg8b"] = 94;
    opcodeTable["cmpxchg16b"] = 95;
    opcodeTable["cpuid"] = 96;
    opcodeTable["cqo"] = 97;
    opcodeTable["cwd"] = 98;
    opcodeTable["cwde"] = 99;
    opcodeTable["daa"] = 100;
    opcodeTable["das"] = 101;
    opcodeTable["dec"] = 102;
    opcodeTable["div"] = 103;
    opcodeTable["enter"] = 104;
    opcodeTable["esc"] = 105;
    opcodeTable["f2xm1"] = 106;
    opcodeTable["fabs"] = 107;
    opcodeTable["fadd"] = 108;
    opcodeTable["faddp"] = 109;
    opcodeTable["fbld"] = 110;
    opcodeTable["fbstp"] = 111;
    opcodeTable["fchs"] = 112;
    opcodeTable["fclex"] = 113;
    opcodeTable["fnclex"] = 114;
    opcodeTable["fcmovb"] = 115;
    opcodeTable["fcmovbe"] = 116;
    opcodeTable["fcmove"] = 117;
    opcodeTable["fcmovnb"] = 118;
    opcodeTable["fcmovnbe"] = 119;
    opcodeTable["fcmovne"] = 120;
    opcodeTable["fcmovnu"] = 121;
    opcodeTable["fcmovu"] = 122;
    opcodeTable["fcom"] = 123;
    opcodeTable["fcomi"] = 124;
    opcodeTable["fcomip"] = 125;
    opcodeTable["fcomp"] = 126;
    opcodeTable["fcompp"] = 127;
    opcodeTable["fcos"] = 128;
    opcodeTable["fdecstp"] = 129;
    opcodeTable["fdisi"] = 130;
    opcodeTable["fdiv"] = 131;
    opcodeTable["fdivp"] = 132;
    opcodeTable["fdivr"] = 133;
    opcodeTable["fdivrp"] = 134;
    opcodeTable["feni"] = 135;
    opcodeTable["ffree"] = 136;
    opcodeTable["ffreep"] = 137;
    opcodeTable["fiadd"] = 138;
    opcodeTable["ficom"] = 139;
    opcodeTable["ficomp"] = 140;
    opcodeTable["fidiv"] = 141;
    opcodeTable["fidivr"] = 142;
    opcodeTable["fild"] = 143;
    opcodeTable["fimul"] = 144;
    opcodeTable["fincstp"] = 145;
    opcodeTable["finit"] = 146;
    opcodeTable["fninit"] = 147;
    opcodeTable["fist"] = 148;
    opcodeTable["fistp"] = 149;
    opcodeTable["fisub"] = 150;
    opcodeTable["fisubr"] = 151;
    opcodeTable["fld"] = 152;
    opcodeTable["fld1"] = 153;
    opcodeTable["fldcw"] = 154;
    opcodeTable["fldenv"] = 155;
    opcodeTable["fldl2e"] = 156;
    opcodeTable["fldl2t"] = 157;
    opcodeTable["fldlg2"] = 158;
    opcodeTable["fldln2"] = 159;
    opcodeTable["fldpi"] = 160;
    opcodeTable["fldz"] = 161;
    opcodeTable["fmul"] = 162;
    opcodeTable["fmulp"] = 163;
    opcodeTable["fnop"] = 164;
    opcodeTable["fnsave"] = 165;
    opcodeTable["fpatan"] = 166;
    opcodeTable["fprem"] = 167;
    opcodeTable["fprem1"] = 168;
    opcodeTable["fptan"] = 169;
    opcodeTable["frndint"] = 170;
    opcodeTable["frstor"] = 171;
    opcodeTable["fsave"] = 172;
    opcodeTable["fscale"] = 173;
    opcodeTable["fsetpm"] = 174;
    opcodeTable["fsin"] = 175;
    opcodeTable["fsincos"] = 176;
    opcodeTable["fsqrt"] = 177;
    opcodeTable["fst"] = 178;
    opcodeTable["fstcw"] = 179;
    opcodeTable["fnstcw"] = 180;
    opcodeTable["fstenv"] = 181;
    opcodeTable["fnstenv"] = 182;
    opcodeTable["fstp"] = 183;
    opcodeTable["fstsw"] = 184;
    opcodeTable["fnstsw"] = 185;
    opcodeTable["fsub"] = 186;
    opcodeTable["fsubp"] = 187;
    opcodeTable["fsubr"] = 188;
    opcodeTable["fsubrp"] = 189;
    opcodeTable["ftst"] = 190;
    opcodeTable["fucom"] = 191;
    opcodeTable["fucomi"] = 192;
    opcodeTable["fucomip"] = 193;
    opcodeTable["fucomp"] = 194;
    opcodeTable["fucompp"] = 195;
    opcodeTable["fwait"] = 196;
    opcodeTable["fxam"] = 197;
    opcodeTable["fxch"] = 198;
    opcodeTable["fxch4"] = 199;
    opcodeTable["fxch7"] = 200;
    opcodeTable["fxrstor"] = 201;
    opcodeTable["fxsave"] = 202;
    opcodeTable["fxtract"] = 203;
    opcodeTable["fyl2x"] = 204;
    opcodeTable["fyl2xp1"] = 205;
    opcodeTable["hlt"] = 206;
    opcodeTable["icebp"] = 207;
    opcodeTable["idiv"] = 208;
    opcodeTable["imul"] = 209;
    opcodeTable["in"] = 210;
    opcodeTable["ins"] = 211;
    opcodeTable["insb"] = 212;
    opcodeTable["insw"] = 213;
    opcodeTable["insd"] = 214;
    opcodeTable["inc"] = 215;
    opcodeTable["int"] = 216;
    opcodeTable["int1"] = 217;
    opcodeTable["int3"] = 218;
    opcodeTable["into"] = 219;
    opcodeTable["invd"] = 220;
    opcodeTable["invlpg"] = 221;
    opcodeTable["iret"] = 222;
    opcodeTable["iretw"] = 223;
    opcodeTable["iretd"] = 224;
    opcodeTable["iretq"] = 225;
    opcodeTable["ja"] = 226;
    opcodeTable["jae"] = 227;
    opcodeTable["jb"] = 228;
    opcodeTable["jbe"] = 229;
    opcodeTable["jc"] = 230;
    opcodeTable["jcxz"] = 231;
    opcodeTable["jecxz"] = 232;
    opcodeTable["je"] = 233;
    opcodeTable["jg"] = 234;
    opcodeTable["jge"] = 235;
    opcodeTable["jl"] = 236;
    opcodeTable["jle"] = 237;
    opcodeTable["jmp"] = 238;
    opcodeTable["jna"] = 239;
    opcodeTable["jnae"] = 240;
    opcodeTable["jnb"] = 241;
    opcodeTable["jnbe"] = 242;
    opcodeTable["jnc"] = 243;
    opcodeTable["jne"] = 244;
    opcodeTable["jng"] = 245;
    opcodeTable["jnge"] = 246;
    opcodeTable["jnl"] = 247;
    opcodeTable["jnle"] = 248;
    opcodeTable["jno"] = 249;
    opcodeTable["jnp"] = 250;
    opcodeTable["jns"] = 251;
    opcodeTable["jnz"] = 252;
    opcodeTable["jo"] = 253;
    opcodeTable["jp"] = 254;
    opcodeTable["jpe"] = 255;
    opcodeTable["jpo"] = 256;
    opcodeTable["js"] = 257;
    opcodeTable["jz"] = 258;
    opcodeTable["lahf"] = 259;
    opcodeTable["lar"] = 260;
    opcodeTable["lds"] = 261;
    opcodeTable["lea"] = 262;
    opcodeTable["leave"] = 263;
    opcodeTable["les"] = 264;
    opcodeTable["lfence"] = 265;
    opcodeTable["lfs"] = 266;
    opcodeTable["lgdt"] = 267;
    opcodeTable["lgs"] = 268;
    opcodeTable["lidt"] = 269;
    opcodeTable["lldt"] = 270;
    opcodeTable["lmsw"] = 271;
    opcodeTable["lods"] = 272;
    opcodeTable["lodsb"] = 273;
    opcodeTable["lodsw"] = 274;
    opcodeTable["lodsd"] = 275;
    opcodeTable["lodsq"] = 276;
    opcodeTable["loop"] = 277;
    opcodeTable["loope"] = 278;
    opcodeTable["loopne"] = 279;
    opcodeTable["loopnz"] = 280;
    opcodeTable["loopz"] = 281;
    opcodeTable["lsl"] = 282;
    opcodeTable["lss"] = 283;
    opcodeTable["ltr"] = 284;
    opcodeTable["mov"] = 285;
    opcodeTable["movs"] = 286;
    opcodeTable["movbe"] = 287;
    opcodeTable["movsb"] = 288;
    opcodeTable["movsw"] = 289;
    opcodeTable["movsd"] = 290;
    opcodeTable["movsq"] = 291;
    opcodeTable["movsx"] = 292;
    opcodeTable["movzx"] = 293;
    opcodeTable["movsxd"] = 294;
    opcodeTable["mul"] = 295;
    opcodeTable["neg"] = 296;
    opcodeTable["nop"] = 297;
    opcodeTable["not"] = 298;
    opcodeTable["or"] = 299;
    opcodeTable["out"] = 300;
    opcodeTable["outs"] = 301;
    opcodeTable["outsb"] = 302;
    opcodeTable["outsw"] = 303;
    opcodeTable["outsd"] = 304;
    opcodeTable["pop"] = 305;
    opcodeTable["popa"] = 306;
    opcodeTable["popaw"] = 307;
    opcodeTable["popad"] = 308;
    opcodeTable["popcnt"] = 309;
    opcodeTable["popf"] = 310;
    opcodeTable["popfw"] = 311;
    opcodeTable["popfd"] = 312;
    opcodeTable["popfq"] = 313;
    opcodeTable["prefetchnta"] = 314;
    opcodeTable["prefetcht0"] = 315;
    opcodeTable["prefetcht1"] = 316;
    opcodeTable["prefetcht2"] = 317;
    opcodeTable["push"] = 318;
    opcodeTable["pusha"] = 319;
    opcodeTable["pushaw"] = 320;
    opcodeTable["pushad"] = 321;
    opcodeTable["pushf"] = 322;
    opcodeTable["pushfw"] = 323;
    opcodeTable["pushfd"] = 324;
    opcodeTable["pushfq"] = 325;
    opcodeTable["rcl"] = 326;
    opcodeTable["rcr"] = 327;
    opcodeTable["rdmsr"] = 328;
    opcodeTable["rdpmc"] = 329;
    opcodeTable["rdtsc"] = 330;
    opcodeTable["ret"] = 331;
    opcodeTable["retf"] = 332;
    opcodeTable["rol"] = 333;
    opcodeTable["ror"] = 334;
    opcodeTable["rsm"] = 335;
    opcodeTable["sahf"] = 336;
    opcodeTable["sal"] = 337;
    opcodeTable["sar"] = 338;
    opcodeTable["sbb"] = 339;
    opcodeTable["scas"] = 340;
    opcodeTable["scasb"] = 341;
    opcodeTable["scasw"] = 342;
    opcodeTable["scasd"] = 343;
    opcodeTable["scasq"] = 344;
    opcodeTable["seta"] = 345;
    opcodeTable["setae"] = 346;
    opcodeTable["setb"] = 347;
    opcodeTable["setbe"] = 348;
    opcodeTable["setc"] = 349;
    opcodeTable["sete"] = 350;
    opcodeTable["setg"] = 351;
    opcodeTable["setge"] = 352;
    opcodeTable["setl"] = 353;
    opcodeTable["setle"] = 354;
    opcodeTable["setna"] = 355;
    opcodeTable["setnae"] = 356;
    opcodeTable["setnb"] = 357;
    opcodeTable["setnbe"] = 358;
    opcodeTable["setnc"] = 359;
    opcodeTable["setne"] = 360;
    opcodeTable["setng"] = 361;
    opcodeTable["setnge"] = 362;
    opcodeTable["setnl"] = 363;
    opcodeTable["setnle"] = 364;
    opcodeTable["setno"] = 365;
    opcodeTable["setnp"] = 366;
    opcodeTable["setns"] = 367;
    opcodeTable["setnz"] = 368;
    opcodeTable["seto"] = 369;
    opcodeTable["setp"] = 370;
    opcodeTable["setpe"] = 371;
    opcodeTable["setpo"] = 372;
    opcodeTable["sets"] = 373;
    opcodeTable["setz"] = 374;
    opcodeTable["sfence"] = 375;
    opcodeTable["sgdt"] = 376;
    opcodeTable["shl"] = 377;
    opcodeTable["shld"] = 378;
    opcodeTable["shr"] = 379;
    opcodeTable["shrd"] = 380;
    opcodeTable["sidt"] = 381;
    opcodeTable["sldt"] = 382;
    opcodeTable["smsw"] = 383;
    opcodeTable["stc"] = 384;
    opcodeTable["std"] = 385;
    opcodeTable["sti"] = 386;
    opcodeTable["stos"] = 387;
    opcodeTable["stosb"] = 388;
    opcodeTable["stosw"] = 389;
    opcodeTable["stosd"] = 390;
    opcodeTable["stosq"] = 391;
    opcodeTable["str"] = 392;
    opcodeTable["sub"] = 393;
    opcodeTable["syscall"] = 394;
    opcodeTable["sysenter"] = 395;
    opcodeTable["sysexit"] = 396;
    opcodeTable["sysret"] = 397;
    opcodeTable["test"] = 398;
    opcodeTable["ud2"] = 399;
    opcodeTable["verr"] = 400;
    opcodeTable["verw"] = 401;
    opcodeTable["wait"] = 402;
    opcodeTable["wbinvd"] = 403;
    opcodeTable["wrmsr"] = 404;
    opcodeTable["xadd"] = 405;
    opcodeTable["xchg"] = 406;
    opcodeTable["xlat"] = 407;
    opcodeTable["xlatb"] = 408;
    opcodeTable["xor"] = 409;
    opcodeTable["xrstor"] = 410;
    opcodeTable["xrstor64"] = 411;
    opcodeTable["xsave"] = 412;
    opcodeTable["xsave64"] = 413;
    opcodeTable["xsetbv"] = 414;
    opcodeTable["addpd"] = 415;
    opcodeTable["addps"] = 416;
    opcodeTable["addsd"] = 417;
    opcodeTable["addss"] = 418;
    opcodeTable["addsubpd"] = 419;
    opcodeTable["addsubps"] = 420;
    opcodeTable["andnpd"] = 421;
    opcodeTable["andnps"] = 422;
    opcodeTable["andpd"] = 423;
    opcodeTable["andps"] = 424;
    opcodeTable["blendpd"] = 425;
    opcodeTable["blendps"] = 426;
    opcodeTable["cmppd"] = 427;
    opcodeTable["cmpps"] = 428;
    opcodeTable["comisd"] = 429;
    opcodeTable["comiss"] = 430;
    opcodeTable["cvtdq2pd"] = 431;
    opcodeTable["cvtdq2ps"] = 432;
    opcodeTable["cvtpd2dq"] = 433;
    opcodeTable["cvtpd2pi"] = 434;
    opcodeTable["cvtpd2ps"] = 435;
    opcodeTable["cvtpi2pd"] = 436;
    opcodeTable["cvtpi2ps"] = 437;
    opcodeTable["cvtps2dq"] = 438;
    opcodeTable["cvtps2pd"] = 439;
    opcodeTable["cvtps2pi"] = 440;
    opcodeTable["cvtsd2si"] = 441;
    opcodeTable["cvtsd2ss"] = 442;
    opcodeTable["cvtsi2sd"] = 443;
    opcodeTable["cvtsi2ss"] = 444;
    opcodeTable["cvtss2sd"] = 445;
    opcodeTable["cvtss2si"] = 446;
    opcodeTable["cvttpd2dq"] = 447;
    opcodeTable["cvttpd2pi"] = 448;
    opcodeTable["cvttps2dq"] = 449;
    opcodeTable["cvttps2pi"] = 450;
    opcodeTable["cvttsd2si"] = 451;
    opcodeTable["cvttss2si"] = 452;
    opcodeTable["divpd"] = 453;
    opcodeTable["divps"] = 454;
    opcodeTable["divsd"] = 455;
    opcodeTable["divss"] = 456;
    opcodeTable["dppd"] = 457;
    opcodeTable["dpps"] = 458;
    opcodeTable["hsubpd"] = 459;
    opcodeTable["hsubps"] = 460;
    opcodeTable["insertps"] = 461;
    opcodeTable["lddqu"] = 462;
    opcodeTable["maskmovdqu"] = 463;
    opcodeTable["maskmovq"] = 464;
    opcodeTable["maxpd"] = 465;
    opcodeTable["maxps"] = 466;
    opcodeTable["maxsd"] = 467;
    opcodeTable["maxss"] = 468;
    opcodeTable["mfence"] = 469;
    opcodeTable["minpd"] = 470;
    opcodeTable["minps"] = 471;
    opcodeTable["minsd"] = 472;
    opcodeTable["minss"] = 473;
    opcodeTable["monitor"] = 474;
    opcodeTable["movapd"] = 475;
    opcodeTable["movaps"] = 476;
    opcodeTable["movd"] = 477;
    opcodeTable["movq"] = 478;
    opcodeTable["movddup"] = 479;
    opcodeTable["movdq2q"] = 480;
    opcodeTable["movdqa"] = 481;
    opcodeTable["movdqu"] = 482;
    opcodeTable["movhlps"] = 483;
    opcodeTable["movhpd"] = 484;
    opcodeTable["movhps"] = 485;
    opcodeTable["movlhps"] = 486;
    opcodeTable["movlpd"] = 487;
    opcodeTable["movlps"] = 488;
    opcodeTable["movmskpd"] = 489;
    opcodeTable["movmskps"] = 490;
    opcodeTable["movntdq"] = 491;
    opcodeTable["movnti"] = 492;
    opcodeTable["movntpd"] = 493;
    opcodeTable["movntd"] = 494;
    opcodeTable["movntq"] = 495;
    opcodeTable["movq2dq"] = 496;
    opcodeTable["movshdup"] = 497;
    opcodeTable["movsldup"] = 498;
    opcodeTable["movss"] = 499;
    opcodeTable["movupd"] = 500;
    opcodeTable["movups"] = 501;
    opcodeTable["mpsadbw"] = 502;
    opcodeTable["mulpd"] = 503;
    opcodeTable["mulps"] = 504;
    opcodeTable["mulsd"] = 505;
    opcodeTable["mulss"] = 506;
    opcodeTable["orpd"] = 507;
    opcodeTable["orps"] = 508;
    opcodeTable["packssdw"] = 509;
    opcodeTable["packsswb"] = 510;
    opcodeTable["packusdw"] = 511;
    opcodeTable["paddb"] = 512;
    opcodeTable["paddd"] = 513;
    opcodeTable["paddq"] = 514;
    opcodeTable["paddsw"] = 515;
    opcodeTable["paddusb"] = 516;
    opcodeTable["paddusw"] = 517;
    opcodeTable["paddw"] = 518;
    opcodeTable["palignr"] = 519;
    opcodeTable["pand"] = 520;
    opcodeTable["pandn"] = 521;
    opcodeTable["pavgb"] = 522;
    opcodeTable["pavgw"] = 523;
    opcodeTable["pblendw"] = 524;
    opcodeTable["pcmpeqb"] = 525;
    opcodeTable["pcmpeqd"] = 526;
    opcodeTable["pcmpeqw"] = 527;
    opcodeTable["pcmpestri"] = 528;
    opcodeTable["pcmpestrm"] = 529;
    opcodeTable["pcmpgtb"] = 530;
    opcodeTable["pcmpgtd"] = 531;
    opcodeTable["pcmpgtw"] = 532;
    opcodeTable["pextrb"] = 533;
    opcodeTable["pextrd"] = 534;
    opcodeTable["pextrq"] = 535;
    opcodeTable["pextrw"] = 536;
    opcodeTable["pinsrb"] = 537;
    opcodeTable["pinsrd"] = 538;
    opcodeTable["pinsrq"] = 539;
    opcodeTable["pinsrw"] = 540;
    opcodeTable["pmaddwd"] = 541;
    opcodeTable["pmaxsw"] = 542;
    opcodeTable["pmaxub"] = 543;
    opcodeTable["pminsw"] = 544;
    opcodeTable["pminub"] = 545;
    opcodeTable["pmovmskb"] = 546;
    opcodeTable["pmulhuw"] = 547;
    opcodeTable["pmulhw"] = 548;
    opcodeTable["pmullw"] = 549;
    opcodeTable["pmuludq"] = 550;
    opcodeTable["psadbw"] = 551;
    opcodeTable["pshufd"] = 552;
    opcodeTable["pshufhw"] = 553;
    opcodeTable["pshuflw"] = 554;
    opcodeTable["pshufw"] = 555;
    opcodeTable["pslld"] = 556;
    opcodeTable["pslldq"] = 557;
    opcodeTable["psllq"] = 558;
    opcodeTable["psllw"] = 559;
    opcodeTable["psrad"] = 560;
    opcodeTable["psraw"] = 561;
    opcodeTable["psrld"] = 562;
    opcodeTable["psrldq"] = 563;
    opcodeTable["psrlq"] = 564;
    opcodeTable["psrlw"] = 565;
    opcodeTable["psubb"] = 566;
    opcodeTable["psubd"] = 567;
    opcodeTable["psubq"] = 568;
    opcodeTable["psubsb"] = 569;
    opcodeTable["psubsw"] = 570;
    opcodeTable["psubusb"] = 571;
    opcodeTable["psubusw"] = 572;
    opcodeTable["punpckhbw"] = 573;
    opcodeTable["punpckhdq"] = 574;
    opcodeTable["punpckhqdq"] = 575;
    opcodeTable["punpckhwd"] = 576;
    opcodeTable["punpcklbw"] = 577;
    opcodeTable["punpckldq"] = 578;
    opcodeTable["punpcklqdq"] = 579;
    opcodeTable["punpcklwd"] = 580;
    opcodeTable["pxor"] = 581;
    opcodeTable["rcpps"] = 582;
    opcodeTable["rcpss"] = 583;
    opcodeTable["roundpd"] = 584;
    opcodeTable["roundps"] = 585;
    opcodeTable["roundsd"] = 586;
    opcodeTable["roundss"] = 587;
    opcodeTable["rsqrtps"] = 588;
    opcodeTable["rsqrtss"] = 589;
    opcodeTable["shufpd"] = 590;
    opcodeTable["shufps"] = 591;
    opcodeTable["sqrtpd"] = 592;
    opcodeTable["sqrtps"] = 593;
    opcodeTable["sqrtsd"] = 594;
    opcodeTable["sqrtss"] = 595;
    opcodeTable["subpd"] = 596;
    opcodeTable["subps"] = 597;
    opcodeTable["subsd"] = 598;
    opcodeTable["subss"] = 599;
    opcodeTable["ucomisd"] = 600;
    opcodeTable["ucomiss"] = 601;
    opcodeTable["unpckhpd"] = 602;
    opcodeTable["unpckhps"] = 603;
    opcodeTable["unpcklpd"] = 604;
    opcodeTable["unpcklps"] = 605;
    opcodeTable["xorpd"] = 606;
    opcodeTable["xorps"] = 607;
    opcodeTable["invept"] = 608;
    opcodeTable["invvpid"] = 609;
    opcodeTable["vmcall"] = 610;
    opcodeTable["vmclear"] = 611;
    opcodeTable["vmlaunch"] = 612;
    opcodeTable["vmptrld"] = 613;
    opcodeTable["vmptrst"] = 614;
    opcodeTable["vmread"] = 615;
    opcodeTable["vmresume"] = 616;
    opcodeTable["vmwrite"] = 617;
    opcodeTable["vmxoff"] = 618;
    opcodeTable["vmxon"] = 619;
    prefixTable["a16"] = 0;
    prefixTable["a32"] = 1;
    prefixTable["lock"] = 2;
    prefixTable["o16"] = 3;
    prefixTable["o32"] = 4;
    prefixTable["rep"] = 5;
    prefixTable["repe"] = 6;
    prefixTable["repne"] = 7;
    prefixTable["repnz"] = 8;
    prefixTable["repz"] = 9;
}

void x64Parser::TokenFunc4(x64Operand& operand, int tokenPos) { operand.addressCoding = 0; }
x64Token x64Parser::tokenBranches3[] = {{
                                            x64Token::TOKEN,
                                            2,
                                            1,
                                            0,
                                            x64Parser::RegClassData2,
                                            &x64Parser::TokenFunc4,
                                        },
                                        {x64Token::EOT}};
void x64Parser::TokenFunc9(x64Operand& operand, int tokenPos) { operand.addressCoding = 1; }
x64Token x64Parser::tokenBranches8[] = {{
                                            x64Token::TOKEN,
                                            2,
                                            1,
                                            0,
                                            x64Parser::RegClassData2,
                                            &x64Parser::TokenFunc9,
                                        },
                                        {x64Token::EOT}};
void x64Parser::TokenFunc200(x64Operand& operand, int tokenPos) { operand.addressCoding = 19; }
x64Token x64Parser::tokenBranches199[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc200,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc346(x64Operand& operand, int tokenPos) { operand.addressCoding = 34; }
x64Token x64Parser::tokenBranches345[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc346,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc199(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc345(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches198[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc199, x64Parser::tokenBranches199},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc345, x64Parser::tokenBranches345},
    {x64Token::EOT}};
void x64Parser::TokenFunc36(x64Operand& operand, int tokenPos) { operand.addressCoding = 4; }
x64Token x64Parser::tokenBranches35[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc36,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches198},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc137(x64Operand& operand, int tokenPos) { operand.addressCoding = 13; }
x64Token x64Parser::tokenBranches136[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc137,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc283(x64Operand& operand, int tokenPos) { operand.addressCoding = 28; }
x64Token x64Parser::tokenBranches282[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc283,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc429(x64Operand& operand, int tokenPos) { operand.addressCoding = 43; }
x64Token x64Parser::tokenBranches428[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc429,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc35(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc136(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc282(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc428(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches34[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc35, x64Parser::tokenBranches35},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc136, x64Parser::tokenBranches136},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc282, x64Parser::tokenBranches282},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc428, x64Parser::tokenBranches428},
    {x64Token::EOT}};
void x64Parser::TokenFunc97(x64Operand& operand, int tokenPos) { operand.addressCoding = 13; }
x64Token x64Parser::tokenBranches33[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches34},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc97,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc227(x64Operand& operand, int tokenPos) { operand.addressCoding = 22; }
x64Token x64Parser::tokenBranches226[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc227,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc373(x64Operand& operand, int tokenPos) { operand.addressCoding = 37; }
x64Token x64Parser::tokenBranches372[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc373,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc226(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc372(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches225[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc226, x64Parser::tokenBranches226},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc372, x64Parser::tokenBranches372},
    {x64Token::EOT}};
void x64Parser::TokenFunc57(x64Operand& operand, int tokenPos) { operand.addressCoding = 7; }
x64Token x64Parser::tokenBranches56[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc57,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches225},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc170(x64Operand& operand, int tokenPos) { operand.addressCoding = 17; }
x64Token x64Parser::tokenBranches169[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc170,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc316(x64Operand& operand, int tokenPos) { operand.addressCoding = 32; }
x64Token x64Parser::tokenBranches315[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc316,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc462(x64Operand& operand, int tokenPos) { operand.addressCoding = 47; }
x64Token x64Parser::tokenBranches461[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc462,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc56(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc169(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc315(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc461(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches55[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc56, x64Parser::tokenBranches56},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc169, x64Parser::tokenBranches169},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc315, x64Parser::tokenBranches315},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc461, x64Parser::tokenBranches461},
    {x64Token::EOT}};
void x64Parser::TokenFunc120(x64Operand& operand, int tokenPos) { operand.addressCoding = 17; }
x64Token x64Parser::tokenBranches54[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches55},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc120,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc257(x64Operand& operand, int tokenPos) { operand.addressCoding = 25; }
x64Token x64Parser::tokenBranches256[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc257,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc403(x64Operand& operand, int tokenPos) { operand.addressCoding = 40; }
x64Token x64Parser::tokenBranches402[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc403,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc256(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc402(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches255[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc256, x64Parser::tokenBranches256},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc402, x64Parser::tokenBranches402},
    {x64Token::EOT}};
void x64Parser::TokenFunc79(x64Operand& operand, int tokenPos) { operand.addressCoding = 10; }
x64Token x64Parser::tokenBranches78[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc79,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches255},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc606(x64Operand& operand, int tokenPos) { operand.addressCoding = 57; }
x64Token x64Parser::tokenBranches605[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc606,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc702(x64Operand& operand, int tokenPos) { operand.addressCoding = 70; }
x64Token x64Parser::tokenBranches701[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc702,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc826(x64Operand& operand, int tokenPos) { operand.addressCoding = 84; }
x64Token x64Parser::tokenBranches825[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc826,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2121(x64Operand& operand, int tokenPos) { operand.addressCoding = 176; }
x64Token x64Parser::tokenBranches2120[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2121,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2680(x64Operand& operand, int tokenPos) { operand.addressCoding = 202; }
x64Token x64Parser::tokenBranches2679[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2680,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2951(x64Operand& operand, int tokenPos) { operand.addressCoding = 222; }
x64Token x64Parser::tokenBranches2950[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2951,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2120(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2679(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2950(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2119[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2120, x64Parser::tokenBranches2120},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2679, x64Parser::tokenBranches2679},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2950, x64Parser::tokenBranches2950},
    {x64Token::EOT}};
void x64Parser::TokenFunc2403(x64Operand& operand, int tokenPos) { operand.addressCoding = 176; }
x64Token x64Parser::tokenBranches2118[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2119},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2403,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2118(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2117[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2118, x64Parser::tokenBranches2118},
    {x64Token::EOT}};
void x64Parser::TokenFunc2130(x64Operand& operand, int tokenPos) { operand.addressCoding = 177; }
x64Token x64Parser::tokenBranches2129[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2130,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2689(x64Operand& operand, int tokenPos) { operand.addressCoding = 203; }
x64Token x64Parser::tokenBranches2688[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2689,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2960(x64Operand& operand, int tokenPos) { operand.addressCoding = 223; }
x64Token x64Parser::tokenBranches2959[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2960,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2129(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2688(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2959(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2128[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2129, x64Parser::tokenBranches2129},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2688, x64Parser::tokenBranches2688},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2959, x64Parser::tokenBranches2959},
    {x64Token::EOT}};
void x64Parser::TokenFunc2410(x64Operand& operand, int tokenPos) { operand.addressCoding = 177; }
x64Token x64Parser::tokenBranches2116[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2117},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2128},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2410,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc605(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc701(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc825(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2116(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches604[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc605, x64Parser::tokenBranches605},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc701, x64Parser::tokenBranches701},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc825, x64Parser::tokenBranches825},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2116, x64Parser::tokenBranches2116},
    {x64Token::EOT}};
void x64Parser::TokenFunc506(x64Operand& operand, int tokenPos) { operand.addressCoding = 57; }
x64Token x64Parser::tokenBranches505[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc506,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches604},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc613(x64Operand& operand, int tokenPos) { operand.addressCoding = 67; }
x64Token x64Parser::tokenBranches612[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc613,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc709(x64Operand& operand, int tokenPos) { operand.addressCoding = 71; }
x64Token x64Parser::tokenBranches708[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc709,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc833(x64Operand& operand, int tokenPos) { operand.addressCoding = 85; }
x64Token x64Parser::tokenBranches832[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc833,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2101(x64Operand& operand, int tokenPos) { operand.addressCoding = 174; }
x64Token x64Parser::tokenBranches2100[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2101,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2660(x64Operand& operand, int tokenPos) { operand.addressCoding = 200; }
x64Token x64Parser::tokenBranches2659[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2660,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2931(x64Operand& operand, int tokenPos) { operand.addressCoding = 220; }
x64Token x64Parser::tokenBranches2930[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2931,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2100(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2659(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2930(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2099[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2100, x64Parser::tokenBranches2100},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2659, x64Parser::tokenBranches2659},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2930, x64Parser::tokenBranches2930},
    {x64Token::EOT}};
void x64Parser::TokenFunc2387(x64Operand& operand, int tokenPos) { operand.addressCoding = 174; }
x64Token x64Parser::tokenBranches2098[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2099},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2387,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2098(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2097[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2098, x64Parser::tokenBranches2098},
    {x64Token::EOT}};
void x64Parser::TokenFunc2110(x64Operand& operand, int tokenPos) { operand.addressCoding = 175; }
x64Token x64Parser::tokenBranches2109[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2110,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2669(x64Operand& operand, int tokenPos) { operand.addressCoding = 201; }
x64Token x64Parser::tokenBranches2668[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2669,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2940(x64Operand& operand, int tokenPos) { operand.addressCoding = 221; }
x64Token x64Parser::tokenBranches2939[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2940,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2109(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2668(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2939(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2108[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2109, x64Parser::tokenBranches2109},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2668, x64Parser::tokenBranches2668},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2939, x64Parser::tokenBranches2939},
    {x64Token::EOT}};
void x64Parser::TokenFunc2394(x64Operand& operand, int tokenPos) { operand.addressCoding = 175; }
x64Token x64Parser::tokenBranches2096[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2097},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2108},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2394,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2219(x64Operand& operand, int tokenPos) { operand.addressCoding = 182; }
x64Token x64Parser::tokenBranches2218[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2219,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2631(x64Operand& operand, int tokenPos) { operand.addressCoding = 198; }
x64Token x64Parser::tokenBranches2630[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2631,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3009(x64Operand& operand, int tokenPos) { operand.addressCoding = 228; }
x64Token x64Parser::tokenBranches3008[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3009,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2218(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2630(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3008(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2217[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2218, x64Parser::tokenBranches2218},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2630, x64Parser::tokenBranches2630},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3008, x64Parser::tokenBranches3008},
    {x64Token::EOT}};
void x64Parser::TokenFunc2449(x64Operand& operand, int tokenPos) { operand.addressCoding = 182; }
x64Token x64Parser::tokenBranches2216[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2217},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2449,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc612(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc708(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc832(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2096(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches611[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2216},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc612, x64Parser::tokenBranches612},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc708, x64Parser::tokenBranches708},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc832, x64Parser::tokenBranches832},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2096, x64Parser::tokenBranches2096},
    {x64Token::EOT}};
void x64Parser::TokenFunc975(x64Operand& operand, int tokenPos) { operand.addressCoding = 99; }
x64Token x64Parser::tokenBranches974[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc975,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc984(x64Operand& operand, int tokenPos) { operand.addressCoding = 100; }
x64Token x64Parser::tokenBranches983[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc984,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc993(x64Operand& operand, int tokenPos) { operand.addressCoding = 101; }
x64Token x64Parser::tokenBranches992[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc993,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc974(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc983(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc992(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches973[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc974, x64Parser::tokenBranches974},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc983, x64Parser::tokenBranches983},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc992, x64Parser::tokenBranches992},
    {x64Token::EOT}};
void x64Parser::TokenFunc966(x64Operand& operand, int tokenPos) { operand.addressCoding = 99; }
x64Token x64Parser::tokenBranches965[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc966,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches973},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc1103(x64Operand& operand, int tokenPos) { operand.addressCoding = 108; }
x64Token x64Parser::tokenBranches1102[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1103,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1112(x64Operand& operand, int tokenPos) { operand.addressCoding = 109; }
x64Token x64Parser::tokenBranches1111[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1112,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1121(x64Operand& operand, int tokenPos) { operand.addressCoding = 110; }
x64Token x64Parser::tokenBranches1120[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1121,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1102(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1111(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1120(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1101[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1102, x64Parser::tokenBranches1102},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1111, x64Parser::tokenBranches1111},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1120, x64Parser::tokenBranches1120},
    {x64Token::EOT}};
void x64Parser::TokenFunc1094(x64Operand& operand, int tokenPos) { operand.addressCoding = 108; }
x64Token x64Parser::tokenBranches1093[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1094,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1101},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1480(x64Operand& operand, int tokenPos) { operand.addressCoding = 134; }
x64Token x64Parser::tokenBranches1479[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1480,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1489(x64Operand& operand, int tokenPos) { operand.addressCoding = 135; }
x64Token x64Parser::tokenBranches1488[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1489,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1479(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1488(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1478[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1479, x64Parser::tokenBranches1479},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1488, x64Parser::tokenBranches1488},
    {x64Token::EOT}};
void x64Parser::TokenFunc1471(x64Operand& operand, int tokenPos) { operand.addressCoding = 134; }
x64Token x64Parser::tokenBranches1470[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1471,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1478},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc965(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1093(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1470(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches964[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc965, x64Parser::tokenBranches965},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1093, x64Parser::tokenBranches1093},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1470, x64Parser::tokenBranches1470},
    {x64Token::EOT}};
void x64Parser::TokenFunc511(x64Operand& operand, int tokenPos) { operand.addressCoding = 58; }
x64Token x64Parser::tokenBranches510[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc511,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches611},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches964},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc653(x64Operand& operand, int tokenPos) { operand.addressCoding = 53; }
x64Token x64Parser::tokenBranches652[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc653,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc777(x64Operand& operand, int tokenPos) { operand.addressCoding = 76; }
x64Token x64Parser::tokenBranches776[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc777,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc901(x64Operand& operand, int tokenPos) { operand.addressCoding = 90; }
x64Token x64Parser::tokenBranches900[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc901,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc652(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc776(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc900(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches651[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc652, x64Parser::tokenBranches652},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc776, x64Parser::tokenBranches776},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc900, x64Parser::tokenBranches900},
    {x64Token::EOT}};
void x64Parser::TokenFunc538(x64Operand& operand, int tokenPos) { operand.addressCoding = 53; }
x64Token x64Parser::tokenBranches537[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc538,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches651},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc644(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches643[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc644,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc768(x64Operand& operand, int tokenPos) { operand.addressCoding = 75; }
x64Token x64Parser::tokenBranches767[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc768,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc892(x64Operand& operand, int tokenPos) { operand.addressCoding = 89; }
x64Token x64Parser::tokenBranches891[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc892,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2300(x64Operand& operand, int tokenPos) { operand.addressCoding = 185; }
x64Token x64Parser::tokenBranches2299[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2300,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2832(x64Operand& operand, int tokenPos) { operand.addressCoding = 214; }
x64Token x64Parser::tokenBranches2831[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2832,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3130(x64Operand& operand, int tokenPos) { operand.addressCoding = 236; }
x64Token x64Parser::tokenBranches3129[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3130,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2299(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2831(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3129(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2298[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2299, x64Parser::tokenBranches2299},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2831, x64Parser::tokenBranches2831},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3129, x64Parser::tokenBranches3129},
    {x64Token::EOT}};
void x64Parser::TokenFunc2544(x64Operand& operand, int tokenPos) { operand.addressCoding = 185; }
x64Token x64Parser::tokenBranches2297[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2298},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2544,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2297(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2296[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2297, x64Parser::tokenBranches2297},
    {x64Token::EOT}};
void x64Parser::TokenFunc2309(x64Operand& operand, int tokenPos) { operand.addressCoding = 186; }
x64Token x64Parser::tokenBranches2308[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2309,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2841(x64Operand& operand, int tokenPos) { operand.addressCoding = 211; }
x64Token x64Parser::tokenBranches2840[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2841,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3139(x64Operand& operand, int tokenPos) { operand.addressCoding = 237; }
x64Token x64Parser::tokenBranches3138[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3139,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2308(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2840(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3138(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2307[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2308, x64Parser::tokenBranches2308},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2840, x64Parser::tokenBranches2840},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3138, x64Parser::tokenBranches3138},
    {x64Token::EOT}};
void x64Parser::TokenFunc2551(x64Operand& operand, int tokenPos) { operand.addressCoding = 186; }
x64Token x64Parser::tokenBranches2295[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2296},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2307},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2551,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc643(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc767(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc891(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2295(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches536[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches537},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc643, x64Parser::tokenBranches643},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc767, x64Parser::tokenBranches767},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc891, x64Parser::tokenBranches891},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2295, x64Parser::tokenBranches2295},
    {x64Token::EOT}};
void x64Parser::TokenFunc1625(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches1624[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1625,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1634(x64Operand& operand, int tokenPos) { operand.addressCoding = 75; }
x64Token x64Parser::tokenBranches1633[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1634,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1643(x64Operand& operand, int tokenPos) { operand.addressCoding = 89; }
x64Token x64Parser::tokenBranches1642[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1643,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1624(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1633(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1642(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1623[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1624, x64Parser::tokenBranches1624},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1633, x64Parser::tokenBranches1633},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1642, x64Parser::tokenBranches1642},
    {x64Token::EOT}};
void x64Parser::TokenFunc1616(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches1615[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1616,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1623},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1753(x64Operand& operand, int tokenPos) { operand.addressCoding = 147; }
x64Token x64Parser::tokenBranches1752[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1753,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1762(x64Operand& operand, int tokenPos) { operand.addressCoding = 148; }
x64Token x64Parser::tokenBranches1761[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1762,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1771(x64Operand& operand, int tokenPos) { operand.addressCoding = 149; }
x64Token x64Parser::tokenBranches1770[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1771,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1752(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1761(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1770(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1751[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1752, x64Parser::tokenBranches1752},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1761, x64Parser::tokenBranches1761},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1770, x64Parser::tokenBranches1770},
    {x64Token::EOT}};
void x64Parser::TokenFunc1744(x64Operand& operand, int tokenPos) { operand.addressCoding = 147; }
x64Token x64Parser::tokenBranches1743[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1744,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1751},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1899(x64Operand& operand, int tokenPos) { operand.addressCoding = 156; }
x64Token x64Parser::tokenBranches1898[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1899,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1908(x64Operand& operand, int tokenPos) { operand.addressCoding = 157; }
x64Token x64Parser::tokenBranches1907[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1908,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1928(x64Operand& operand, int tokenPos) { operand.addressCoding = 158; }
x64Token x64Parser::tokenBranches1927[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1928,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1939(x64Operand& operand, int tokenPos) { operand.addressCoding = 159; }
x64Token x64Parser::tokenBranches1938[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1939,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1927(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1938(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1926[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1927, x64Parser::tokenBranches1927},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1938, x64Parser::tokenBranches1938},
    {x64Token::EOT}};
void x64Parser::TokenFunc1917(x64Operand& operand, int tokenPos) { operand.addressCoding = 158; }
x64Token x64Parser::tokenBranches1916[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1917,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1926},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1898(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1907(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1897[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1916},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1898, x64Parser::tokenBranches1898},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1907, x64Parser::tokenBranches1907},
    {x64Token::EOT}};
void x64Parser::TokenFunc1890(x64Operand& operand, int tokenPos) { operand.addressCoding = 156; }
x64Token x64Parser::tokenBranches1889[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1890,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1897},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1615(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1743(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1889(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1614[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1615, x64Parser::tokenBranches1615},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1743, x64Parser::tokenBranches1743},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1889, x64Parser::tokenBranches1889},
    {x64Token::EOT}};
void x64Parser::TokenFunc526(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches525[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc526,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches536},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1614},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc565(x64Operand& operand, int tokenPos) { operand.addressCoding = 64; }
x64Token x64Parser::tokenBranches564[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData4,
                                              &x64Parser::TokenFunc565,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc1231(x64Operand& operand, int tokenPos) { operand.addressCoding = 117; }
x64Token x64Parser::tokenBranches1230[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1231,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1240(x64Operand& operand, int tokenPos) { operand.addressCoding = 118; }
x64Token x64Parser::tokenBranches1239[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1240,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1249(x64Operand& operand, int tokenPos) { operand.addressCoding = 119; }
x64Token x64Parser::tokenBranches1248[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1249,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1230(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1239(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1248(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1229[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1230, x64Parser::tokenBranches1230},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1239, x64Parser::tokenBranches1239},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1248, x64Parser::tokenBranches1248},
    {x64Token::EOT}};
void x64Parser::TokenFunc1222(x64Operand& operand, int tokenPos) { operand.addressCoding = 117; }
x64Token x64Parser::tokenBranches1221[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1222,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1229},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1359(x64Operand& operand, int tokenPos) { operand.addressCoding = 126; }
x64Token x64Parser::tokenBranches1358[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1359,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1368(x64Operand& operand, int tokenPos) { operand.addressCoding = 127; }
x64Token x64Parser::tokenBranches1367[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1368,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1377(x64Operand& operand, int tokenPos) { operand.addressCoding = 128; }
x64Token x64Parser::tokenBranches1376[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1377,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1358(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1367(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1376(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1357[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1358, x64Parser::tokenBranches1358},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1367, x64Parser::tokenBranches1367},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1376, x64Parser::tokenBranches1376},
    {x64Token::EOT}};
void x64Parser::TokenFunc1350(x64Operand& operand, int tokenPos) { operand.addressCoding = 126; }
x64Token x64Parser::tokenBranches1349[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1350,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1357},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1221(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1349(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1220[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1221, x64Parser::tokenBranches1221},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1349, x64Parser::tokenBranches1349},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches1219[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1220},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3748(x64Operand& operand, int tokenPos) { operand.addressCoding = 309; }
x64Token x64Parser::tokenBranches3747[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3748,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3757(x64Operand& operand, int tokenPos) { operand.addressCoding = 310; }
x64Token x64Parser::tokenBranches3756[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3757,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3766(x64Operand& operand, int tokenPos) { operand.addressCoding = 311; }
x64Token x64Parser::tokenBranches3765[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3766,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3747(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3756(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3765(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3746[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3747, x64Parser::tokenBranches3747},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3756, x64Parser::tokenBranches3756},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3765, x64Parser::tokenBranches3765},
    {x64Token::EOT}};
void x64Parser::TokenFunc3739(x64Operand& operand, int tokenPos) { operand.addressCoding = 309; }
x64Token x64Parser::tokenBranches3738[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3739,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3746},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3876(x64Operand& operand, int tokenPos) { operand.addressCoding = 318; }
x64Token x64Parser::tokenBranches3875[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3876,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3885(x64Operand& operand, int tokenPos) { operand.addressCoding = 319; }
x64Token x64Parser::tokenBranches3884[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3885,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3894(x64Operand& operand, int tokenPos) { operand.addressCoding = 320; }
x64Token x64Parser::tokenBranches3893[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3894,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3875(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3884(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3893(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3874[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3875, x64Parser::tokenBranches3875},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3884, x64Parser::tokenBranches3884},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3893, x64Parser::tokenBranches3893},
    {x64Token::EOT}};
void x64Parser::TokenFunc3867(x64Operand& operand, int tokenPos) { operand.addressCoding = 318; }
x64Token x64Parser::tokenBranches3866[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3867,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3874},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3738(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3866(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3737[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3738, x64Parser::tokenBranches3738},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3866, x64Parser::tokenBranches3866},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches3736[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3737},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4004(x64Operand& operand, int tokenPos) { operand.addressCoding = 327; }
x64Token x64Parser::tokenBranches4003[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4004,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4013(x64Operand& operand, int tokenPos) { operand.addressCoding = 328; }
x64Token x64Parser::tokenBranches4012[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4013,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4022(x64Operand& operand, int tokenPos) { operand.addressCoding = 329; }
x64Token x64Parser::tokenBranches4021[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4022,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4003(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4012(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4021(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4002[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4003, x64Parser::tokenBranches4003},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4012, x64Parser::tokenBranches4012},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4021, x64Parser::tokenBranches4021},
    {x64Token::EOT}};
void x64Parser::TokenFunc3995(x64Operand& operand, int tokenPos) { operand.addressCoding = 327; }
x64Token x64Parser::tokenBranches3994[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3995,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4002},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4132(x64Operand& operand, int tokenPos) { operand.addressCoding = 336; }
x64Token x64Parser::tokenBranches4131[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4132,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4141(x64Operand& operand, int tokenPos) { operand.addressCoding = 337; }
x64Token x64Parser::tokenBranches4140[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4141,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4150(x64Operand& operand, int tokenPos) { operand.addressCoding = 338; }
x64Token x64Parser::tokenBranches4149[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4150,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4131(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4140(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4149(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4130[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4131, x64Parser::tokenBranches4131},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4140, x64Parser::tokenBranches4140},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4149, x64Parser::tokenBranches4149},
    {x64Token::EOT}};
void x64Parser::TokenFunc4123(x64Operand& operand, int tokenPos) { operand.addressCoding = 336; }
x64Token x64Parser::tokenBranches4122[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4123,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4130},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3994(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4122(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3993[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3994, x64Parser::tokenBranches3994},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4122, x64Parser::tokenBranches4122},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches3992[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3993},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc78(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc525(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc564(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7[] = {
    {x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches33},
    {x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches54},
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches505},
    {x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches510},
    {x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1219},
    {x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3736},
    {x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3992},
    {x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc8, x64Parser::tokenBranches8},
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc78, x64Parser::tokenBranches78},
    {x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc525, x64Parser::tokenBranches525},
    {x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc564, x64Parser::tokenBranches564},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6[] = {{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches7},
                                        {x64Token::EOT}};
void x64Parser::TokenFunc14(x64Operand& operand, int tokenPos) { operand.addressCoding = 2; }
x64Token x64Parser::tokenBranches13[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc14,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc209(x64Operand& operand, int tokenPos) { operand.addressCoding = 21; }
x64Token x64Parser::tokenBranches208[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc209,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc355(x64Operand& operand, int tokenPos) { operand.addressCoding = 36; }
x64Token x64Parser::tokenBranches354[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc355,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc208(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc354(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches207[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc208, x64Parser::tokenBranches208},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc354, x64Parser::tokenBranches354},
    {x64Token::EOT}};
void x64Parser::TokenFunc43(x64Operand& operand, int tokenPos) { operand.addressCoding = 6; }
x64Token x64Parser::tokenBranches42[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc43,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches207},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc144(x64Operand& operand, int tokenPos) { operand.addressCoding = 14; }
x64Token x64Parser::tokenBranches143[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc144,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc290(x64Operand& operand, int tokenPos) { operand.addressCoding = 29; }
x64Token x64Parser::tokenBranches289[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc290,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc436(x64Operand& operand, int tokenPos) { operand.addressCoding = 44; }
x64Token x64Parser::tokenBranches435[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc436,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc42(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc143(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc289(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc435(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches41[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc42, x64Parser::tokenBranches42},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc143, x64Parser::tokenBranches143},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc289, x64Parser::tokenBranches289},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc435, x64Parser::tokenBranches435},
    {x64Token::EOT}};
void x64Parser::TokenFunc102(x64Operand& operand, int tokenPos) { operand.addressCoding = 14; }
x64Token x64Parser::tokenBranches40[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches41},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc102,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc218(x64Operand& operand, int tokenPos) { operand.addressCoding = 20; }
x64Token x64Parser::tokenBranches217[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc218,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc364(x64Operand& operand, int tokenPos) { operand.addressCoding = 35; }
x64Token x64Parser::tokenBranches363[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc364,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc217(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc363(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches216[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc217, x64Parser::tokenBranches217},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc363, x64Parser::tokenBranches363},
    {x64Token::EOT}};
void x64Parser::TokenFunc50(x64Operand& operand, int tokenPos) { operand.addressCoding = 5; }
x64Token x64Parser::tokenBranches49[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc50,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches216},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc163(x64Operand& operand, int tokenPos) { operand.addressCoding = 16; }
x64Token x64Parser::tokenBranches162[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc163,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc309(x64Operand& operand, int tokenPos) { operand.addressCoding = 31; }
x64Token x64Parser::tokenBranches308[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc309,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc455(x64Operand& operand, int tokenPos) { operand.addressCoding = 46; }
x64Token x64Parser::tokenBranches454[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc455,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc49(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc162(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc308(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc454(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches48[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc49, x64Parser::tokenBranches49},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc162, x64Parser::tokenBranches162},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc308, x64Parser::tokenBranches308},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc454, x64Parser::tokenBranches454},
    {x64Token::EOT}};
void x64Parser::TokenFunc115(x64Operand& operand, int tokenPos) { operand.addressCoding = 16; }
x64Token x64Parser::tokenBranches47[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches48},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc115,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc264(x64Operand& operand, int tokenPos) { operand.addressCoding = 26; }
x64Token x64Parser::tokenBranches263[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc264,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc410(x64Operand& operand, int tokenPos) { operand.addressCoding = 41; }
x64Token x64Parser::tokenBranches409[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc410,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc263(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc409(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches262[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc263, x64Parser::tokenBranches263},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc409, x64Parser::tokenBranches409},
    {x64Token::EOT}};
void x64Parser::TokenFunc84(x64Operand& operand, int tokenPos) { operand.addressCoding = 11; }
x64Token x64Parser::tokenBranches83[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc84,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches262},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc592(x64Operand& operand, int tokenPos) { operand.addressCoding = 49; }
x64Token x64Parser::tokenBranches591[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc592,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc716(x64Operand& operand, int tokenPos) { operand.addressCoding = 68; }
x64Token x64Parser::tokenBranches715[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc716,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc840(x64Operand& operand, int tokenPos) { operand.addressCoding = 82; }
x64Token x64Parser::tokenBranches839[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc840,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2161(x64Operand& operand, int tokenPos) { operand.addressCoding = 172; }
x64Token x64Parser::tokenBranches2160[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2161,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2720(x64Operand& operand, int tokenPos) { operand.addressCoding = 196; }
x64Token x64Parser::tokenBranches2719[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2720,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2991(x64Operand& operand, int tokenPos) { operand.addressCoding = 226; }
x64Token x64Parser::tokenBranches2990[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2991,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2160(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2719(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2990(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2159[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2160, x64Parser::tokenBranches2160},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2719, x64Parser::tokenBranches2719},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2990, x64Parser::tokenBranches2990},
    {x64Token::EOT}};
void x64Parser::TokenFunc2435(x64Operand& operand, int tokenPos) { operand.addressCoding = 172; }
x64Token x64Parser::tokenBranches2158[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2159},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2435,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2158(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2157[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2158, x64Parser::tokenBranches2158},
    {x64Token::EOT}};
void x64Parser::TokenFunc2170(x64Operand& operand, int tokenPos) { operand.addressCoding = 173; }
x64Token x64Parser::tokenBranches2169[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2170,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2729(x64Operand& operand, int tokenPos) { operand.addressCoding = 197; }
x64Token x64Parser::tokenBranches2728[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2729,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3000(x64Operand& operand, int tokenPos) { operand.addressCoding = 227; }
x64Token x64Parser::tokenBranches2999[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3000,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2169(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2728(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2999(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2168[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2169, x64Parser::tokenBranches2169},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2728, x64Parser::tokenBranches2728},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2999, x64Parser::tokenBranches2999},
    {x64Token::EOT}};
void x64Parser::TokenFunc2442(x64Operand& operand, int tokenPos) { operand.addressCoding = 173; }
x64Token x64Parser::tokenBranches2156[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2157},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2168},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2442,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc591(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc715(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc839(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2156(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches590[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc591, x64Parser::tokenBranches591},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc715, x64Parser::tokenBranches715},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc839, x64Parser::tokenBranches839},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2156, x64Parser::tokenBranches2156},
    {x64Token::EOT}};
void x64Parser::TokenFunc516(x64Operand& operand, int tokenPos) { operand.addressCoding = 49; }
x64Token x64Parser::tokenBranches515[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc516,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches590},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc599(x64Operand& operand, int tokenPos) { operand.addressCoding = 50; }
x64Token x64Parser::tokenBranches598[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc599,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc723(x64Operand& operand, int tokenPos) { operand.addressCoding = 69; }
x64Token x64Parser::tokenBranches722[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc723,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc847(x64Operand& operand, int tokenPos) { operand.addressCoding = 83; }
x64Token x64Parser::tokenBranches846[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc847,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2141(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2140[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2141,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2700(x64Operand& operand, int tokenPos) { operand.addressCoding = 194; }
x64Token x64Parser::tokenBranches2699[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2700,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2971(x64Operand& operand, int tokenPos) { operand.addressCoding = 224; }
x64Token x64Parser::tokenBranches2970[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2971,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2140(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2699(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2970(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2139[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2140, x64Parser::tokenBranches2140},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2699, x64Parser::tokenBranches2699},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2970, x64Parser::tokenBranches2970},
    {x64Token::EOT}};
void x64Parser::TokenFunc2419(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2138[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2139},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2419,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2138(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2137[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2138, x64Parser::tokenBranches2138},
    {x64Token::EOT}};
void x64Parser::TokenFunc2150(x64Operand& operand, int tokenPos) { operand.addressCoding = 171; }
x64Token x64Parser::tokenBranches2149[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2150,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2709(x64Operand& operand, int tokenPos) { operand.addressCoding = 195; }
x64Token x64Parser::tokenBranches2708[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2709,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2980(x64Operand& operand, int tokenPos) { operand.addressCoding = 225; }
x64Token x64Parser::tokenBranches2979[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2980,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2149(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2708(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2979(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2148[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2149, x64Parser::tokenBranches2149},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2708, x64Parser::tokenBranches2708},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2979, x64Parser::tokenBranches2979},
    {x64Token::EOT}};
void x64Parser::TokenFunc2426(x64Operand& operand, int tokenPos) { operand.addressCoding = 171; }
x64Token x64Parser::tokenBranches2136[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2137},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2148},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2426,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2228(x64Operand& operand, int tokenPos) { operand.addressCoding = 169; }
x64Token x64Parser::tokenBranches2227[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2228,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2640(x64Operand& operand, int tokenPos) { operand.addressCoding = 193; }
x64Token x64Parser::tokenBranches2639[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2640,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3018(x64Operand& operand, int tokenPos) { operand.addressCoding = 219; }
x64Token x64Parser::tokenBranches3017[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3018,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2227(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2639(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3017(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2226[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2227, x64Parser::tokenBranches2227},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2639, x64Parser::tokenBranches2639},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3017, x64Parser::tokenBranches3017},
    {x64Token::EOT}};
void x64Parser::TokenFunc2456(x64Operand& operand, int tokenPos) { operand.addressCoding = 169; }
x64Token x64Parser::tokenBranches2225[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2226},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2456,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc598(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc722(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc846(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2136(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches597[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2225},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc598, x64Parser::tokenBranches598},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc722, x64Parser::tokenBranches722},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc846, x64Parser::tokenBranches846},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2136, x64Parser::tokenBranches2136},
    {x64Token::EOT}};
void x64Parser::TokenFunc1009(x64Operand& operand, int tokenPos) { operand.addressCoding = 96; }
x64Token x64Parser::tokenBranches1008[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1009,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1018(x64Operand& operand, int tokenPos) { operand.addressCoding = 97; }
x64Token x64Parser::tokenBranches1017[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1018,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1027(x64Operand& operand, int tokenPos) { operand.addressCoding = 98; }
x64Token x64Parser::tokenBranches1026[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1027,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1008(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1017(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1026(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1007[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1008, x64Parser::tokenBranches1008},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1017, x64Parser::tokenBranches1017},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1026, x64Parser::tokenBranches1026},
    {x64Token::EOT}};
void x64Parser::TokenFunc1000(x64Operand& operand, int tokenPos) { operand.addressCoding = 96; }
x64Token x64Parser::tokenBranches999[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc1000,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1007},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc1137(x64Operand& operand, int tokenPos) { operand.addressCoding = 105; }
x64Token x64Parser::tokenBranches1136[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1137,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1146(x64Operand& operand, int tokenPos) { operand.addressCoding = 106; }
x64Token x64Parser::tokenBranches1145[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1146,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1155(x64Operand& operand, int tokenPos) { operand.addressCoding = 107; }
x64Token x64Parser::tokenBranches1154[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1155,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1136(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1145(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1154(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1135[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1136, x64Parser::tokenBranches1136},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1145, x64Parser::tokenBranches1145},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1154, x64Parser::tokenBranches1154},
    {x64Token::EOT}};
void x64Parser::TokenFunc1128(x64Operand& operand, int tokenPos) { operand.addressCoding = 105; }
x64Token x64Parser::tokenBranches1127[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1128,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1135},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1505(x64Operand& operand, int tokenPos) { operand.addressCoding = 132; }
x64Token x64Parser::tokenBranches1504[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1505,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1514(x64Operand& operand, int tokenPos) { operand.addressCoding = 133; }
x64Token x64Parser::tokenBranches1513[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1514,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1504(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1513(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1503[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1504, x64Parser::tokenBranches1504},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1513, x64Parser::tokenBranches1513},
    {x64Token::EOT}};
void x64Parser::TokenFunc1496(x64Operand& operand, int tokenPos) { operand.addressCoding = 132; }
x64Token x64Parser::tokenBranches1495[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1496,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1503},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc999(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1127(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1495(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches998[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc999, x64Parser::tokenBranches999},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1127, x64Parser::tokenBranches1127},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1495, x64Parser::tokenBranches1495},
    {x64Token::EOT}};
void x64Parser::TokenFunc521(x64Operand& operand, int tokenPos) { operand.addressCoding = 50; }
x64Token x64Parser::tokenBranches520[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc521,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches597},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches998},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc669(x64Operand& operand, int tokenPos) { operand.addressCoding = 60; }
x64Token x64Parser::tokenBranches668[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc669,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc793(x64Operand& operand, int tokenPos) { operand.addressCoding = 79; }
x64Token x64Parser::tokenBranches792[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc793,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc917(x64Operand& operand, int tokenPos) { operand.addressCoding = 93; }
x64Token x64Parser::tokenBranches916[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc917,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc668(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc792(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc916(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches667[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc668, x64Parser::tokenBranches668},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc792, x64Parser::tokenBranches792},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc916, x64Parser::tokenBranches916},
    {x64Token::EOT}};
void x64Parser::TokenFunc545(x64Operand& operand, int tokenPos) { operand.addressCoding = 60; }
x64Token x64Parser::tokenBranches544[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc545,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches667},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc660(x64Operand& operand, int tokenPos) { operand.addressCoding = 59; }
x64Token x64Parser::tokenBranches659[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc660,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc784(x64Operand& operand, int tokenPos) { operand.addressCoding = 78; }
x64Token x64Parser::tokenBranches783[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc784,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc908(x64Operand& operand, int tokenPos) { operand.addressCoding = 92; }
x64Token x64Parser::tokenBranches907[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc908,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2320(x64Operand& operand, int tokenPos) { operand.addressCoding = 189; }
x64Token x64Parser::tokenBranches2319[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2320,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2852(x64Operand& operand, int tokenPos) { operand.addressCoding = 215; }
x64Token x64Parser::tokenBranches2851[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2852,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3150(x64Operand& operand, int tokenPos) { operand.addressCoding = 240; }
x64Token x64Parser::tokenBranches3149[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3150,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2319(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2851(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3149(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2318[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2319, x64Parser::tokenBranches2319},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2851, x64Parser::tokenBranches2851},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3149, x64Parser::tokenBranches3149},
    {x64Token::EOT}};
void x64Parser::TokenFunc2560(x64Operand& operand, int tokenPos) { operand.addressCoding = 189; }
x64Token x64Parser::tokenBranches2317[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2318},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2560,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2317(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2316[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2317, x64Parser::tokenBranches2317},
    {x64Token::EOT}};
void x64Parser::TokenFunc2329(x64Operand& operand, int tokenPos) { operand.addressCoding = 190; }
x64Token x64Parser::tokenBranches2328[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2329,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2861(x64Operand& operand, int tokenPos) { operand.addressCoding = 216; }
x64Token x64Parser::tokenBranches2860[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2861,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3159(x64Operand& operand, int tokenPos) { operand.addressCoding = 241; }
x64Token x64Parser::tokenBranches3158[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3159,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2328(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2860(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3158(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2327[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2328, x64Parser::tokenBranches2328},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2860, x64Parser::tokenBranches2860},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3158, x64Parser::tokenBranches3158},
    {x64Token::EOT}};
void x64Parser::TokenFunc2567(x64Operand& operand, int tokenPos) { operand.addressCoding = 190; }
x64Token x64Parser::tokenBranches2315[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2316},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2327},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2567,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc659(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc783(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc907(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2315(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches543[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches544},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc659, x64Parser::tokenBranches659},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc783, x64Parser::tokenBranches783},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc907, x64Parser::tokenBranches907},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2315, x64Parser::tokenBranches2315},
    {x64Token::EOT}};
void x64Parser::TokenFunc1659(x64Operand& operand, int tokenPos) { operand.addressCoding = 141; }
x64Token x64Parser::tokenBranches1658[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1659,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1668(x64Operand& operand, int tokenPos) { operand.addressCoding = 142; }
x64Token x64Parser::tokenBranches1667[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1668,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1677(x64Operand& operand, int tokenPos) { operand.addressCoding = 143; }
x64Token x64Parser::tokenBranches1676[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1677,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1658(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1667(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1676(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1657[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1658, x64Parser::tokenBranches1658},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1667, x64Parser::tokenBranches1667},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1676, x64Parser::tokenBranches1676},
    {x64Token::EOT}};
void x64Parser::TokenFunc1650(x64Operand& operand, int tokenPos) { operand.addressCoding = 141; }
x64Token x64Parser::tokenBranches1649[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1650,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1657},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1787(x64Operand& operand, int tokenPos) { operand.addressCoding = 150; }
x64Token x64Parser::tokenBranches1786[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1787,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1796(x64Operand& operand, int tokenPos) { operand.addressCoding = 151; }
x64Token x64Parser::tokenBranches1795[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1796,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1805(x64Operand& operand, int tokenPos) { operand.addressCoding = 152; }
x64Token x64Parser::tokenBranches1804[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1805,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1786(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1795(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1804(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1785[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1786, x64Parser::tokenBranches1786},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1795, x64Parser::tokenBranches1795},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1804, x64Parser::tokenBranches1804},
    {x64Token::EOT}};
void x64Parser::TokenFunc1778(x64Operand& operand, int tokenPos) { operand.addressCoding = 150; }
x64Token x64Parser::tokenBranches1777[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1778,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1785},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1955(x64Operand& operand, int tokenPos) { operand.addressCoding = 161; }
x64Token x64Parser::tokenBranches1954[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1955,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1964(x64Operand& operand, int tokenPos) { operand.addressCoding = 162; }
x64Token x64Parser::tokenBranches1963[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1964,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1984(x64Operand& operand, int tokenPos) { operand.addressCoding = 163; }
x64Token x64Parser::tokenBranches1983[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1984,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1995(x64Operand& operand, int tokenPos) { operand.addressCoding = 164; }
x64Token x64Parser::tokenBranches1994[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1995,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1983(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1994(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1982[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1983, x64Parser::tokenBranches1983},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1994, x64Parser::tokenBranches1994},
    {x64Token::EOT}};
void x64Parser::TokenFunc1973(x64Operand& operand, int tokenPos) { operand.addressCoding = 163; }
x64Token x64Parser::tokenBranches1972[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1973,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1982},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1954(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1963(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1953[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1972},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1954, x64Parser::tokenBranches1954},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1963, x64Parser::tokenBranches1963},
    {x64Token::EOT}};
void x64Parser::TokenFunc1946(x64Operand& operand, int tokenPos) { operand.addressCoding = 160; }
x64Token x64Parser::tokenBranches1945[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1946,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1953},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1649(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1777(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1945(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1648[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1649, x64Parser::tokenBranches1649},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1777, x64Parser::tokenBranches1777},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1945, x64Parser::tokenBranches1945},
    {x64Token::EOT}};
void x64Parser::TokenFunc531(x64Operand& operand, int tokenPos) { operand.addressCoding = 59; }
x64Token x64Parser::tokenBranches530[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc531,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches543},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1648},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc570(x64Operand& operand, int tokenPos) { operand.addressCoding = 65; }
x64Token x64Parser::tokenBranches569[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData4,
                                              &x64Parser::TokenFunc570,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc1265(x64Operand& operand, int tokenPos) { operand.addressCoding = 114; }
x64Token x64Parser::tokenBranches1264[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1265,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1274(x64Operand& operand, int tokenPos) { operand.addressCoding = 115; }
x64Token x64Parser::tokenBranches1273[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1274,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1283(x64Operand& operand, int tokenPos) { operand.addressCoding = 116; }
x64Token x64Parser::tokenBranches1282[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1283,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1264(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1273(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1282(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1263[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1264, x64Parser::tokenBranches1264},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1273, x64Parser::tokenBranches1273},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1282, x64Parser::tokenBranches1282},
    {x64Token::EOT}};
void x64Parser::TokenFunc1256(x64Operand& operand, int tokenPos) { operand.addressCoding = 114; }
x64Token x64Parser::tokenBranches1255[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1256,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1263},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1393(x64Operand& operand, int tokenPos) { operand.addressCoding = 123; }
x64Token x64Parser::tokenBranches1392[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1393,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1402(x64Operand& operand, int tokenPos) { operand.addressCoding = 124; }
x64Token x64Parser::tokenBranches1401[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1402,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1411(x64Operand& operand, int tokenPos) { operand.addressCoding = 125; }
x64Token x64Parser::tokenBranches1410[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1411,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1392(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1401(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1410(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1391[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1392, x64Parser::tokenBranches1392},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1401, x64Parser::tokenBranches1401},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1410, x64Parser::tokenBranches1410},
    {x64Token::EOT}};
void x64Parser::TokenFunc1384(x64Operand& operand, int tokenPos) { operand.addressCoding = 123; }
x64Token x64Parser::tokenBranches1383[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1384,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1391},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1255(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1383(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1254[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1255, x64Parser::tokenBranches1255},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1383, x64Parser::tokenBranches1383},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches1253[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1254},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3782(x64Operand& operand, int tokenPos) { operand.addressCoding = 306; }
x64Token x64Parser::tokenBranches3781[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3782,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3791(x64Operand& operand, int tokenPos) { operand.addressCoding = 307; }
x64Token x64Parser::tokenBranches3790[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3791,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3800(x64Operand& operand, int tokenPos) { operand.addressCoding = 308; }
x64Token x64Parser::tokenBranches3799[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3800,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3781(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3790(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3799(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3780[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3781, x64Parser::tokenBranches3781},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3790, x64Parser::tokenBranches3790},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3799, x64Parser::tokenBranches3799},
    {x64Token::EOT}};
void x64Parser::TokenFunc3773(x64Operand& operand, int tokenPos) { operand.addressCoding = 306; }
x64Token x64Parser::tokenBranches3772[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3773,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3780},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3910(x64Operand& operand, int tokenPos) { operand.addressCoding = 315; }
x64Token x64Parser::tokenBranches3909[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3910,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3919(x64Operand& operand, int tokenPos) { operand.addressCoding = 316; }
x64Token x64Parser::tokenBranches3918[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3919,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3928(x64Operand& operand, int tokenPos) { operand.addressCoding = 317; }
x64Token x64Parser::tokenBranches3927[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3928,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3909(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3918(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3927(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3908[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3909, x64Parser::tokenBranches3909},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3918, x64Parser::tokenBranches3918},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3927, x64Parser::tokenBranches3927},
    {x64Token::EOT}};
void x64Parser::TokenFunc3901(x64Operand& operand, int tokenPos) { operand.addressCoding = 315; }
x64Token x64Parser::tokenBranches3900[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3901,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3908},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3772(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3900(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3771[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3772, x64Parser::tokenBranches3772},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3900, x64Parser::tokenBranches3900},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches3770[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3771},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4038(x64Operand& operand, int tokenPos) { operand.addressCoding = 324; }
x64Token x64Parser::tokenBranches4037[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4038,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4047(x64Operand& operand, int tokenPos) { operand.addressCoding = 325; }
x64Token x64Parser::tokenBranches4046[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4047,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4056(x64Operand& operand, int tokenPos) { operand.addressCoding = 326; }
x64Token x64Parser::tokenBranches4055[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4056,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4037(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4046(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4055(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4036[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4037, x64Parser::tokenBranches4037},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4046, x64Parser::tokenBranches4046},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4055, x64Parser::tokenBranches4055},
    {x64Token::EOT}};
void x64Parser::TokenFunc4029(x64Operand& operand, int tokenPos) { operand.addressCoding = 324; }
x64Token x64Parser::tokenBranches4028[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4029,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4036},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4166(x64Operand& operand, int tokenPos) { operand.addressCoding = 333; }
x64Token x64Parser::tokenBranches4165[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4166,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4175(x64Operand& operand, int tokenPos) { operand.addressCoding = 334; }
x64Token x64Parser::tokenBranches4174[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4175,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4184(x64Operand& operand, int tokenPos) { operand.addressCoding = 335; }
x64Token x64Parser::tokenBranches4183[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4184,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4165(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4174(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4183(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4164[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4165, x64Parser::tokenBranches4165},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4174, x64Parser::tokenBranches4174},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4183, x64Parser::tokenBranches4183},
    {x64Token::EOT}};
void x64Parser::TokenFunc4157(x64Operand& operand, int tokenPos) { operand.addressCoding = 333; }
x64Token x64Parser::tokenBranches4156[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4157,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4164},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4028(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4156(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4027[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4028, x64Parser::tokenBranches4028},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4156, x64Parser::tokenBranches4156},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches4026[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4027},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc13(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc83(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc530(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc569(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches12[] = {
    {x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches40},
    {x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches47},
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches515},
    {x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches520},
    {x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1253},
    {x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3770},
    {x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4026},
    {x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc13, x64Parser::tokenBranches13},
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc83, x64Parser::tokenBranches83},
    {x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc530, x64Parser::tokenBranches530},
    {x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc569, x64Parser::tokenBranches569},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches11[] = {{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches12},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc19(x64Operand& operand, int tokenPos) { operand.addressCoding = 3; }
x64Token x64Parser::tokenBranches18[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc19,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc236(x64Operand& operand, int tokenPos) { operand.addressCoding = 23; }
x64Token x64Parser::tokenBranches235[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc236,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc382(x64Operand& operand, int tokenPos) { operand.addressCoding = 38; }
x64Token x64Parser::tokenBranches381[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc382,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc235(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc381(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches234[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc235, x64Parser::tokenBranches235},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc381, x64Parser::tokenBranches381},
    {x64Token::EOT}};
void x64Parser::TokenFunc64(x64Operand& operand, int tokenPos) { operand.addressCoding = 8; }
x64Token x64Parser::tokenBranches63[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc64,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches234},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc151(x64Operand& operand, int tokenPos) { operand.addressCoding = 15; }
x64Token x64Parser::tokenBranches150[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc151,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc297(x64Operand& operand, int tokenPos) { operand.addressCoding = 30; }
x64Token x64Parser::tokenBranches296[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc297,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc443(x64Operand& operand, int tokenPos) { operand.addressCoding = 45; }
x64Token x64Parser::tokenBranches442[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc443,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc63(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc150(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc296(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc442(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches62[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc63, x64Parser::tokenBranches63},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc150, x64Parser::tokenBranches150},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc296, x64Parser::tokenBranches296},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc442, x64Parser::tokenBranches442},
    {x64Token::EOT}};
void x64Parser::TokenFunc107(x64Operand& operand, int tokenPos) { operand.addressCoding = 15; }
x64Token x64Parser::tokenBranches61[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches62},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc107,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc245(x64Operand& operand, int tokenPos) { operand.addressCoding = 24; }
x64Token x64Parser::tokenBranches244[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc245,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc391(x64Operand& operand, int tokenPos) { operand.addressCoding = 39; }
x64Token x64Parser::tokenBranches390[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc391,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc244(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc390(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches243[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc244, x64Parser::tokenBranches244},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc390, x64Parser::tokenBranches390},
    {x64Token::EOT}};
void x64Parser::TokenFunc71(x64Operand& operand, int tokenPos) { operand.addressCoding = 9; }
x64Token x64Parser::tokenBranches70[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc71,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches243},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc177(x64Operand& operand, int tokenPos) { operand.addressCoding = 18; }
x64Token x64Parser::tokenBranches176[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc177,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc323(x64Operand& operand, int tokenPos) { operand.addressCoding = 33; }
x64Token x64Parser::tokenBranches322[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc323,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc469(x64Operand& operand, int tokenPos) { operand.addressCoding = 48; }
x64Token x64Parser::tokenBranches468[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc469,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc70(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc176(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc322(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc468(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches69[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc70, x64Parser::tokenBranches70},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc176, x64Parser::tokenBranches176},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc322, x64Parser::tokenBranches322},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc468, x64Parser::tokenBranches468},
    {x64Token::EOT}};
void x64Parser::TokenFunc125(x64Operand& operand, int tokenPos) { operand.addressCoding = 18; }
x64Token x64Parser::tokenBranches68[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches69},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc125,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc271(x64Operand& operand, int tokenPos) { operand.addressCoding = 27; }
x64Token x64Parser::tokenBranches270[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc271,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc417(x64Operand& operand, int tokenPos) { operand.addressCoding = 42; }
x64Token x64Parser::tokenBranches416[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc417,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc270(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc416(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches269[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc270, x64Parser::tokenBranches270},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc416, x64Parser::tokenBranches416},
    {x64Token::EOT}};
void x64Parser::TokenFunc89(x64Operand& operand, int tokenPos) { operand.addressCoding = 12; }
x64Token x64Parser::tokenBranches88[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc89,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches269},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc730(x64Operand& operand, int tokenPos) { operand.addressCoding = 72; }
x64Token x64Parser::tokenBranches729[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc730,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc854(x64Operand& operand, int tokenPos) { operand.addressCoding = 86; }
x64Token x64Parser::tokenBranches853[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc854,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2201(x64Operand& operand, int tokenPos) { operand.addressCoding = 180; }
x64Token x64Parser::tokenBranches2200[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2201,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2760(x64Operand& operand, int tokenPos) { operand.addressCoding = 206; }
x64Token x64Parser::tokenBranches2759[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2760,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3058(x64Operand& operand, int tokenPos) { operand.addressCoding = 232; }
x64Token x64Parser::tokenBranches3057[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3058,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2200(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2759(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3057(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2199[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2200, x64Parser::tokenBranches2200},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2759, x64Parser::tokenBranches2759},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3057, x64Parser::tokenBranches3057},
    {x64Token::EOT}};
void x64Parser::TokenFunc2488(x64Operand& operand, int tokenPos) { operand.addressCoding = 180; }
x64Token x64Parser::tokenBranches2198[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2199},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2488,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2198(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2197[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2198, x64Parser::tokenBranches2198},
    {x64Token::EOT}};
void x64Parser::TokenFunc2210(x64Operand& operand, int tokenPos) { operand.addressCoding = 181; }
x64Token x64Parser::tokenBranches2209[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2210,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2769(x64Operand& operand, int tokenPos) { operand.addressCoding = 207; }
x64Token x64Parser::tokenBranches2768[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2769,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3067(x64Operand& operand, int tokenPos) { operand.addressCoding = 233; }
x64Token x64Parser::tokenBranches3066[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3067,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2209(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2768(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3066(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2208[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2209, x64Parser::tokenBranches2209},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2768, x64Parser::tokenBranches2768},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3066, x64Parser::tokenBranches3066},
    {x64Token::EOT}};
void x64Parser::TokenFunc2495(x64Operand& operand, int tokenPos) { operand.addressCoding = 181; }
x64Token x64Parser::tokenBranches2196[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2197},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2208},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2495,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc729(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc853(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2196(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches728[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc729, x64Parser::tokenBranches729},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc853, x64Parser::tokenBranches853},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2196, x64Parser::tokenBranches2196},
    {x64Token::EOT}};
void x64Parser::TokenFunc491(x64Operand& operand, int tokenPos) { operand.addressCoding = 54; }
x64Token x64Parser::tokenBranches490[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc491,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches728},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc737(x64Operand& operand, int tokenPos) { operand.addressCoding = 73; }
x64Token x64Parser::tokenBranches736[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc737,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc861(x64Operand& operand, int tokenPos) { operand.addressCoding = 87; }
x64Token x64Parser::tokenBranches860[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc861,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2181(x64Operand& operand, int tokenPos) { operand.addressCoding = 178; }
x64Token x64Parser::tokenBranches2180[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2181,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2740(x64Operand& operand, int tokenPos) { operand.addressCoding = 204; }
x64Token x64Parser::tokenBranches2739[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2740,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3038(x64Operand& operand, int tokenPos) { operand.addressCoding = 230; }
x64Token x64Parser::tokenBranches3037[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3038,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2180(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2739(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3037(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2179[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2180, x64Parser::tokenBranches2180},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2739, x64Parser::tokenBranches2739},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3037, x64Parser::tokenBranches3037},
    {x64Token::EOT}};
void x64Parser::TokenFunc2472(x64Operand& operand, int tokenPos) { operand.addressCoding = 178; }
x64Token x64Parser::tokenBranches2178[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2179},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2472,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2178(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2177[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2178, x64Parser::tokenBranches2178},
    {x64Token::EOT}};
void x64Parser::TokenFunc2190(x64Operand& operand, int tokenPos) { operand.addressCoding = 179; }
x64Token x64Parser::tokenBranches2189[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2190,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2749(x64Operand& operand, int tokenPos) { operand.addressCoding = 205; }
x64Token x64Parser::tokenBranches2748[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2749,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3047(x64Operand& operand, int tokenPos) { operand.addressCoding = 231; }
x64Token x64Parser::tokenBranches3046[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3047,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2189(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2748(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3046(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2188[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2189, x64Parser::tokenBranches2189},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2748, x64Parser::tokenBranches2748},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3046, x64Parser::tokenBranches3046},
    {x64Token::EOT}};
void x64Parser::TokenFunc2479(x64Operand& operand, int tokenPos) { operand.addressCoding = 179; }
x64Token x64Parser::tokenBranches2176[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2177},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2188},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2479,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2237(x64Operand& operand, int tokenPos) { operand.addressCoding = 183; }
x64Token x64Parser::tokenBranches2236[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2237,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2649(x64Operand& operand, int tokenPos) { operand.addressCoding = 199; }
x64Token x64Parser::tokenBranches2648[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2649,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3027(x64Operand& operand, int tokenPos) { operand.addressCoding = 229; }
x64Token x64Parser::tokenBranches3026[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3027,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2236(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2648(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3026(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2235[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2236, x64Parser::tokenBranches2236},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2648, x64Parser::tokenBranches2648},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3026, x64Parser::tokenBranches3026},
    {x64Token::EOT}};
void x64Parser::TokenFunc2463(x64Operand& operand, int tokenPos) { operand.addressCoding = 183; }
x64Token x64Parser::tokenBranches2234[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2235},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2463,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc736(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc860(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2176(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches735[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2234},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc736, x64Parser::tokenBranches736},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc860, x64Parser::tokenBranches860},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2176, x64Parser::tokenBranches2176},
    {x64Token::EOT}};
void x64Parser::TokenFunc1043(x64Operand& operand, int tokenPos) { operand.addressCoding = 102; }
x64Token x64Parser::tokenBranches1042[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1043,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1052(x64Operand& operand, int tokenPos) { operand.addressCoding = 103; }
x64Token x64Parser::tokenBranches1051[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1052,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1061(x64Operand& operand, int tokenPos) { operand.addressCoding = 104; }
x64Token x64Parser::tokenBranches1060[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1061,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1042(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1051(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1060(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1041[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1042, x64Parser::tokenBranches1042},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1051, x64Parser::tokenBranches1051},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1060, x64Parser::tokenBranches1060},
    {x64Token::EOT}};
void x64Parser::TokenFunc1034(x64Operand& operand, int tokenPos) { operand.addressCoding = 102; }
x64Token x64Parser::tokenBranches1033[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1034,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1041},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1171(x64Operand& operand, int tokenPos) { operand.addressCoding = 111; }
x64Token x64Parser::tokenBranches1170[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1171,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1180(x64Operand& operand, int tokenPos) { operand.addressCoding = 112; }
x64Token x64Parser::tokenBranches1179[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1180,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1189(x64Operand& operand, int tokenPos) { operand.addressCoding = 113; }
x64Token x64Parser::tokenBranches1188[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1189,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1170(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1179(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1188(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1169[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1170, x64Parser::tokenBranches1170},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1179, x64Parser::tokenBranches1179},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1188, x64Parser::tokenBranches1188},
    {x64Token::EOT}};
void x64Parser::TokenFunc1162(x64Operand& operand, int tokenPos) { operand.addressCoding = 111; }
x64Token x64Parser::tokenBranches1161[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1162,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1169},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1530(x64Operand& operand, int tokenPos) { operand.addressCoding = 136; }
x64Token x64Parser::tokenBranches1529[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1530,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1539(x64Operand& operand, int tokenPos) { operand.addressCoding = 137; }
x64Token x64Parser::tokenBranches1538[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1539,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1529(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1538(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1528[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1529, x64Parser::tokenBranches1529},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1538, x64Parser::tokenBranches1538},
    {x64Token::EOT}};
void x64Parser::TokenFunc1521(x64Operand& operand, int tokenPos) { operand.addressCoding = 136; }
x64Token x64Parser::tokenBranches1520[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1521,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1528},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1033(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1161(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1520(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1032[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1033, x64Parser::tokenBranches1033},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1161, x64Parser::tokenBranches1161},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1520, x64Parser::tokenBranches1520},
    {x64Token::EOT}};
void x64Parser::TokenFunc496(x64Operand& operand, int tokenPos) { operand.addressCoding = 55; }
x64Token x64Parser::tokenBranches495[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc496,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches735},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1032},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc637(x64Operand& operand, int tokenPos) { operand.addressCoding = 56; }
x64Token x64Parser::tokenBranches636[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc637,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc761(x64Operand& operand, int tokenPos) { operand.addressCoding = 77; }
x64Token x64Parser::tokenBranches760[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc761,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc885(x64Operand& operand, int tokenPos) { operand.addressCoding = 91; }
x64Token x64Parser::tokenBranches884[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc885,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2280(x64Operand& operand, int tokenPos) { operand.addressCoding = 187; }
x64Token x64Parser::tokenBranches2279[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2280,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2812(x64Operand& operand, int tokenPos) { operand.addressCoding = 212; }
x64Token x64Parser::tokenBranches2811[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2812,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3110(x64Operand& operand, int tokenPos) { operand.addressCoding = 238; }
x64Token x64Parser::tokenBranches3109[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3110,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2279(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2811(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3109(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2278[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2279, x64Parser::tokenBranches2279},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2811, x64Parser::tokenBranches2811},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3109, x64Parser::tokenBranches3109},
    {x64Token::EOT}};
void x64Parser::TokenFunc2528(x64Operand& operand, int tokenPos) { operand.addressCoding = 187; }
x64Token x64Parser::tokenBranches2277[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2278},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2528,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2277(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2276[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2277, x64Parser::tokenBranches2277},
    {x64Token::EOT}};
void x64Parser::TokenFunc2289(x64Operand& operand, int tokenPos) { operand.addressCoding = 188; }
x64Token x64Parser::tokenBranches2288[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2289,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2821(x64Operand& operand, int tokenPos) { operand.addressCoding = 213; }
x64Token x64Parser::tokenBranches2820[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2821,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3119(x64Operand& operand, int tokenPos) { operand.addressCoding = 239; }
x64Token x64Parser::tokenBranches3118[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3119,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2288(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2820(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3118(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2287[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2288, x64Parser::tokenBranches2288},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2820, x64Parser::tokenBranches2820},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3118, x64Parser::tokenBranches3118},
    {x64Token::EOT}};
void x64Parser::TokenFunc2535(x64Operand& operand, int tokenPos) { operand.addressCoding = 188; }
x64Token x64Parser::tokenBranches2275[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2276},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2287},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2535,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc636(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc760(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc884(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2275(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches635[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc636, x64Parser::tokenBranches636},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc760, x64Parser::tokenBranches760},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc884, x64Parser::tokenBranches884},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2275, x64Parser::tokenBranches2275},
    {x64Token::EOT}};
void x64Parser::TokenFunc1299(x64Operand& operand, int tokenPos) { operand.addressCoding = 120; }
x64Token x64Parser::tokenBranches1298[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1299,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1308(x64Operand& operand, int tokenPos) { operand.addressCoding = 121; }
x64Token x64Parser::tokenBranches1307[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1308,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1317(x64Operand& operand, int tokenPos) { operand.addressCoding = 122; }
x64Token x64Parser::tokenBranches1316[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1317,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1298(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1307(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1316(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1297[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1298, x64Parser::tokenBranches1298},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1307, x64Parser::tokenBranches1307},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1316, x64Parser::tokenBranches1316},
    {x64Token::EOT}};
void x64Parser::TokenFunc1290(x64Operand& operand, int tokenPos) { operand.addressCoding = 120; }
x64Token x64Parser::tokenBranches1289[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1290,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1297},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1427(x64Operand& operand, int tokenPos) { operand.addressCoding = 129; }
x64Token x64Parser::tokenBranches1426[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1427,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1436(x64Operand& operand, int tokenPos) { operand.addressCoding = 130; }
x64Token x64Parser::tokenBranches1435[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1436,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1445(x64Operand& operand, int tokenPos) { operand.addressCoding = 131; }
x64Token x64Parser::tokenBranches1444[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1445,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1426(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1435(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1444(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1425[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1426, x64Parser::tokenBranches1426},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1435, x64Parser::tokenBranches1435},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1444, x64Parser::tokenBranches1444},
    {x64Token::EOT}};
void x64Parser::TokenFunc1418(x64Operand& operand, int tokenPos) { operand.addressCoding = 129; }
x64Token x64Parser::tokenBranches1417[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1418,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1425},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1574(x64Operand& operand, int tokenPos) { operand.addressCoding = 139; }
x64Token x64Parser::tokenBranches1573[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1574,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1583(x64Operand& operand, int tokenPos) { operand.addressCoding = 140; }
x64Token x64Parser::tokenBranches1582[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1583,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1573(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1582(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1572[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1573, x64Parser::tokenBranches1573},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1582, x64Parser::tokenBranches1582},
    {x64Token::EOT}};
void x64Parser::TokenFunc1565(x64Operand& operand, int tokenPos) { operand.addressCoding = 139; }
x64Token x64Parser::tokenBranches1564[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1565,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1572},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1289(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1417(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1564(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1288[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1289, x64Parser::tokenBranches1289},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1417, x64Parser::tokenBranches1417},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1564, x64Parser::tokenBranches1564},
    {x64Token::EOT}};
void x64Parser::TokenFunc501(x64Operand& operand, int tokenPos) { operand.addressCoding = 56; }
x64Token x64Parser::tokenBranches500[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc501,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches635},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1288},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc685(x64Operand& operand, int tokenPos) { operand.addressCoding = 62; }
x64Token x64Parser::tokenBranches684[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc685,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc809(x64Operand& operand, int tokenPos) { operand.addressCoding = 81; }
x64Token x64Parser::tokenBranches808[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc809,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc926(x64Operand& operand, int tokenPos) { operand.addressCoding = 94; }
x64Token x64Parser::tokenBranches925[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc926,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc684(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc808(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc925(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches683[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc684, x64Parser::tokenBranches684},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc808, x64Parser::tokenBranches808},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc925, x64Parser::tokenBranches925},
    {x64Token::EOT}};
void x64Parser::TokenFunc557(x64Operand& operand, int tokenPos) { operand.addressCoding = 62; }
x64Token x64Parser::tokenBranches556[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc557,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches683},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc676(x64Operand& operand, int tokenPos) { operand.addressCoding = 61; }
x64Token x64Parser::tokenBranches675[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc676,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc800(x64Operand& operand, int tokenPos) { operand.addressCoding = 80; }
x64Token x64Parser::tokenBranches799[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc800,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc933(x64Operand& operand, int tokenPos) { operand.addressCoding = 95; }
x64Token x64Parser::tokenBranches932[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc933,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2340(x64Operand& operand, int tokenPos) { operand.addressCoding = 191; }
x64Token x64Parser::tokenBranches2339[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2340,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2872(x64Operand& operand, int tokenPos) { operand.addressCoding = 217; }
x64Token x64Parser::tokenBranches2871[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2872,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3170(x64Operand& operand, int tokenPos) { operand.addressCoding = 242; }
x64Token x64Parser::tokenBranches3169[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3170,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2339(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2871(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3169(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2338[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2339, x64Parser::tokenBranches2339},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2871, x64Parser::tokenBranches2871},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3169, x64Parser::tokenBranches3169},
    {x64Token::EOT}};
void x64Parser::TokenFunc2576(x64Operand& operand, int tokenPos) { operand.addressCoding = 191; }
x64Token x64Parser::tokenBranches2337[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2338},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2576,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2337(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2336[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2337, x64Parser::tokenBranches2337},
    {x64Token::EOT}};
void x64Parser::TokenFunc2349(x64Operand& operand, int tokenPos) { operand.addressCoding = 192; }
x64Token x64Parser::tokenBranches2348[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2349,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2881(x64Operand& operand, int tokenPos) { operand.addressCoding = 218; }
x64Token x64Parser::tokenBranches2880[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2881,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3179(x64Operand& operand, int tokenPos) { operand.addressCoding = 243; }
x64Token x64Parser::tokenBranches3178[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3179,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2348(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2880(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3178(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2347[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2348, x64Parser::tokenBranches2348},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2880, x64Parser::tokenBranches2880},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3178, x64Parser::tokenBranches3178},
    {x64Token::EOT}};
void x64Parser::TokenFunc2583(x64Operand& operand, int tokenPos) { operand.addressCoding = 192; }
x64Token x64Parser::tokenBranches2335[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2336},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2347},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2583,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc675(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc799(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc932(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2335(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches555[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches556},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc675, x64Parser::tokenBranches675},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc799, x64Parser::tokenBranches799},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc932, x64Parser::tokenBranches932},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2335, x64Parser::tokenBranches2335},
    {x64Token::EOT}};
void x64Parser::TokenFunc1693(x64Operand& operand, int tokenPos) { operand.addressCoding = 144; }
x64Token x64Parser::tokenBranches1692[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1693,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1702(x64Operand& operand, int tokenPos) { operand.addressCoding = 145; }
x64Token x64Parser::tokenBranches1701[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1702,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1711(x64Operand& operand, int tokenPos) { operand.addressCoding = 146; }
x64Token x64Parser::tokenBranches1710[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1711,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1692(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1701(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1710(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1691[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1692, x64Parser::tokenBranches1692},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1701, x64Parser::tokenBranches1701},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1710, x64Parser::tokenBranches1710},
    {x64Token::EOT}};
void x64Parser::TokenFunc1684(x64Operand& operand, int tokenPos) { operand.addressCoding = 144; }
x64Token x64Parser::tokenBranches1683[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1684,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1691},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1821(x64Operand& operand, int tokenPos) { operand.addressCoding = 153; }
x64Token x64Parser::tokenBranches1820[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1821,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1830(x64Operand& operand, int tokenPos) { operand.addressCoding = 154; }
x64Token x64Parser::tokenBranches1829[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1830,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1839(x64Operand& operand, int tokenPos) { operand.addressCoding = 155; }
x64Token x64Parser::tokenBranches1838[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1839,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1820(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1829(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1838(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1819[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1820, x64Parser::tokenBranches1820},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1829, x64Parser::tokenBranches1829},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1838, x64Parser::tokenBranches1838},
    {x64Token::EOT}};
void x64Parser::TokenFunc1812(x64Operand& operand, int tokenPos) { operand.addressCoding = 153; }
x64Token x64Parser::tokenBranches1811[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1812,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1819},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2011(x64Operand& operand, int tokenPos) { operand.addressCoding = 165; }
x64Token x64Parser::tokenBranches2010[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2011,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2020(x64Operand& operand, int tokenPos) { operand.addressCoding = 166; }
x64Token x64Parser::tokenBranches2019[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2020,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2040(x64Operand& operand, int tokenPos) { operand.addressCoding = 167; }
x64Token x64Parser::tokenBranches2039[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2040,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2051(x64Operand& operand, int tokenPos) { operand.addressCoding = 168; }
x64Token x64Parser::tokenBranches2050[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2051,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2039(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2050(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2038[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2039, x64Parser::tokenBranches2039},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2050, x64Parser::tokenBranches2050},
    {x64Token::EOT}};
void x64Parser::TokenFunc2029(x64Operand& operand, int tokenPos) { operand.addressCoding = 167; }
x64Token x64Parser::tokenBranches2028[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2029,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2038},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2010(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2019(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2009[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2028},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2010, x64Parser::tokenBranches2010},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2019, x64Parser::tokenBranches2019},
    {x64Token::EOT}};
void x64Parser::TokenFunc2002(x64Operand& operand, int tokenPos) { operand.addressCoding = 165; }
x64Token x64Parser::tokenBranches2001[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2002,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2009},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1683(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1811(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2001(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1682[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1683, x64Parser::tokenBranches1683},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1811, x64Parser::tokenBranches1811},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2001, x64Parser::tokenBranches2001},
    {x64Token::EOT}};
void x64Parser::TokenFunc550(x64Operand& operand, int tokenPos) { operand.addressCoding = 61; }
x64Token x64Parser::tokenBranches549[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc550,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches555},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1682},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc575(x64Operand& operand, int tokenPos) { operand.addressCoding = 66; }
x64Token x64Parser::tokenBranches574[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData4,
                                              &x64Parser::TokenFunc575,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc3277(x64Operand& operand, int tokenPos) { operand.addressCoding = 248; }
x64Token x64Parser::tokenBranches3276[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3277,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3368(x64Operand& operand, int tokenPos) { operand.addressCoding = 264; }
x64Token x64Parser::tokenBranches3367[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3368,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3460(x64Operand& operand, int tokenPos) { operand.addressCoding = 278; }
x64Token x64Parser::tokenBranches3459[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3460,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4569(x64Operand& operand, int tokenPos) { operand.addressCoding = 379; }
x64Token x64Parser::tokenBranches4568[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4569,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4945(x64Operand& operand, int tokenPos) { operand.addressCoding = 403; }
x64Token x64Parser::tokenBranches4944[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4945,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5157(x64Operand& operand, int tokenPos) { operand.addressCoding = 427; }
x64Token x64Parser::tokenBranches5156[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5157,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4568(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4944(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5156(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4567[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4568, x64Parser::tokenBranches4568},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4944, x64Parser::tokenBranches4944},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5156, x64Parser::tokenBranches5156},
    {x64Token::EOT}};
void x64Parser::TokenFunc4755(x64Operand& operand, int tokenPos) { operand.addressCoding = 379; }
x64Token x64Parser::tokenBranches4566[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4567},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4755,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4566(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4565[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4566, x64Parser::tokenBranches4566},
    {x64Token::EOT}};
void x64Parser::TokenFunc4578(x64Operand& operand, int tokenPos) { operand.addressCoding = 380; }
x64Token x64Parser::tokenBranches4577[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4578,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4954(x64Operand& operand, int tokenPos) { operand.addressCoding = 404; }
x64Token x64Parser::tokenBranches4953[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4954,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5166(x64Operand& operand, int tokenPos) { operand.addressCoding = 428; }
x64Token x64Parser::tokenBranches5165[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5166,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4577(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4953(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5165(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4576[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4577, x64Parser::tokenBranches4577},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4953, x64Parser::tokenBranches4953},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5165, x64Parser::tokenBranches5165},
    {x64Token::EOT}};
void x64Parser::TokenFunc4762(x64Operand& operand, int tokenPos) { operand.addressCoding = 380; }
x64Token x64Parser::tokenBranches4564[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4565},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4576},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4762,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3276(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3367(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3459(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4564(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3275[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3276, x64Parser::tokenBranches3276},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3367, x64Parser::tokenBranches3367},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3459, x64Parser::tokenBranches3459},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4564, x64Parser::tokenBranches4564},
    {x64Token::EOT}};
void x64Parser::TokenFunc3196(x64Operand& operand, int tokenPos) { operand.addressCoding = 248; }
x64Token x64Parser::tokenBranches3195[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3196,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3275},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3337(x64Operand& operand, int tokenPos) { operand.addressCoding = 256; }
x64Token x64Parser::tokenBranches3336[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3337,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3429(x64Operand& operand, int tokenPos) { operand.addressCoding = 273; }
x64Token x64Parser::tokenBranches3428[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3429,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3521(x64Operand& operand, int tokenPos) { operand.addressCoding = 287; }
x64Token x64Parser::tokenBranches3520[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3521,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3336(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3428(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3520(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3335[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3336, x64Parser::tokenBranches3336},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3428, x64Parser::tokenBranches3428},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3520, x64Parser::tokenBranches3520},
    {x64Token::EOT}};
void x64Parser::TokenFunc3236(x64Operand& operand, int tokenPos) { operand.addressCoding = 256; }
x64Token x64Parser::tokenBranches3235[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3236,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3335},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3375(x64Operand& operand, int tokenPos) { operand.addressCoding = 265; }
x64Token x64Parser::tokenBranches3374[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3375,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3467(x64Operand& operand, int tokenPos) { operand.addressCoding = 279; }
x64Token x64Parser::tokenBranches3466[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3467,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4589(x64Operand& operand, int tokenPos) { operand.addressCoding = 381; }
x64Token x64Parser::tokenBranches4588[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4589,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4965(x64Operand& operand, int tokenPos) { operand.addressCoding = 405; }
x64Token x64Parser::tokenBranches4964[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4965,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5177(x64Operand& operand, int tokenPos) { operand.addressCoding = 429; }
x64Token x64Parser::tokenBranches5176[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5177,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4588(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4964(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5176(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4587[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4588, x64Parser::tokenBranches4588},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4964, x64Parser::tokenBranches4964},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5176, x64Parser::tokenBranches5176},
    {x64Token::EOT}};
void x64Parser::TokenFunc4771(x64Operand& operand, int tokenPos) { operand.addressCoding = 381; }
x64Token x64Parser::tokenBranches4586[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4587},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4771,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4586(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4585[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4586, x64Parser::tokenBranches4586},
    {x64Token::EOT}};
void x64Parser::TokenFunc4598(x64Operand& operand, int tokenPos) { operand.addressCoding = 382; }
x64Token x64Parser::tokenBranches4597[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4598,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4974(x64Operand& operand, int tokenPos) { operand.addressCoding = 406; }
x64Token x64Parser::tokenBranches4973[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4974,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5186(x64Operand& operand, int tokenPos) { operand.addressCoding = 430; }
x64Token x64Parser::tokenBranches5185[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5186,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4597(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4973(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5185(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4596[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4597, x64Parser::tokenBranches4597},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4973, x64Parser::tokenBranches4973},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5185, x64Parser::tokenBranches5185},
    {x64Token::EOT}};
void x64Parser::TokenFunc4778(x64Operand& operand, int tokenPos) { operand.addressCoding = 382; }
x64Token x64Parser::tokenBranches4584[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4585},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4596},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4778,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3374(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3466(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4584(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3234[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3235},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3374, x64Parser::tokenBranches3374},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3466, x64Parser::tokenBranches3466},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4584, x64Parser::tokenBranches4584},
    {x64Token::EOT}};
void x64Parser::TokenFunc3283(x64Operand& operand, int tokenPos) { operand.addressCoding = 249; }
x64Token x64Parser::tokenBranches3282[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3283,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3572(x64Operand& operand, int tokenPos) { operand.addressCoding = 289; }
x64Token x64Parser::tokenBranches3571[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3572,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3581(x64Operand& operand, int tokenPos) { operand.addressCoding = 290; }
x64Token x64Parser::tokenBranches3580[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3581,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3590(x64Operand& operand, int tokenPos) { operand.addressCoding = 291; }
x64Token x64Parser::tokenBranches3589[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3590,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3571(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3580(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3589(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3570[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3571, x64Parser::tokenBranches3571},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3580, x64Parser::tokenBranches3580},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3589, x64Parser::tokenBranches3589},
    {x64Token::EOT}};
void x64Parser::TokenFunc3563(x64Operand& operand, int tokenPos) { operand.addressCoding = 289; }
x64Token x64Parser::tokenBranches3562[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3563,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3570},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3632(x64Operand& operand, int tokenPos) { operand.addressCoding = 295; }
x64Token x64Parser::tokenBranches3631[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3632,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3641(x64Operand& operand, int tokenPos) { operand.addressCoding = 296; }
x64Token x64Parser::tokenBranches3640[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3641,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3650(x64Operand& operand, int tokenPos) { operand.addressCoding = 297; }
x64Token x64Parser::tokenBranches3649[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3650,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3631(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3640(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3649(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3630[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3631, x64Parser::tokenBranches3631},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3640, x64Parser::tokenBranches3640},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3649, x64Parser::tokenBranches3649},
    {x64Token::EOT}};
void x64Parser::TokenFunc3623(x64Operand& operand, int tokenPos) { operand.addressCoding = 295; }
x64Token x64Parser::tokenBranches3622[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3623,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3630},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3678(x64Operand& operand, int tokenPos) { operand.addressCoding = 301; }
x64Token x64Parser::tokenBranches3677[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3678,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3677(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3676[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3677, x64Parser::tokenBranches3677},
    {x64Token::EOT}};
void x64Parser::TokenFunc3669(x64Operand& operand, int tokenPos) { operand.addressCoding = 300; }
x64Token x64Parser::tokenBranches3668[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3669,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3676},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3706(x64Operand& operand, int tokenPos) { operand.addressCoding = 305; }
x64Token x64Parser::tokenBranches3705[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3706,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3705(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3704[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3705, x64Parser::tokenBranches3705},
    {x64Token::EOT}};
void x64Parser::TokenFunc3697(x64Operand& operand, int tokenPos) { operand.addressCoding = 304; }
x64Token x64Parser::tokenBranches3696[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3697,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3704},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3562(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3622(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3668(x64Operand& operand, int tokenPos)
{
    operand.values[12] = new Coding[2];
    CleanupValues.push_back(operand.values[12]);
    operand.values[12]->type = Coding::number;
    operand.values[12]->val = operands.size();
    operand.values[12]->bits = 0;
    operand.values[12]->field = 0;
    operand.values[12]->unary = 0;
    operand.values[12]->binary = 0;
    operand.values[12][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3696(x64Operand& operand, int tokenPos)
{
    operand.values[13] = new Coding[2];
    CleanupValues.push_back(operand.values[13]);
    operand.values[13]->type = Coding::number;
    operand.values[13]->val = operands.size();
    operand.values[13]->bits = 0;
    operand.values[13]->field = 0;
    operand.values[13]->unary = 0;
    operand.values[13]->binary = 0;
    operand.values[13][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3561[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3562, x64Parser::tokenBranches3562},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3622, x64Parser::tokenBranches3622},
    {x64Token::NUMBER, 20, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3668, x64Parser::tokenBranches3668},
    {x64Token::NUMBER, 21, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3696, x64Parser::tokenBranches3696},
    {x64Token::EOT}};
void x64Parser::TokenFunc3201(x64Operand& operand, int tokenPos) { operand.addressCoding = 249; }
void x64Parser::TokenFunc3282(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3200[] = {
    {
        x64Token::TOKEN,
        2,
        1,
        0,
        x64Parser::RegClassData3,
        &x64Parser::TokenFunc3201,
    },
    {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3234},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3282, x64Parser::tokenBranches3282},
    {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3561},
    {x64Token::EOT}};
void x64Parser::TokenFunc3290(x64Operand& operand, int tokenPos) { operand.addressCoding = 250; }
x64Token x64Parser::tokenBranches3289[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3290,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3382(x64Operand& operand, int tokenPos) { operand.addressCoding = 266; }
x64Token x64Parser::tokenBranches3381[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3382,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3474(x64Operand& operand, int tokenPos) { operand.addressCoding = 280; }
x64Token x64Parser::tokenBranches3473[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3474,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4481(x64Operand& operand, int tokenPos) { operand.addressCoding = 369; }
x64Token x64Parser::tokenBranches4480[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4481,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4857(x64Operand& operand, int tokenPos) { operand.addressCoding = 393; }
x64Token x64Parser::tokenBranches4856[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4857,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5069(x64Operand& operand, int tokenPos) { operand.addressCoding = 417; }
x64Token x64Parser::tokenBranches5068[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5069,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4480(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4856(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5068(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4479[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4480, x64Parser::tokenBranches4480},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4856, x64Parser::tokenBranches4856},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5068, x64Parser::tokenBranches5068},
    {x64Token::EOT}};
void x64Parser::TokenFunc4687(x64Operand& operand, int tokenPos) { operand.addressCoding = 369; }
x64Token x64Parser::tokenBranches4478[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4479},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4687,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4549(x64Operand& operand, int tokenPos) { operand.addressCoding = 377; }
x64Token x64Parser::tokenBranches4548[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4549,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4925(x64Operand& operand, int tokenPos) { operand.addressCoding = 401; }
x64Token x64Parser::tokenBranches4924[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4925,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5137(x64Operand& operand, int tokenPos) { operand.addressCoding = 425; }
x64Token x64Parser::tokenBranches5136[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5137,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4548(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4924(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5136(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4547[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4548, x64Parser::tokenBranches4548},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4924, x64Parser::tokenBranches4924},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5136, x64Parser::tokenBranches5136},
    {x64Token::EOT}};
void x64Parser::TokenFunc4739(x64Operand& operand, int tokenPos) { operand.addressCoding = 377; }
x64Token x64Parser::tokenBranches4546[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4547},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4739,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4546(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4545[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4546, x64Parser::tokenBranches4546},
    {x64Token::EOT}};
void x64Parser::TokenFunc4558(x64Operand& operand, int tokenPos) { operand.addressCoding = 378; }
x64Token x64Parser::tokenBranches4557[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4558,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4934(x64Operand& operand, int tokenPos) { operand.addressCoding = 402; }
x64Token x64Parser::tokenBranches4933[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4934,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5146(x64Operand& operand, int tokenPos) { operand.addressCoding = 426; }
x64Token x64Parser::tokenBranches5145[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5146,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4557(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4933(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5145(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4556[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4557, x64Parser::tokenBranches4557},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4933, x64Parser::tokenBranches4933},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5145, x64Parser::tokenBranches5145},
    {x64Token::EOT}};
void x64Parser::TokenFunc4746(x64Operand& operand, int tokenPos) { operand.addressCoding = 378; }
x64Token x64Parser::tokenBranches4544[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4545},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4556},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4746,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3289(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3381(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3473(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4544(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3288[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4478},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3289, x64Parser::tokenBranches3289},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3381, x64Parser::tokenBranches3381},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3473, x64Parser::tokenBranches3473},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4544, x64Parser::tokenBranches4544},
    {x64Token::EOT}};
void x64Parser::TokenFunc3816(x64Operand& operand, int tokenPos) { operand.addressCoding = 312; }
x64Token x64Parser::tokenBranches3815[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3816,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3825(x64Operand& operand, int tokenPos) { operand.addressCoding = 313; }
x64Token x64Parser::tokenBranches3824[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3825,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3834(x64Operand& operand, int tokenPos) { operand.addressCoding = 314; }
x64Token x64Parser::tokenBranches3833[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3834,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3815(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3824(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3833(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3814[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3815, x64Parser::tokenBranches3815},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3824, x64Parser::tokenBranches3824},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3833, x64Parser::tokenBranches3833},
    {x64Token::EOT}};
void x64Parser::TokenFunc3807(x64Operand& operand, int tokenPos) { operand.addressCoding = 312; }
x64Token x64Parser::tokenBranches3806[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3807,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3814},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3944(x64Operand& operand, int tokenPos) { operand.addressCoding = 321; }
x64Token x64Parser::tokenBranches3943[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3944,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3953(x64Operand& operand, int tokenPos) { operand.addressCoding = 322; }
x64Token x64Parser::tokenBranches3952[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3953,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3962(x64Operand& operand, int tokenPos) { operand.addressCoding = 323; }
x64Token x64Parser::tokenBranches3961[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3962,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3943(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3952(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3961(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3942[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3943, x64Parser::tokenBranches3943},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3952, x64Parser::tokenBranches3952},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3961, x64Parser::tokenBranches3961},
    {x64Token::EOT}};
void x64Parser::TokenFunc3935(x64Operand& operand, int tokenPos) { operand.addressCoding = 321; }
x64Token x64Parser::tokenBranches3934[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3935,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3942},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4246(x64Operand& operand, int tokenPos) { operand.addressCoding = 345; }
x64Token x64Parser::tokenBranches4245[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4246,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4245(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4244[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4245, x64Parser::tokenBranches4245},
    {x64Token::EOT}};
void x64Parser::TokenFunc4237(x64Operand& operand, int tokenPos) { operand.addressCoding = 344; }
x64Token x64Parser::tokenBranches4236[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4237,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4244},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3806(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3934(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4236(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3805[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3806, x64Parser::tokenBranches3806},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3934, x64Parser::tokenBranches3934},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4236, x64Parser::tokenBranches4236},
    {x64Token::EOT}};
void x64Parser::TokenFunc3206(x64Operand& operand, int tokenPos) { operand.addressCoding = 250; }
x64Token x64Parser::tokenBranches3205[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3206,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3288},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3805},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3321(x64Operand& operand, int tokenPos) { operand.addressCoding = 251; }
x64Token x64Parser::tokenBranches3320[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3321,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3413(x64Operand& operand, int tokenPos) { operand.addressCoding = 271; }
x64Token x64Parser::tokenBranches3412[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3413,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3505(x64Operand& operand, int tokenPos) { operand.addressCoding = 285; }
x64Token x64Parser::tokenBranches3504[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3505,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4490(x64Operand& operand, int tokenPos) { operand.addressCoding = 370; }
x64Token x64Parser::tokenBranches4489[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4490,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4866(x64Operand& operand, int tokenPos) { operand.addressCoding = 394; }
x64Token x64Parser::tokenBranches4865[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4866,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5078(x64Operand& operand, int tokenPos) { operand.addressCoding = 418; }
x64Token x64Parser::tokenBranches5077[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5078,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4489(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4865(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5077(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4488[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4489, x64Parser::tokenBranches4489},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4865, x64Parser::tokenBranches4865},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5077, x64Parser::tokenBranches5077},
    {x64Token::EOT}};
void x64Parser::TokenFunc4694(x64Operand& operand, int tokenPos) { operand.addressCoding = 370; }
x64Token x64Parser::tokenBranches4487[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4488},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4694,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4641(x64Operand& operand, int tokenPos) { operand.addressCoding = 387; }
x64Token x64Parser::tokenBranches4640[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4641,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5017(x64Operand& operand, int tokenPos) { operand.addressCoding = 411; }
x64Token x64Parser::tokenBranches5016[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5017,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5229(x64Operand& operand, int tokenPos) { operand.addressCoding = 435; }
x64Token x64Parser::tokenBranches5228[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5229,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4640(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5016(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5228(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4639[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4640, x64Parser::tokenBranches4640},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5016, x64Parser::tokenBranches5016},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5228, x64Parser::tokenBranches5228},
    {x64Token::EOT}};
void x64Parser::TokenFunc4811(x64Operand& operand, int tokenPos) { operand.addressCoding = 387; }
x64Token x64Parser::tokenBranches4638[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4639},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4811,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4638(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4637[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4638, x64Parser::tokenBranches4638},
    {x64Token::EOT}};
void x64Parser::TokenFunc4650(x64Operand& operand, int tokenPos) { operand.addressCoding = 388; }
x64Token x64Parser::tokenBranches4649[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4650,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5026(x64Operand& operand, int tokenPos) { operand.addressCoding = 412; }
x64Token x64Parser::tokenBranches5025[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5026,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5238(x64Operand& operand, int tokenPos) { operand.addressCoding = 436; }
x64Token x64Parser::tokenBranches5237[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5238,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4649(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5025(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5237(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4648[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4649, x64Parser::tokenBranches4649},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5025, x64Parser::tokenBranches5025},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5237, x64Parser::tokenBranches5237},
    {x64Token::EOT}};
void x64Parser::TokenFunc4818(x64Operand& operand, int tokenPos) { operand.addressCoding = 388; }
x64Token x64Parser::tokenBranches4636[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4637},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4648},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4818,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3320(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3412(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3504(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4636(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3319[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4487},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3320, x64Parser::tokenBranches3320},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3412, x64Parser::tokenBranches3412},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3504, x64Parser::tokenBranches3504},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4636, x64Parser::tokenBranches4636},
    {x64Token::EOT}};
void x64Parser::TokenFunc4072(x64Operand& operand, int tokenPos) { operand.addressCoding = 330; }
x64Token x64Parser::tokenBranches4071[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4072,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4081(x64Operand& operand, int tokenPos) { operand.addressCoding = 331; }
x64Token x64Parser::tokenBranches4080[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4081,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4090(x64Operand& operand, int tokenPos) { operand.addressCoding = 332; }
x64Token x64Parser::tokenBranches4089[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4090,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4071(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4080(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4089(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4070[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4071, x64Parser::tokenBranches4071},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4080, x64Parser::tokenBranches4080},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4089, x64Parser::tokenBranches4089},
    {x64Token::EOT}};
void x64Parser::TokenFunc4063(x64Operand& operand, int tokenPos) { operand.addressCoding = 330; }
x64Token x64Parser::tokenBranches4062[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4063,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4070},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4200(x64Operand& operand, int tokenPos) { operand.addressCoding = 339; }
x64Token x64Parser::tokenBranches4199[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4200,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4209(x64Operand& operand, int tokenPos) { operand.addressCoding = 340; }
x64Token x64Parser::tokenBranches4208[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4209,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4218(x64Operand& operand, int tokenPos) { operand.addressCoding = 341; }
x64Token x64Parser::tokenBranches4217[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4218,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4199(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4208(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4217(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4198[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4199, x64Parser::tokenBranches4199},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4208, x64Parser::tokenBranches4208},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4217, x64Parser::tokenBranches4217},
    {x64Token::EOT}};
void x64Parser::TokenFunc4191(x64Operand& operand, int tokenPos) { operand.addressCoding = 339; }
x64Token x64Parser::tokenBranches4190[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4191,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4198},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4274(x64Operand& operand, int tokenPos) { operand.addressCoding = 349; }
x64Token x64Parser::tokenBranches4273[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4274,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4273(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4272[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4273, x64Parser::tokenBranches4273},
    {x64Token::EOT}};
void x64Parser::TokenFunc4265(x64Operand& operand, int tokenPos) { operand.addressCoding = 348; }
x64Token x64Parser::tokenBranches4264[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4265,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4272},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4062(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4190(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4264(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4061[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4062, x64Parser::tokenBranches4062},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4190, x64Parser::tokenBranches4190},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4264, x64Parser::tokenBranches4264},
    {x64Token::EOT}};
void x64Parser::TokenFunc3211(x64Operand& operand, int tokenPos) { operand.addressCoding = 251; }
x64Token x64Parser::tokenBranches3210[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3211,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3319},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4061},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3346(x64Operand& operand, int tokenPos) { operand.addressCoding = 257; }
x64Token x64Parser::tokenBranches3345[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3346,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3438(x64Operand& operand, int tokenPos) { operand.addressCoding = 274; }
x64Token x64Parser::tokenBranches3437[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3438,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3530(x64Operand& operand, int tokenPos) { operand.addressCoding = 288; }
x64Token x64Parser::tokenBranches3529[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3530,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3345(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3437(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3529(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3344[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3345, x64Parser::tokenBranches3345},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3437, x64Parser::tokenBranches3437},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3529, x64Parser::tokenBranches3529},
    {x64Token::EOT}};
void x64Parser::TokenFunc3243(x64Operand& operand, int tokenPos) { operand.addressCoding = 257; }
x64Token x64Parser::tokenBranches3242[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3243,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3344},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3328(x64Operand& operand, int tokenPos) { operand.addressCoding = 255; }
x64Token x64Parser::tokenBranches3327[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3328,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3420(x64Operand& operand, int tokenPos) { operand.addressCoding = 272; }
x64Token x64Parser::tokenBranches3419[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3420,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3512(x64Operand& operand, int tokenPos) { operand.addressCoding = 286; }
x64Token x64Parser::tokenBranches3511[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3512,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4661(x64Operand& operand, int tokenPos) { operand.addressCoding = 389; }
x64Token x64Parser::tokenBranches4660[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4661,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5037(x64Operand& operand, int tokenPos) { operand.addressCoding = 413; }
x64Token x64Parser::tokenBranches5036[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5037,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5249(x64Operand& operand, int tokenPos) { operand.addressCoding = 437; }
x64Token x64Parser::tokenBranches5248[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5249,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4660(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5036(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5248(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4659[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4660, x64Parser::tokenBranches4660},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5036, x64Parser::tokenBranches5036},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5248, x64Parser::tokenBranches5248},
    {x64Token::EOT}};
void x64Parser::TokenFunc4827(x64Operand& operand, int tokenPos) { operand.addressCoding = 389; }
x64Token x64Parser::tokenBranches4658[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4659},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4827,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4658(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4657[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4658, x64Parser::tokenBranches4658},
    {x64Token::EOT}};
void x64Parser::TokenFunc4670(x64Operand& operand, int tokenPos) { operand.addressCoding = 390; }
x64Token x64Parser::tokenBranches4669[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4670,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5046(x64Operand& operand, int tokenPos) { operand.addressCoding = 414; }
x64Token x64Parser::tokenBranches5045[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5046,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5258(x64Operand& operand, int tokenPos) { operand.addressCoding = 438; }
x64Token x64Parser::tokenBranches5257[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5258,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4669(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5045(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5257(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4668[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4669, x64Parser::tokenBranches4669},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5045, x64Parser::tokenBranches5045},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5257, x64Parser::tokenBranches5257},
    {x64Token::EOT}};
void x64Parser::TokenFunc4834(x64Operand& operand, int tokenPos) { operand.addressCoding = 390; }
x64Token x64Parser::tokenBranches4656[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4657},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4668},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4834,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3327(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3419(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3511(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4656(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3241[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3242},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3327, x64Parser::tokenBranches3327},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3419, x64Parser::tokenBranches3419},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3511, x64Parser::tokenBranches3511},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4656, x64Parser::tokenBranches4656},
    {x64Token::EOT}};
void x64Parser::TokenFunc4316(x64Operand& operand, int tokenPos) { operand.addressCoding = 350; }
x64Token x64Parser::tokenBranches4315[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4316,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4325(x64Operand& operand, int tokenPos) { operand.addressCoding = 351; }
x64Token x64Parser::tokenBranches4324[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4325,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4334(x64Operand& operand, int tokenPos) { operand.addressCoding = 352; }
x64Token x64Parser::tokenBranches4333[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4334,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4315(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4324(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4333(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4314[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4315, x64Parser::tokenBranches4315},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4324, x64Parser::tokenBranches4324},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4333, x64Parser::tokenBranches4333},
    {x64Token::EOT}};
void x64Parser::TokenFunc4307(x64Operand& operand, int tokenPos) { operand.addressCoding = 350; }
x64Token x64Parser::tokenBranches4306[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4307,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4314},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4376(x64Operand& operand, int tokenPos) { operand.addressCoding = 356; }
x64Token x64Parser::tokenBranches4375[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4376,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4385(x64Operand& operand, int tokenPos) { operand.addressCoding = 357; }
x64Token x64Parser::tokenBranches4384[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4385,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4394(x64Operand& operand, int tokenPos) { operand.addressCoding = 358; }
x64Token x64Parser::tokenBranches4393[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4394,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4375(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4384(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4393(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4374[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4375, x64Parser::tokenBranches4375},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4384, x64Parser::tokenBranches4384},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4393, x64Parser::tokenBranches4393},
    {x64Token::EOT}};
void x64Parser::TokenFunc4367(x64Operand& operand, int tokenPos) { operand.addressCoding = 356; }
x64Token x64Parser::tokenBranches4366[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4367,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4374},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4438(x64Operand& operand, int tokenPos) { operand.addressCoding = 364; }
x64Token x64Parser::tokenBranches4437[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4438,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4458(x64Operand& operand, int tokenPos) { operand.addressCoding = 366; }
x64Token x64Parser::tokenBranches4457[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4458,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4457(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4456[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4457, x64Parser::tokenBranches4457},
    {x64Token::EOT}};
void x64Parser::TokenFunc4447(x64Operand& operand, int tokenPos) { operand.addressCoding = 365; }
x64Token x64Parser::tokenBranches4446[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4447,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4456},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4437(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4436[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4446},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4437, x64Parser::tokenBranches4437},
    {x64Token::EOT}};
void x64Parser::TokenFunc4429(x64Operand& operand, int tokenPos) { operand.addressCoding = 363; }
x64Token x64Parser::tokenBranches4428[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4429,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4436},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4306(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4366(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4428(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4305[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4306, x64Parser::tokenBranches4306},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4366, x64Parser::tokenBranches4366},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4428, x64Parser::tokenBranches4428},
    {x64Token::EOT}};
void x64Parser::TokenFunc3229(x64Operand& operand, int tokenPos) { operand.addressCoding = 255; }
x64Token x64Parser::tokenBranches3228[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3229,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3241},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4305},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3256(x64Operand& operand, int tokenPos) { operand.addressCoding = 260; }
x64Token x64Parser::tokenBranches3255[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData5,
                                               &x64Parser::TokenFunc3256,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc18(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc88(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc549(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc574(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3228(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc3255(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches17[] = {
    {x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches61},
    {x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches68},
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches490},
    {x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches495},
    {x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches500},
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3195},
    {x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3200},
    {x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3205},
    {x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3210},
    {x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc18, x64Parser::tokenBranches18},
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc88, x64Parser::tokenBranches88},
    {x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc549, x64Parser::tokenBranches549},
    {x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc574, x64Parser::tokenBranches574},
    {x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3228, x64Parser::tokenBranches3228},
    {x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3255, x64Parser::tokenBranches3255},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches16[] = {{x64Token::TOKEN, 3, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches17},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc184(x64Operand& operand, int tokenPos) { operand.addressCoding = 19; }
x64Token x64Parser::tokenBranches183[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc184,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc330(x64Operand& operand, int tokenPos) { operand.addressCoding = 34; }
x64Token x64Parser::tokenBranches329[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc330,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc183(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc329(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches182[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc183, x64Parser::tokenBranches183},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc329, x64Parser::tokenBranches329},
    {x64Token::EOT}};
void x64Parser::TokenFunc24(x64Operand& operand, int tokenPos) { operand.addressCoding = 4; }
x64Token x64Parser::tokenBranches23[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc24,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches182},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc130(x64Operand& operand, int tokenPos) { operand.addressCoding = 13; }
x64Token x64Parser::tokenBranches129[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc130,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc276(x64Operand& operand, int tokenPos) { operand.addressCoding = 28; }
x64Token x64Parser::tokenBranches275[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc276,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc422(x64Operand& operand, int tokenPos) { operand.addressCoding = 43; }
x64Token x64Parser::tokenBranches421[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc422,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc23(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc129(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc275(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc421(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches22[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc23, x64Parser::tokenBranches23},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc129, x64Parser::tokenBranches129},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc275, x64Parser::tokenBranches275},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc421, x64Parser::tokenBranches421},
    {x64Token::EOT}};
void x64Parser::TokenFunc92(x64Operand& operand, int tokenPos) { operand.addressCoding = 13; }
x64Token x64Parser::tokenBranches21[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches22},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc92,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc191(x64Operand& operand, int tokenPos) { operand.addressCoding = 20; }
x64Token x64Parser::tokenBranches190[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc191,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc337(x64Operand& operand, int tokenPos) { operand.addressCoding = 35; }
x64Token x64Parser::tokenBranches336[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc337,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc190(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc336(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches189[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc190, x64Parser::tokenBranches190},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc336, x64Parser::tokenBranches336},
    {x64Token::EOT}};
void x64Parser::TokenFunc29(x64Operand& operand, int tokenPos) { operand.addressCoding = 5; }
x64Token x64Parser::tokenBranches28[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc29,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches189},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc156(x64Operand& operand, int tokenPos) { operand.addressCoding = 16; }
x64Token x64Parser::tokenBranches155[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc156,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc302(x64Operand& operand, int tokenPos) { operand.addressCoding = 31; }
x64Token x64Parser::tokenBranches301[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc302,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc448(x64Operand& operand, int tokenPos) { operand.addressCoding = 46; }
x64Token x64Parser::tokenBranches447[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc448,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc28(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc155(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc301(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc447(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches27[] = {
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc28, x64Parser::tokenBranches28},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc155, x64Parser::tokenBranches155},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc301, x64Parser::tokenBranches301},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc447, x64Parser::tokenBranches447},
    {x64Token::EOT}};
void x64Parser::TokenFunc110(x64Operand& operand, int tokenPos) { operand.addressCoding = 16; }
x64Token x64Parser::tokenBranches26[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches27},
                                         {
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc110,
                                         },
                                         {x64Token::EOT}};
void x64Parser::TokenFunc250(x64Operand& operand, int tokenPos) { operand.addressCoding = 25; }
x64Token x64Parser::tokenBranches249[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc250,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc396(x64Operand& operand, int tokenPos) { operand.addressCoding = 40; }
x64Token x64Parser::tokenBranches395[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData2,
                                              &x64Parser::TokenFunc396,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc249(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc395(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches248[] = {
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc249, x64Parser::tokenBranches249},
    {x64Token::NUMBER, 4, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc395, x64Parser::tokenBranches395},
    {x64Token::EOT}};
void x64Parser::TokenFunc74(x64Operand& operand, int tokenPos) { operand.addressCoding = 10; }
x64Token x64Parser::tokenBranches73[] = {{
                                             x64Token::TOKEN,
                                             2,
                                             1,
                                             0,
                                             x64Parser::RegClassData2,
                                             &x64Parser::TokenFunc74,
                                         },
                                         {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches248},
                                         {x64Token::EOT}};
void x64Parser::TokenFunc580(x64Operand& operand, int tokenPos) { operand.addressCoding = 49; }
x64Token x64Parser::tokenBranches579[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc580,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc690(x64Operand& operand, int tokenPos) { operand.addressCoding = 68; }
x64Token x64Parser::tokenBranches689[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc690,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc814(x64Operand& operand, int tokenPos) { operand.addressCoding = 82; }
x64Token x64Parser::tokenBranches813[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc814,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2083(x64Operand& operand, int tokenPos) { operand.addressCoding = 172; }
x64Token x64Parser::tokenBranches2082[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2083,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2615(x64Operand& operand, int tokenPos) { operand.addressCoding = 196; }
x64Token x64Parser::tokenBranches2614[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2615,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2913(x64Operand& operand, int tokenPos) { operand.addressCoding = 222; }
x64Token x64Parser::tokenBranches2912[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2913,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2082(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2614(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2912(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2081[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2082, x64Parser::tokenBranches2082},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2614, x64Parser::tokenBranches2614},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2912, x64Parser::tokenBranches2912},
    {x64Token::EOT}};
void x64Parser::TokenFunc2373(x64Operand& operand, int tokenPos) { operand.addressCoding = 172; }
x64Token x64Parser::tokenBranches2080[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2081},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2373,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2080(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2079[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2080, x64Parser::tokenBranches2080},
    {x64Token::EOT}};
void x64Parser::TokenFunc2090(x64Operand& operand, int tokenPos) { operand.addressCoding = 173; }
x64Token x64Parser::tokenBranches2089[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2090,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2622(x64Operand& operand, int tokenPos) { operand.addressCoding = 197; }
x64Token x64Parser::tokenBranches2621[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2622,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2920(x64Operand& operand, int tokenPos) { operand.addressCoding = 223; }
x64Token x64Parser::tokenBranches2919[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2920,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2089(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2621(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2919(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2088[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2089, x64Parser::tokenBranches2089},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2621, x64Parser::tokenBranches2621},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2919, x64Parser::tokenBranches2919},
    {x64Token::EOT}};
void x64Parser::TokenFunc2378(x64Operand& operand, int tokenPos) { operand.addressCoding = 173; }
x64Token x64Parser::tokenBranches2078[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2079},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2088},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2378,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc579(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc689(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc813(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2078(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches578[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc579, x64Parser::tokenBranches579},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc689, x64Parser::tokenBranches689},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc813, x64Parser::tokenBranches813},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2078, x64Parser::tokenBranches2078},
    {x64Token::EOT}};
void x64Parser::TokenFunc472(x64Operand& operand, int tokenPos) { operand.addressCoding = 49; }
x64Token x64Parser::tokenBranches471[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc472,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches578},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc585(x64Operand& operand, int tokenPos) { operand.addressCoding = 50; }
x64Token x64Parser::tokenBranches584[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc585,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc695(x64Operand& operand, int tokenPos) { operand.addressCoding = 69; }
x64Token x64Parser::tokenBranches694[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc695,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc819(x64Operand& operand, int tokenPos) { operand.addressCoding = 83; }
x64Token x64Parser::tokenBranches818[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc819,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2058(x64Operand& operand, int tokenPos) { operand.addressCoding = 169; }
x64Token x64Parser::tokenBranches2057[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2058,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2590(x64Operand& operand, int tokenPos) { operand.addressCoding = 193; }
x64Token x64Parser::tokenBranches2589[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2590,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2888(x64Operand& operand, int tokenPos) { operand.addressCoding = 219; }
x64Token x64Parser::tokenBranches2887[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2888,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2057(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2589(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2887(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2056[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2057, x64Parser::tokenBranches2057},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2589, x64Parser::tokenBranches2589},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2887, x64Parser::tokenBranches2887},
    {x64Token::EOT}};
void x64Parser::TokenFunc2354(x64Operand& operand, int tokenPos) { operand.addressCoding = 169; }
x64Token x64Parser::tokenBranches2055[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2056},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2354,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2067(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2066[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2067,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2599(x64Operand& operand, int tokenPos) { operand.addressCoding = 194; }
x64Token x64Parser::tokenBranches2598[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2599,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2897(x64Operand& operand, int tokenPos) { operand.addressCoding = 220; }
x64Token x64Parser::tokenBranches2896[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2897,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2066(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2598(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2896(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2065[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2066, x64Parser::tokenBranches2066},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2598, x64Parser::tokenBranches2598},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2896, x64Parser::tokenBranches2896},
    {x64Token::EOT}};
void x64Parser::TokenFunc2361(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2064[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2065},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2361,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2064(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2063[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2064, x64Parser::tokenBranches2064},
    {x64Token::EOT}};
void x64Parser::TokenFunc2074(x64Operand& operand, int tokenPos) { operand.addressCoding = 171; }
x64Token x64Parser::tokenBranches2073[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2074,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2606(x64Operand& operand, int tokenPos) { operand.addressCoding = 195; }
x64Token x64Parser::tokenBranches2605[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2606,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2904(x64Operand& operand, int tokenPos) { operand.addressCoding = 221; }
x64Token x64Parser::tokenBranches2903[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2904,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2073(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2605(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2903(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2072[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2073, x64Parser::tokenBranches2073},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2605, x64Parser::tokenBranches2605},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2903, x64Parser::tokenBranches2903},
    {x64Token::EOT}};
void x64Parser::TokenFunc2366(x64Operand& operand, int tokenPos) { operand.addressCoding = 171; }
x64Token x64Parser::tokenBranches2062[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2063},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2072},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2366,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc584(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc694(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc818(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2062(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches583[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2055},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc584, x64Parser::tokenBranches584},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc694, x64Parser::tokenBranches694},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc818, x64Parser::tokenBranches818},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2062, x64Parser::tokenBranches2062},
    {x64Token::EOT}};
void x64Parser::TokenFunc945(x64Operand& operand, int tokenPos) { operand.addressCoding = 96; }
x64Token x64Parser::tokenBranches944[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc945,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc952(x64Operand& operand, int tokenPos) { operand.addressCoding = 97; }
x64Token x64Parser::tokenBranches951[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc952,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc959(x64Operand& operand, int tokenPos) { operand.addressCoding = 98; }
x64Token x64Parser::tokenBranches958[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc959,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc944(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc951(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc958(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches943[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc944, x64Parser::tokenBranches944},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc951, x64Parser::tokenBranches951},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc958, x64Parser::tokenBranches958},
    {x64Token::EOT}};
void x64Parser::TokenFunc938(x64Operand& operand, int tokenPos) { operand.addressCoding = 96; }
x64Token x64Parser::tokenBranches937[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc938,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches943},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc1073(x64Operand& operand, int tokenPos) { operand.addressCoding = 105; }
x64Token x64Parser::tokenBranches1072[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1073,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1080(x64Operand& operand, int tokenPos) { operand.addressCoding = 106; }
x64Token x64Parser::tokenBranches1079[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1080,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1087(x64Operand& operand, int tokenPos) { operand.addressCoding = 107; }
x64Token x64Parser::tokenBranches1086[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1087,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1072(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1079(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1086(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1071[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1072, x64Parser::tokenBranches1072},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1079, x64Parser::tokenBranches1079},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1086, x64Parser::tokenBranches1086},
    {x64Token::EOT}};
void x64Parser::TokenFunc1066(x64Operand& operand, int tokenPos) { operand.addressCoding = 105; }
x64Token x64Parser::tokenBranches1065[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1066,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1071},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1457(x64Operand& operand, int tokenPos) { operand.addressCoding = 132; }
x64Token x64Parser::tokenBranches1456[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1457,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1464(x64Operand& operand, int tokenPos) { operand.addressCoding = 133; }
x64Token x64Parser::tokenBranches1463[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1464,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1456(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1463(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1455[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1456, x64Parser::tokenBranches1456},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1463, x64Parser::tokenBranches1463},
    {x64Token::EOT}};
void x64Parser::TokenFunc1450(x64Operand& operand, int tokenPos) { operand.addressCoding = 132; }
x64Token x64Parser::tokenBranches1449[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1450,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1455},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc937(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1065(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1449(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches936[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc937, x64Parser::tokenBranches937},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1065, x64Parser::tokenBranches1065},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1449, x64Parser::tokenBranches1449},
    {x64Token::EOT}};
void x64Parser::TokenFunc475(x64Operand& operand, int tokenPos) { operand.addressCoding = 50; }
x64Token x64Parser::tokenBranches474[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc475,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches583},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches936},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc618(x64Operand& operand, int tokenPos) { operand.addressCoding = 51; }
x64Token x64Parser::tokenBranches617[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc618,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc742(x64Operand& operand, int tokenPos) { operand.addressCoding = 74; }
x64Token x64Parser::tokenBranches741[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc742,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc866(x64Operand& operand, int tokenPos) { operand.addressCoding = 88; }
x64Token x64Parser::tokenBranches865[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc866,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2246(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2245[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2246,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2778(x64Operand& operand, int tokenPos) { operand.addressCoding = 208; }
x64Token x64Parser::tokenBranches2777[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2778,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3076(x64Operand& operand, int tokenPos) { operand.addressCoding = 234; }
x64Token x64Parser::tokenBranches3075[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3076,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2245(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2777(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3075(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2244[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2245, x64Parser::tokenBranches2245},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2777, x64Parser::tokenBranches2777},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3075, x64Parser::tokenBranches3075},
    {x64Token::EOT}};
void x64Parser::TokenFunc2502(x64Operand& operand, int tokenPos) { operand.addressCoding = 170; }
x64Token x64Parser::tokenBranches2243[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2244},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2502,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2243(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2242[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2243, x64Parser::tokenBranches2243},
    {x64Token::EOT}};
void x64Parser::TokenFunc2253(x64Operand& operand, int tokenPos) { operand.addressCoding = 184; }
x64Token x64Parser::tokenBranches2252[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2253,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2785(x64Operand& operand, int tokenPos) { operand.addressCoding = 209; }
x64Token x64Parser::tokenBranches2784[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2785,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3083(x64Operand& operand, int tokenPos) { operand.addressCoding = 235; }
x64Token x64Parser::tokenBranches3082[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3083,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2252(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2784(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3082(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2251[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2252, x64Parser::tokenBranches2252},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2784, x64Parser::tokenBranches2784},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3082, x64Parser::tokenBranches3082},
    {x64Token::EOT}};
void x64Parser::TokenFunc2507(x64Operand& operand, int tokenPos) { operand.addressCoding = 184; }
x64Token x64Parser::tokenBranches2241[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2242},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2251},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2507,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc617(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc741(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc865(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2241(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches616[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc617, x64Parser::tokenBranches617},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc741, x64Parser::tokenBranches741},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc865, x64Parser::tokenBranches865},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2241, x64Parser::tokenBranches2241},
    {x64Token::EOT}};
void x64Parser::TokenFunc1201(x64Operand& operand, int tokenPos) { operand.addressCoding = 114; }
x64Token x64Parser::tokenBranches1200[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1201,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1208(x64Operand& operand, int tokenPos) { operand.addressCoding = 115; }
x64Token x64Parser::tokenBranches1207[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1208,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1215(x64Operand& operand, int tokenPos) { operand.addressCoding = 116; }
x64Token x64Parser::tokenBranches1214[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1215,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1200(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1207(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1214(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1199[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1200, x64Parser::tokenBranches1200},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1207, x64Parser::tokenBranches1207},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1214, x64Parser::tokenBranches1214},
    {x64Token::EOT}};
void x64Parser::TokenFunc1194(x64Operand& operand, int tokenPos) { operand.addressCoding = 114; }
x64Token x64Parser::tokenBranches1193[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1194,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1199},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1329(x64Operand& operand, int tokenPos) { operand.addressCoding = 123; }
x64Token x64Parser::tokenBranches1328[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1329,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1336(x64Operand& operand, int tokenPos) { operand.addressCoding = 124; }
x64Token x64Parser::tokenBranches1335[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1336,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1343(x64Operand& operand, int tokenPos) { operand.addressCoding = 125; }
x64Token x64Parser::tokenBranches1342[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1343,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1328(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1335(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1342(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1327[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1328, x64Parser::tokenBranches1328},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1335, x64Parser::tokenBranches1335},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1342, x64Parser::tokenBranches1342},
    {x64Token::EOT}};
void x64Parser::TokenFunc1322(x64Operand& operand, int tokenPos) { operand.addressCoding = 123; }
x64Token x64Parser::tokenBranches1321[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1322,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1327},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1551(x64Operand& operand, int tokenPos) { operand.addressCoding = 138; }
x64Token x64Parser::tokenBranches1550[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1551,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1558(x64Operand& operand, int tokenPos) { operand.addressCoding = 133; }
x64Token x64Parser::tokenBranches1557[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1558,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1550(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1557(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1549[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1550, x64Parser::tokenBranches1550},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1557, x64Parser::tokenBranches1557},
    {x64Token::EOT}};
void x64Parser::TokenFunc1544(x64Operand& operand, int tokenPos) { operand.addressCoding = 138; }
x64Token x64Parser::tokenBranches1543[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1544,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1549},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1193(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1321(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1543(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1192[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1193, x64Parser::tokenBranches1193},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1321, x64Parser::tokenBranches1321},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1543, x64Parser::tokenBranches1543},
    {x64Token::EOT}};
void x64Parser::TokenFunc478(x64Operand& operand, int tokenPos) { operand.addressCoding = 51; }
x64Token x64Parser::tokenBranches477[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc478,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches616},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1192},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc630(x64Operand& operand, int tokenPos) { operand.addressCoding = 53; }
x64Token x64Parser::tokenBranches629[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc630,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc754(x64Operand& operand, int tokenPos) { operand.addressCoding = 76; }
x64Token x64Parser::tokenBranches753[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc754,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc878(x64Operand& operand, int tokenPos) { operand.addressCoding = 90; }
x64Token x64Parser::tokenBranches877[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc878,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc629(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc753(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc877(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches628[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc629, x64Parser::tokenBranches629},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc753, x64Parser::tokenBranches753},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc877, x64Parser::tokenBranches877},
    {x64Token::EOT}};
void x64Parser::TokenFunc486(x64Operand& operand, int tokenPos) { operand.addressCoding = 53; }
x64Token x64Parser::tokenBranches485[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc486,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches628},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc623(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches622[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc623,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc747(x64Operand& operand, int tokenPos) { operand.addressCoding = 75; }
x64Token x64Parser::tokenBranches746[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc747,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc871(x64Operand& operand, int tokenPos) { operand.addressCoding = 89; }
x64Token x64Parser::tokenBranches870[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc871,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc2262(x64Operand& operand, int tokenPos) { operand.addressCoding = 185; }
x64Token x64Parser::tokenBranches2261[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2262,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2794(x64Operand& operand, int tokenPos) { operand.addressCoding = 210; }
x64Token x64Parser::tokenBranches2793[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2794,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3092(x64Operand& operand, int tokenPos) { operand.addressCoding = 236; }
x64Token x64Parser::tokenBranches3091[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3092,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2261(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2793(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3091(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2260[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2261, x64Parser::tokenBranches2261},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2793, x64Parser::tokenBranches2793},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3091, x64Parser::tokenBranches3091},
    {x64Token::EOT}};
void x64Parser::TokenFunc2514(x64Operand& operand, int tokenPos) { operand.addressCoding = 185; }
x64Token x64Parser::tokenBranches2259[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2260},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2514,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2259(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2258[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2259, x64Parser::tokenBranches2259},
    {x64Token::EOT}};
void x64Parser::TokenFunc2269(x64Operand& operand, int tokenPos) { operand.addressCoding = 186; }
x64Token x64Parser::tokenBranches2268[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2269,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2801(x64Operand& operand, int tokenPos) { operand.addressCoding = 211; }
x64Token x64Parser::tokenBranches2800[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2801,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3099(x64Operand& operand, int tokenPos) { operand.addressCoding = 237; }
x64Token x64Parser::tokenBranches3098[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3099,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc2268(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2800(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3098(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2267[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2268, x64Parser::tokenBranches2268},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2800, x64Parser::tokenBranches2800},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3098, x64Parser::tokenBranches3098},
    {x64Token::EOT}};
void x64Parser::TokenFunc2519(x64Operand& operand, int tokenPos) { operand.addressCoding = 186; }
x64Token x64Parser::tokenBranches2257[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2258},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches2267},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc2519,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc622(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc746(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc870(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc2257(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches484[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches485},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc622, x64Parser::tokenBranches622},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc746, x64Parser::tokenBranches746},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc870, x64Parser::tokenBranches870},
    {x64Token::REGISTERCLASS, 6, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc2257, x64Parser::tokenBranches2257},
    {x64Token::EOT}};
void x64Parser::TokenFunc1595(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches1594[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1595,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1602(x64Operand& operand, int tokenPos) { operand.addressCoding = 75; }
x64Token x64Parser::tokenBranches1601[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1602,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1609(x64Operand& operand, int tokenPos) { operand.addressCoding = 89; }
x64Token x64Parser::tokenBranches1608[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1609,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1594(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1601(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1608(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1593[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1594, x64Parser::tokenBranches1594},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1601, x64Parser::tokenBranches1601},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1608, x64Parser::tokenBranches1608},
    {x64Token::EOT}};
void x64Parser::TokenFunc1588(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches1587[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1588,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1593},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1723(x64Operand& operand, int tokenPos) { operand.addressCoding = 147; }
x64Token x64Parser::tokenBranches1722[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1723,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1730(x64Operand& operand, int tokenPos) { operand.addressCoding = 148; }
x64Token x64Parser::tokenBranches1729[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1730,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1737(x64Operand& operand, int tokenPos) { operand.addressCoding = 149; }
x64Token x64Parser::tokenBranches1736[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1737,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1722(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1729(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1736(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1721[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1722, x64Parser::tokenBranches1722},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1729, x64Parser::tokenBranches1729},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1736, x64Parser::tokenBranches1736},
    {x64Token::EOT}};
void x64Parser::TokenFunc1716(x64Operand& operand, int tokenPos) { operand.addressCoding = 147; }
x64Token x64Parser::tokenBranches1715[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1716,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1721},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1851(x64Operand& operand, int tokenPos) { operand.addressCoding = 156; }
x64Token x64Parser::tokenBranches1850[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1851,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1858(x64Operand& operand, int tokenPos) { operand.addressCoding = 157; }
x64Token x64Parser::tokenBranches1857[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1858,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1874(x64Operand& operand, int tokenPos) { operand.addressCoding = 158; }
x64Token x64Parser::tokenBranches1873[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1874,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1883(x64Operand& operand, int tokenPos) { operand.addressCoding = 159; }
x64Token x64Parser::tokenBranches1882[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1883,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1873(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1882(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1872[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1873, x64Parser::tokenBranches1873},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1882, x64Parser::tokenBranches1882},
    {x64Token::EOT}};
void x64Parser::TokenFunc1865(x64Operand& operand, int tokenPos) { operand.addressCoding = 158; }
x64Token x64Parser::tokenBranches1864[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1865,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1872},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1850(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1857(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1849[] = {
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1864},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1850, x64Parser::tokenBranches1850},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1857, x64Parser::tokenBranches1857},
    {x64Token::EOT}};
void x64Parser::TokenFunc1844(x64Operand& operand, int tokenPos) { operand.addressCoding = 156; }
x64Token x64Parser::tokenBranches1843[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc1844,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1849},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc1587(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1715(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc1843(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches1586[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1587, x64Parser::tokenBranches1587},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1715, x64Parser::tokenBranches1715},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc1843, x64Parser::tokenBranches1843},
    {x64Token::EOT}};
void x64Parser::TokenFunc481(x64Operand& operand, int tokenPos) { operand.addressCoding = 52; }
x64Token x64Parser::tokenBranches480[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData3,
                                              &x64Parser::TokenFunc481,
                                          },
                                          {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches484},
                                          {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches1586},
                                          {x64Token::EOT}};
void x64Parser::TokenFunc560(x64Operand& operand, int tokenPos) { operand.addressCoding = 63; }
x64Token x64Parser::tokenBranches559[] = {{
                                              x64Token::TOKEN,
                                              2,
                                              1,
                                              0,
                                              x64Parser::RegClassData4,
                                              &x64Parser::TokenFunc560,
                                          },
                                          {x64Token::EOT}};
void x64Parser::TokenFunc3261(x64Operand& operand, int tokenPos) { operand.addressCoding = 244; }
x64Token x64Parser::tokenBranches3260[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3261,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3351(x64Operand& operand, int tokenPos) { operand.addressCoding = 261; }
x64Token x64Parser::tokenBranches3350[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3351,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3443(x64Operand& operand, int tokenPos) { operand.addressCoding = 275; }
x64Token x64Parser::tokenBranches3442[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3443,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4515(x64Operand& operand, int tokenPos) { operand.addressCoding = 373; }
x64Token x64Parser::tokenBranches4514[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4515,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4891(x64Operand& operand, int tokenPos) { operand.addressCoding = 397; }
x64Token x64Parser::tokenBranches4890[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4891,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5103(x64Operand& operand, int tokenPos) { operand.addressCoding = 421; }
x64Token x64Parser::tokenBranches5102[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5103,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4514(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4890(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5102(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4513[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4514, x64Parser::tokenBranches4514},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4890, x64Parser::tokenBranches4890},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5102, x64Parser::tokenBranches5102},
    {x64Token::EOT}};
void x64Parser::TokenFunc4713(x64Operand& operand, int tokenPos) { operand.addressCoding = 373; }
x64Token x64Parser::tokenBranches4512[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4513},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4713,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4512(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4511[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4512, x64Parser::tokenBranches4512},
    {x64Token::EOT}};
void x64Parser::TokenFunc4522(x64Operand& operand, int tokenPos) { operand.addressCoding = 374; }
x64Token x64Parser::tokenBranches4521[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4522,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4898(x64Operand& operand, int tokenPos) { operand.addressCoding = 398; }
x64Token x64Parser::tokenBranches4897[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4898,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5110(x64Operand& operand, int tokenPos) { operand.addressCoding = 422; }
x64Token x64Parser::tokenBranches5109[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5110,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4521(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4897(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5109(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4520[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4521, x64Parser::tokenBranches4521},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4897, x64Parser::tokenBranches4897},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5109, x64Parser::tokenBranches5109},
    {x64Token::EOT}};
void x64Parser::TokenFunc4718(x64Operand& operand, int tokenPos) { operand.addressCoding = 374; }
x64Token x64Parser::tokenBranches4510[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4511},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4520},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4718,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3260(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3350(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3442(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4510(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3259[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3260, x64Parser::tokenBranches3260},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3350, x64Parser::tokenBranches3350},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3442, x64Parser::tokenBranches3442},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4510, x64Parser::tokenBranches4510},
    {x64Token::EOT}};
void x64Parser::TokenFunc3182(x64Operand& operand, int tokenPos) { operand.addressCoding = 244; }
x64Token x64Parser::tokenBranches3181[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3182,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3259},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3307(x64Operand& operand, int tokenPos) { operand.addressCoding = 253; }
x64Token x64Parser::tokenBranches3306[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3307,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3399(x64Operand& operand, int tokenPos) { operand.addressCoding = 269; }
x64Token x64Parser::tokenBranches3398[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3399,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3491(x64Operand& operand, int tokenPos) { operand.addressCoding = 283; }
x64Token x64Parser::tokenBranches3490[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3491,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3306(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3398(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3490(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3305[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3306, x64Parser::tokenBranches3306},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3398, x64Parser::tokenBranches3398},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3490, x64Parser::tokenBranches3490},
    {x64Token::EOT}};
void x64Parser::TokenFunc3219(x64Operand& operand, int tokenPos) { operand.addressCoding = 253; }
x64Token x64Parser::tokenBranches3218[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3219,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3305},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3356(x64Operand& operand, int tokenPos) { operand.addressCoding = 262; }
x64Token x64Parser::tokenBranches3355[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3356,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3448(x64Operand& operand, int tokenPos) { operand.addressCoding = 276; }
x64Token x64Parser::tokenBranches3447[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3448,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4531(x64Operand& operand, int tokenPos) { operand.addressCoding = 375; }
x64Token x64Parser::tokenBranches4530[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4531,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4907(x64Operand& operand, int tokenPos) { operand.addressCoding = 399; }
x64Token x64Parser::tokenBranches4906[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4907,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5119(x64Operand& operand, int tokenPos) { operand.addressCoding = 423; }
x64Token x64Parser::tokenBranches5118[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5119,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4530(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4906(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5118(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4529[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4530, x64Parser::tokenBranches4530},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4906, x64Parser::tokenBranches4906},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5118, x64Parser::tokenBranches5118},
    {x64Token::EOT}};
void x64Parser::TokenFunc4725(x64Operand& operand, int tokenPos) { operand.addressCoding = 375; }
x64Token x64Parser::tokenBranches4528[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4529},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4725,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4528(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4527[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4528, x64Parser::tokenBranches4528},
    {x64Token::EOT}};
void x64Parser::TokenFunc4538(x64Operand& operand, int tokenPos) { operand.addressCoding = 376; }
x64Token x64Parser::tokenBranches4537[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4538,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4914(x64Operand& operand, int tokenPos) { operand.addressCoding = 400; }
x64Token x64Parser::tokenBranches4913[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4914,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5126(x64Operand& operand, int tokenPos) { operand.addressCoding = 424; }
x64Token x64Parser::tokenBranches5125[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5126,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4537(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4913(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5125(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4536[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4537, x64Parser::tokenBranches4537},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4913, x64Parser::tokenBranches4913},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5125, x64Parser::tokenBranches5125},
    {x64Token::EOT}};
void x64Parser::TokenFunc4730(x64Operand& operand, int tokenPos) { operand.addressCoding = 376; }
x64Token x64Parser::tokenBranches4526[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4527},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4536},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4730,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3355(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3447(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4526(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3217[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3218},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3355, x64Parser::tokenBranches3355},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3447, x64Parser::tokenBranches3447},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4526, x64Parser::tokenBranches4526},
    {x64Token::EOT}};
void x64Parser::TokenFunc3265(x64Operand& operand, int tokenPos) { operand.addressCoding = 245; }
x64Token x64Parser::tokenBranches3264[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3265,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3542(x64Operand& operand, int tokenPos) { operand.addressCoding = 245; }
x64Token x64Parser::tokenBranches3541[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3542,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3549(x64Operand& operand, int tokenPos) { operand.addressCoding = 262; }
x64Token x64Parser::tokenBranches3548[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3549,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3556(x64Operand& operand, int tokenPos) { operand.addressCoding = 276; }
x64Token x64Parser::tokenBranches3555[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3556,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3541(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3548(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3555(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3540[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3541, x64Parser::tokenBranches3541},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3548, x64Parser::tokenBranches3548},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3555, x64Parser::tokenBranches3555},
    {x64Token::EOT}};
void x64Parser::TokenFunc3535(x64Operand& operand, int tokenPos) { operand.addressCoding = 245; }
x64Token x64Parser::tokenBranches3534[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3535,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3540},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3602(x64Operand& operand, int tokenPos) { operand.addressCoding = 292; }
x64Token x64Parser::tokenBranches3601[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3602,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3609(x64Operand& operand, int tokenPos) { operand.addressCoding = 293; }
x64Token x64Parser::tokenBranches3608[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3609,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3616(x64Operand& operand, int tokenPos) { operand.addressCoding = 294; }
x64Token x64Parser::tokenBranches3615[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3616,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3601(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3608(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3615(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3600[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3601, x64Parser::tokenBranches3601},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3608, x64Parser::tokenBranches3608},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3615, x64Parser::tokenBranches3615},
    {x64Token::EOT}};
void x64Parser::TokenFunc3595(x64Operand& operand, int tokenPos) { operand.addressCoding = 292; }
x64Token x64Parser::tokenBranches3594[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3595,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3600},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3662(x64Operand& operand, int tokenPos) { operand.addressCoding = 299; }
x64Token x64Parser::tokenBranches3661[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3662,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3661(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3660[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3661, x64Parser::tokenBranches3661},
    {x64Token::EOT}};
void x64Parser::TokenFunc3655(x64Operand& operand, int tokenPos) { operand.addressCoding = 298; }
x64Token x64Parser::tokenBranches3654[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3655,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3660},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3690(x64Operand& operand, int tokenPos) { operand.addressCoding = 303; }
x64Token x64Parser::tokenBranches3689[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3690,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3689(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3688[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3689, x64Parser::tokenBranches3689},
    {x64Token::EOT}};
void x64Parser::TokenFunc3683(x64Operand& operand, int tokenPos) { operand.addressCoding = 302; }
x64Token x64Parser::tokenBranches3682[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3683,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3688},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3534(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3594(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3654(x64Operand& operand, int tokenPos)
{
    operand.values[12] = new Coding[2];
    CleanupValues.push_back(operand.values[12]);
    operand.values[12]->type = Coding::number;
    operand.values[12]->val = operands.size();
    operand.values[12]->bits = 0;
    operand.values[12]->field = 0;
    operand.values[12]->unary = 0;
    operand.values[12]->binary = 0;
    operand.values[12][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3682(x64Operand& operand, int tokenPos)
{
    operand.values[13] = new Coding[2];
    CleanupValues.push_back(operand.values[13]);
    operand.values[13]->type = Coding::number;
    operand.values[13]->val = operands.size();
    operand.values[13]->bits = 0;
    operand.values[13]->field = 0;
    operand.values[13]->unary = 0;
    operand.values[13]->binary = 0;
    operand.values[13][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3533[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3534, x64Parser::tokenBranches3534},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3594, x64Parser::tokenBranches3594},
    {x64Token::NUMBER, 20, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3654, x64Parser::tokenBranches3654},
    {x64Token::NUMBER, 21, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3682, x64Parser::tokenBranches3682},
    {x64Token::EOT}};
void x64Parser::TokenFunc3185(x64Operand& operand, int tokenPos) { operand.addressCoding = 245; }
void x64Parser::TokenFunc3264(x64Operand& operand, int tokenPos)
{
    operand.values[11] = new Coding[2];
    CleanupValues.push_back(operand.values[11]);
    operand.values[11]->type = Coding::number;
    operand.values[11]->val = operands.size();
    operand.values[11]->bits = 0;
    operand.values[11]->field = 0;
    operand.values[11]->unary = 0;
    operand.values[11]->binary = 0;
    operand.values[11][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3184[] = {
    {
        x64Token::TOKEN,
        2,
        1,
        0,
        x64Parser::RegClassData3,
        &x64Parser::TokenFunc3185,
    },
    {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3217},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3264, x64Parser::tokenBranches3264},
    {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3533},
    {x64Token::EOT}};
void x64Parser::TokenFunc3270(x64Operand& operand, int tokenPos) { operand.addressCoding = 246; }
x64Token x64Parser::tokenBranches3269[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3270,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3361(x64Operand& operand, int tokenPos) { operand.addressCoding = 263; }
x64Token x64Parser::tokenBranches3360[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3361,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3453(x64Operand& operand, int tokenPos) { operand.addressCoding = 277; }
x64Token x64Parser::tokenBranches3452[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3453,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4465(x64Operand& operand, int tokenPos) { operand.addressCoding = 367; }
x64Token x64Parser::tokenBranches4464[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4465,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4841(x64Operand& operand, int tokenPos) { operand.addressCoding = 391; }
x64Token x64Parser::tokenBranches4840[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4841,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5053(x64Operand& operand, int tokenPos) { operand.addressCoding = 415; }
x64Token x64Parser::tokenBranches5052[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5053,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4464(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4840(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5052(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4463[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4464, x64Parser::tokenBranches4464},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4840, x64Parser::tokenBranches4840},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5052, x64Parser::tokenBranches5052},
    {x64Token::EOT}};
void x64Parser::TokenFunc4675(x64Operand& operand, int tokenPos) { operand.addressCoding = 367; }
x64Token x64Parser::tokenBranches4462[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4463},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4675,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4499(x64Operand& operand, int tokenPos) { operand.addressCoding = 371; }
x64Token x64Parser::tokenBranches4498[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4499,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4875(x64Operand& operand, int tokenPos) { operand.addressCoding = 395; }
x64Token x64Parser::tokenBranches4874[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4875,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5087(x64Operand& operand, int tokenPos) { operand.addressCoding = 419; }
x64Token x64Parser::tokenBranches5086[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5087,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4498(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4874(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5086(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4497[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4498, x64Parser::tokenBranches4498},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4874, x64Parser::tokenBranches4874},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5086, x64Parser::tokenBranches5086},
    {x64Token::EOT}};
void x64Parser::TokenFunc4701(x64Operand& operand, int tokenPos) { operand.addressCoding = 371; }
x64Token x64Parser::tokenBranches4496[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4497},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4701,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4496(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4495[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4496, x64Parser::tokenBranches4496},
    {x64Token::EOT}};
void x64Parser::TokenFunc4506(x64Operand& operand, int tokenPos) { operand.addressCoding = 372; }
x64Token x64Parser::tokenBranches4505[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4506,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4882(x64Operand& operand, int tokenPos) { operand.addressCoding = 396; }
x64Token x64Parser::tokenBranches4881[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4882,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5094(x64Operand& operand, int tokenPos) { operand.addressCoding = 420; }
x64Token x64Parser::tokenBranches5093[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5094,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4505(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4881(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5093(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4504[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4505, x64Parser::tokenBranches4505},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4881, x64Parser::tokenBranches4881},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5093, x64Parser::tokenBranches5093},
    {x64Token::EOT}};
void x64Parser::TokenFunc4706(x64Operand& operand, int tokenPos) { operand.addressCoding = 372; }
x64Token x64Parser::tokenBranches4494[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4495},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4504},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4706,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3269(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3360(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3452(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4494(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3268[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4462},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3269, x64Parser::tokenBranches3269},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3360, x64Parser::tokenBranches3360},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3452, x64Parser::tokenBranches3452},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4494, x64Parser::tokenBranches4494},
    {x64Token::EOT}};
void x64Parser::TokenFunc3718(x64Operand& operand, int tokenPos) { operand.addressCoding = 306; }
x64Token x64Parser::tokenBranches3717[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3718,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3725(x64Operand& operand, int tokenPos) { operand.addressCoding = 307; }
x64Token x64Parser::tokenBranches3724[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3725,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3732(x64Operand& operand, int tokenPos) { operand.addressCoding = 308; }
x64Token x64Parser::tokenBranches3731[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3732,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3717(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3724(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3731(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3716[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3717, x64Parser::tokenBranches3717},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3724, x64Parser::tokenBranches3724},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3731, x64Parser::tokenBranches3731},
    {x64Token::EOT}};
void x64Parser::TokenFunc3711(x64Operand& operand, int tokenPos) { operand.addressCoding = 306; }
x64Token x64Parser::tokenBranches3710[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3711,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3716},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3846(x64Operand& operand, int tokenPos) { operand.addressCoding = 315; }
x64Token x64Parser::tokenBranches3845[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3846,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3853(x64Operand& operand, int tokenPos) { operand.addressCoding = 316; }
x64Token x64Parser::tokenBranches3852[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3853,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3860(x64Operand& operand, int tokenPos) { operand.addressCoding = 317; }
x64Token x64Parser::tokenBranches3859[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3860,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3845(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3852(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3859(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3844[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3845, x64Parser::tokenBranches3845},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3852, x64Parser::tokenBranches3852},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3859, x64Parser::tokenBranches3859},
    {x64Token::EOT}};
void x64Parser::TokenFunc3839(x64Operand& operand, int tokenPos) { operand.addressCoding = 315; }
x64Token x64Parser::tokenBranches3838[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3839,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3844},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4230(x64Operand& operand, int tokenPos) { operand.addressCoding = 343; }
x64Token x64Parser::tokenBranches4229[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4230,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4229(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4228[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4229, x64Parser::tokenBranches4229},
    {x64Token::EOT}};
void x64Parser::TokenFunc4223(x64Operand& operand, int tokenPos) { operand.addressCoding = 342; }
x64Token x64Parser::tokenBranches4222[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4223,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4228},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3710(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3838(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4222(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3709[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3710, x64Parser::tokenBranches3710},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3838, x64Parser::tokenBranches3838},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4222, x64Parser::tokenBranches4222},
    {x64Token::EOT}};
void x64Parser::TokenFunc3188(x64Operand& operand, int tokenPos) { operand.addressCoding = 246; }
x64Token x64Parser::tokenBranches3187[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3188,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3268},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3709},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3295(x64Operand& operand, int tokenPos) { operand.addressCoding = 247; }
x64Token x64Parser::tokenBranches3294[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3295,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3387(x64Operand& operand, int tokenPos) { operand.addressCoding = 267; }
x64Token x64Parser::tokenBranches3386[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3387,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3479(x64Operand& operand, int tokenPos) { operand.addressCoding = 281; }
x64Token x64Parser::tokenBranches3478[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3479,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4472(x64Operand& operand, int tokenPos) { operand.addressCoding = 368; }
x64Token x64Parser::tokenBranches4471[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4472,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4848(x64Operand& operand, int tokenPos) { operand.addressCoding = 392; }
x64Token x64Parser::tokenBranches4847[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4848,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5060(x64Operand& operand, int tokenPos) { operand.addressCoding = 416; }
x64Token x64Parser::tokenBranches5059[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5060,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4471(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4847(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5059(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4470[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4471, x64Parser::tokenBranches4471},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4847, x64Parser::tokenBranches4847},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5059, x64Parser::tokenBranches5059},
    {x64Token::EOT}};
void x64Parser::TokenFunc4680(x64Operand& operand, int tokenPos) { operand.addressCoding = 368; }
x64Token x64Parser::tokenBranches4469[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4470},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4680,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4607(x64Operand& operand, int tokenPos) { operand.addressCoding = 383; }
x64Token x64Parser::tokenBranches4606[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4607,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4983(x64Operand& operand, int tokenPos) { operand.addressCoding = 407; }
x64Token x64Parser::tokenBranches4982[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4983,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5195(x64Operand& operand, int tokenPos) { operand.addressCoding = 431; }
x64Token x64Parser::tokenBranches5194[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5195,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4606(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4982(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5194(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4605[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4606, x64Parser::tokenBranches4606},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4982, x64Parser::tokenBranches4982},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5194, x64Parser::tokenBranches5194},
    {x64Token::EOT}};
void x64Parser::TokenFunc4785(x64Operand& operand, int tokenPos) { operand.addressCoding = 383; }
x64Token x64Parser::tokenBranches4604[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4605},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4785,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4604(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4603[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4604, x64Parser::tokenBranches4604},
    {x64Token::EOT}};
void x64Parser::TokenFunc4614(x64Operand& operand, int tokenPos) { operand.addressCoding = 384; }
x64Token x64Parser::tokenBranches4613[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4614,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4990(x64Operand& operand, int tokenPos) { operand.addressCoding = 408; }
x64Token x64Parser::tokenBranches4989[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4990,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5202(x64Operand& operand, int tokenPos) { operand.addressCoding = 432; }
x64Token x64Parser::tokenBranches5201[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5202,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4613(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4989(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5201(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4612[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4613, x64Parser::tokenBranches4613},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4989, x64Parser::tokenBranches4989},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5201, x64Parser::tokenBranches5201},
    {x64Token::EOT}};
void x64Parser::TokenFunc4790(x64Operand& operand, int tokenPos) { operand.addressCoding = 384; }
x64Token x64Parser::tokenBranches4602[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4603},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4612},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4790,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3294(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3386(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3478(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4602(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3293[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4469},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3294, x64Parser::tokenBranches3294},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3386, x64Parser::tokenBranches3386},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3478, x64Parser::tokenBranches3478},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4602, x64Parser::tokenBranches4602},
    {x64Token::EOT}};
void x64Parser::TokenFunc3974(x64Operand& operand, int tokenPos) { operand.addressCoding = 324; }
x64Token x64Parser::tokenBranches3973[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3974,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3981(x64Operand& operand, int tokenPos) { operand.addressCoding = 325; }
x64Token x64Parser::tokenBranches3980[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3981,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3988(x64Operand& operand, int tokenPos) { operand.addressCoding = 326; }
x64Token x64Parser::tokenBranches3987[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3988,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3973(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3980(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3987(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3972[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3973, x64Parser::tokenBranches3973},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3980, x64Parser::tokenBranches3980},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3987, x64Parser::tokenBranches3987},
    {x64Token::EOT}};
void x64Parser::TokenFunc3967(x64Operand& operand, int tokenPos) { operand.addressCoding = 324; }
x64Token x64Parser::tokenBranches3966[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3967,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3972},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4102(x64Operand& operand, int tokenPos) { operand.addressCoding = 333; }
x64Token x64Parser::tokenBranches4101[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4102,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4109(x64Operand& operand, int tokenPos) { operand.addressCoding = 334; }
x64Token x64Parser::tokenBranches4108[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4109,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4116(x64Operand& operand, int tokenPos) { operand.addressCoding = 335; }
x64Token x64Parser::tokenBranches4115[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4116,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4101(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4108(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4115(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4100[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4101, x64Parser::tokenBranches4101},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4108, x64Parser::tokenBranches4108},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4115, x64Parser::tokenBranches4115},
    {x64Token::EOT}};
void x64Parser::TokenFunc4095(x64Operand& operand, int tokenPos) { operand.addressCoding = 333; }
x64Token x64Parser::tokenBranches4094[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4095,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4100},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4258(x64Operand& operand, int tokenPos) { operand.addressCoding = 347; }
x64Token x64Parser::tokenBranches4257[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4258,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4257(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4256[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4257, x64Parser::tokenBranches4257},
    {x64Token::EOT}};
void x64Parser::TokenFunc4251(x64Operand& operand, int tokenPos) { operand.addressCoding = 346; }
x64Token x64Parser::tokenBranches4250[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4251,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4256},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3966(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4094(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4250(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3965[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3966, x64Parser::tokenBranches3966},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4094, x64Parser::tokenBranches4094},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4250, x64Parser::tokenBranches4250},
    {x64Token::EOT}};
void x64Parser::TokenFunc3191(x64Operand& operand, int tokenPos) { operand.addressCoding = 247; }
x64Token x64Parser::tokenBranches3190[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3191,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3293},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3965},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3314(x64Operand& operand, int tokenPos) { operand.addressCoding = 254; }
x64Token x64Parser::tokenBranches3313[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3314,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3406(x64Operand& operand, int tokenPos) { operand.addressCoding = 270; }
x64Token x64Parser::tokenBranches3405[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3406,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3498(x64Operand& operand, int tokenPos) { operand.addressCoding = 284; }
x64Token x64Parser::tokenBranches3497[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3498,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3313(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3405(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3497(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3312[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3313, x64Parser::tokenBranches3313},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3405, x64Parser::tokenBranches3405},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3497, x64Parser::tokenBranches3497},
    {x64Token::EOT}};
void x64Parser::TokenFunc3224(x64Operand& operand, int tokenPos) { operand.addressCoding = 254; }
x64Token x64Parser::tokenBranches3223[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3224,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3312},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3300(x64Operand& operand, int tokenPos) { operand.addressCoding = 252; }
x64Token x64Parser::tokenBranches3299[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3300,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3392(x64Operand& operand, int tokenPos) { operand.addressCoding = 268; }
x64Token x64Parser::tokenBranches3391[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3392,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3484(x64Operand& operand, int tokenPos) { operand.addressCoding = 282; }
x64Token x64Parser::tokenBranches3483[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3484,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4623(x64Operand& operand, int tokenPos) { operand.addressCoding = 385; }
x64Token x64Parser::tokenBranches4622[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4623,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4999(x64Operand& operand, int tokenPos) { operand.addressCoding = 409; }
x64Token x64Parser::tokenBranches4998[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4999,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5211(x64Operand& operand, int tokenPos) { operand.addressCoding = 433; }
x64Token x64Parser::tokenBranches5210[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5211,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4622(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4998(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5210(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4621[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4622, x64Parser::tokenBranches4622},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4998, x64Parser::tokenBranches4998},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5210, x64Parser::tokenBranches5210},
    {x64Token::EOT}};
void x64Parser::TokenFunc4797(x64Operand& operand, int tokenPos) { operand.addressCoding = 385; }
x64Token x64Parser::tokenBranches4620[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4621},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4797,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4620(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4619[] = {
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4620, x64Parser::tokenBranches4620},
    {x64Token::EOT}};
void x64Parser::TokenFunc4630(x64Operand& operand, int tokenPos) { operand.addressCoding = 386; }
x64Token x64Parser::tokenBranches4629[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4630,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5006(x64Operand& operand, int tokenPos) { operand.addressCoding = 410; }
x64Token x64Parser::tokenBranches5005[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5006,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5218(x64Operand& operand, int tokenPos) { operand.addressCoding = 434; }
x64Token x64Parser::tokenBranches5217[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc5218,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4629(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5005(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5217(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4628[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4629, x64Parser::tokenBranches4629},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5005, x64Parser::tokenBranches5005},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc5217, x64Parser::tokenBranches5217},
    {x64Token::EOT}};
void x64Parser::TokenFunc4802(x64Operand& operand, int tokenPos) { operand.addressCoding = 386; }
x64Token x64Parser::tokenBranches4618[] = {{x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4619},
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4628},
                                           {
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4802,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3299(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3391(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3483(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4618(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches3222[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3223},
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3299, x64Parser::tokenBranches3299},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3391, x64Parser::tokenBranches3391},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3483, x64Parser::tokenBranches3483},
    {x64Token::REGISTERCLASS, 9, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4618, x64Parser::tokenBranches4618},
    {x64Token::EOT}};
void x64Parser::TokenFunc4286(x64Operand& operand, int tokenPos) { operand.addressCoding = 252; }
x64Token x64Parser::tokenBranches4285[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4286,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4293(x64Operand& operand, int tokenPos) { operand.addressCoding = 268; }
x64Token x64Parser::tokenBranches4292[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4293,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4300(x64Operand& operand, int tokenPos) { operand.addressCoding = 282; }
x64Token x64Parser::tokenBranches4299[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4300,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4285(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4292(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4299(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4284[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4285, x64Parser::tokenBranches4285},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4292, x64Parser::tokenBranches4292},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4299, x64Parser::tokenBranches4299},
    {x64Token::EOT}};
void x64Parser::TokenFunc4279(x64Operand& operand, int tokenPos) { operand.addressCoding = 252; }
x64Token x64Parser::tokenBranches4278[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4279,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4284},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4346(x64Operand& operand, int tokenPos) { operand.addressCoding = 353; }
x64Token x64Parser::tokenBranches4345[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4346,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4353(x64Operand& operand, int tokenPos) { operand.addressCoding = 354; }
x64Token x64Parser::tokenBranches4352[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4353,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4360(x64Operand& operand, int tokenPos) { operand.addressCoding = 355; }
x64Token x64Parser::tokenBranches4359[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4360,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4345(x64Operand& operand, int tokenPos)
{
    operand.values[3] = new Coding[2];
    CleanupValues.push_back(operand.values[3]);
    operand.values[3]->type = Coding::number;
    operand.values[3]->val = operands.size();
    operand.values[3]->bits = 0;
    operand.values[3]->field = 0;
    operand.values[3]->unary = 0;
    operand.values[3]->binary = 0;
    operand.values[3][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4352(x64Operand& operand, int tokenPos)
{
    operand.values[4] = new Coding[2];
    CleanupValues.push_back(operand.values[4]);
    operand.values[4]->type = Coding::number;
    operand.values[4]->val = operands.size();
    operand.values[4]->bits = 0;
    operand.values[4]->field = 0;
    operand.values[4]->unary = 0;
    operand.values[4]->binary = 0;
    operand.values[4][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4359(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4344[] = {
    {x64Token::NUMBER, 17, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4345, x64Parser::tokenBranches4345},
    {x64Token::NUMBER, 0, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4352, x64Parser::tokenBranches4352},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4359, x64Parser::tokenBranches4359},
    {x64Token::EOT}};
void x64Parser::TokenFunc4339(x64Operand& operand, int tokenPos) { operand.addressCoding = 353; }
x64Token x64Parser::tokenBranches4338[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4339,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4344},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4406(x64Operand& operand, int tokenPos) { operand.addressCoding = 360; }
x64Token x64Parser::tokenBranches4405[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4406,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4422(x64Operand& operand, int tokenPos) { operand.addressCoding = 362; }
x64Token x64Parser::tokenBranches4421[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4422,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4421(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4420[] = {
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4421, x64Parser::tokenBranches4421},
    {x64Token::EOT}};
void x64Parser::TokenFunc4413(x64Operand& operand, int tokenPos) { operand.addressCoding = 361; }
x64Token x64Parser::tokenBranches4412[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4413,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4420},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4405(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4404[] = {
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4412},
    {x64Token::NUMBER, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4405, x64Parser::tokenBranches4405},
    {x64Token::EOT}};
void x64Parser::TokenFunc4399(x64Operand& operand, int tokenPos) { operand.addressCoding = 359; }
x64Token x64Parser::tokenBranches4398[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc4399,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4404},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc4278(x64Operand& operand, int tokenPos)
{
    operand.values[6] = new Coding[2];
    CleanupValues.push_back(operand.values[6]);
    operand.values[6]->type = Coding::number;
    operand.values[6]->val = operands.size();
    operand.values[6]->bits = 0;
    operand.values[6]->field = 0;
    operand.values[6]->unary = 0;
    operand.values[6]->binary = 0;
    operand.values[6][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4338(x64Operand& operand, int tokenPos)
{
    operand.values[7] = new Coding[2];
    CleanupValues.push_back(operand.values[7]);
    operand.values[7]->type = Coding::number;
    operand.values[7]->val = operands.size();
    operand.values[7]->bits = 0;
    operand.values[7]->field = 0;
    operand.values[7]->unary = 0;
    operand.values[7]->binary = 0;
    operand.values[7][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc4398(x64Operand& operand, int tokenPos)
{
    operand.values[8] = new Coding[2];
    CleanupValues.push_back(operand.values[8]);
    operand.values[8]->type = Coding::number;
    operand.values[8]->val = operands.size();
    operand.values[8]->bits = 0;
    operand.values[8]->field = 0;
    operand.values[8]->unary = 0;
    operand.values[8]->binary = 0;
    operand.values[8][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches4277[] = {
    {x64Token::NUMBER, 18, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4278, x64Parser::tokenBranches4278},
    {x64Token::NUMBER, 19, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4338, x64Parser::tokenBranches4338},
    {x64Token::NUMBER, 16, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc4398, x64Parser::tokenBranches4398},
    {x64Token::EOT}};
void x64Parser::TokenFunc3214(x64Operand& operand, int tokenPos) { operand.addressCoding = 252; }
x64Token x64Parser::tokenBranches3213[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData3,
                                               &x64Parser::TokenFunc3214,
                                           },
                                           {x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3222},
                                           {x64Token::TOKEN, 5, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches4277},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3248(x64Operand& operand, int tokenPos) { operand.addressCoding = 258; }
x64Token x64Parser::tokenBranches3247[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData5,
                                               &x64Parser::TokenFunc3248,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3247(x64Operand& operand, int tokenPos)
{
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches3246[] = {
    {x64Token::NUMBER, 15, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3247, x64Parser::tokenBranches3247},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches3245[] = {{x64Token::TOKEN, 4, 0, 0, x64Parser::RegClassData5, NULL, x64Parser::tokenBranches3246},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3251(x64Operand& operand, int tokenPos) { operand.addressCoding = 259; }
x64Token x64Parser::tokenBranches3250[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               x64Parser::RegClassData5,
                                               &x64Parser::TokenFunc3251,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc3(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc16(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc73(x64Operand& operand, int tokenPos)
{
    operand.values[2] = new Coding[2];
    CleanupValues.push_back(operand.values[2]);
    operand.values[2]->type = Coding::reg;
    operand.values[2]->val = inputTokens[tokenPos]->val->ival;
    operand.values[2]->bits = 0;
    operand.values[2]->field = 0;
    operand.values[2]->unary = 0;
    operand.values[2]->binary = 0;
    operand.values[2][1].type = Coding::eot;
}
void x64Parser::TokenFunc480(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc559(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc3213(x64Operand& operand, int tokenPos)
{
    operand.values[5] = new Coding[2];
    CleanupValues.push_back(operand.values[5]);
    operand.values[5]->type = Coding::reg;
    operand.values[5]->val = inputTokens[tokenPos]->val->ival;
    operand.values[5]->bits = 0;
    operand.values[5]->field = 0;
    operand.values[5]->unary = 0;
    operand.values[5]->binary = 0;
    operand.values[5][1].type = Coding::eot;
}
void x64Parser::TokenFunc3250(x64Operand& operand, int tokenPos)
{
    operand.values[0] = new Coding[2];
    CleanupValues.push_back(operand.values[0]);
    operand.values[0]->type = Coding::number;
    operand.values[0]->val = operands.size();
    operand.values[0]->bits = 0;
    operand.values[0]->field = 0;
    operand.values[0]->unary = 0;
    operand.values[0]->binary = 0;
    operand.values[0][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches2[] = {
    {x64Token::REGISTER, 96, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches6},
    {x64Token::REGISTER, 95, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches11},
    {x64Token::REGISTER, 29, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches21},
    {x64Token::REGISTER, 45, 0, 0, x64Parser::RegClassData2, NULL, x64Parser::tokenBranches26},
    {x64Token::REGISTER, 38, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches471},
    {x64Token::REGISTER, 46, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches474},
    {x64Token::REGISTER, 50, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches477},
    {x64Token::REGISTER, 39, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3181},
    {x64Token::REGISTER, 43, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3184},
    {x64Token::REGISTER, 47, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3187},
    {x64Token::REGISTER, 51, 0, 0, x64Parser::RegClassData3, NULL, x64Parser::tokenBranches3190},
    {x64Token::REGISTER, 68, 0, 0, x64Parser::RegClassData5, NULL, x64Parser::tokenBranches3245},
    {x64Token::NUMBER, 6, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc3, x64Parser::tokenBranches3},
    {x64Token::REGISTERCLASS, 19, 0, 0, x64Parser::RegClassData1, &x64Parser::TokenFunc16, x64Parser::tokenBranches16},
    {x64Token::REGISTERCLASS, 15, 0, 0, x64Parser::RegClassData2, &x64Parser::TokenFunc73, x64Parser::tokenBranches73},
    {x64Token::REGISTERCLASS, 5, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc480, x64Parser::tokenBranches480},
    {x64Token::NUMBER, 7, 0, 0, x64Parser::RegClassData4, &x64Parser::TokenFunc559, x64Parser::tokenBranches559},
    {x64Token::REGISTERCLASS, 8, 0, 0, x64Parser::RegClassData3, &x64Parser::TokenFunc3213, x64Parser::tokenBranches3213},
    {x64Token::NUMBER, 8, 0, 0, x64Parser::RegClassData5, &x64Parser::TokenFunc3250, x64Parser::tokenBranches3250},
    {x64Token::EOT}};
void x64Parser::TokenFunc5259(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 439;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5260(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 440;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5261(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 441;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5262(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 440;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5263(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 440;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5264(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 440;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5265(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 442;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5266(x64Operand& operand, int tokenPos)
{
    operand.addressCoding = 440;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches1[] = {{x64Token::TOKEN, 1, 0, 0, x64Parser::RegClassData1, NULL, x64Parser::tokenBranches2},
                                        {
                                            x64Token::REGISTERCLASS,
                                            20,
                                            1,
                                            0,
                                            x64Parser::RegClassData6,
                                            &x64Parser::TokenFunc5259,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            1,
                                            1,
                                            0,
                                            x64Parser::RegClassData7,
                                            &x64Parser::TokenFunc5260,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            14,
                                            1,
                                            0,
                                            x64Parser::RegClassData8,
                                            &x64Parser::TokenFunc5261,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            4,
                                            1,
                                            0,
                                            x64Parser::RegClassData9,
                                            &x64Parser::TokenFunc5262,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            7,
                                            1,
                                            0,
                                            x64Parser::RegClassData10,
                                            &x64Parser::TokenFunc5263,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            10,
                                            1,
                                            0,
                                            x64Parser::RegClassData11,
                                            &x64Parser::TokenFunc5264,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            18,
                                            1,
                                            0,
                                            x64Parser::RegClassData12,
                                            &x64Parser::TokenFunc5265,
                                        },
                                        {
                                            x64Token::REGISTERCLASS,
                                            17,
                                            1,
                                            0,
                                            x64Parser::RegClassData13,
                                            &x64Parser::TokenFunc5266,
                                        },
                                        {x64Token::EOT}};
void x64Parser::TokenFunc5268(x64Operand& operand, int tokenPos) { operand.operandCoding = 443; }
x64Token x64Parser::tokenBranches5267[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5268,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5270(x64Operand& operand, int tokenPos) { operand.operandCoding = 444; }
x64Token x64Parser::tokenBranches5269[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5270,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5275_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5275_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5275_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5275_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5275(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5275_15;
    operand.values[16] = tokenCoding5275_16;
    operand.values[17] = tokenCoding5275_17;
    operand.values[18] = tokenCoding5275_18;
}
Coding x64Parser::tokenCoding5287_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5287_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5287_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5287_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5287(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5287_15;
    operand.values[16] = tokenCoding5287_16;
    operand.values[17] = tokenCoding5287_17;
    operand.values[18] = tokenCoding5287_18;
}
x64Token x64Parser::tokenBranches5274[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5275,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5287,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5273[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5274}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5272[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5273}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5279_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5279_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5279_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5279_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5279(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5279_15;
    operand.values[16] = tokenCoding5279_16;
    operand.values[17] = tokenCoding5279_17;
    operand.values[18] = tokenCoding5279_18;
}
Coding x64Parser::tokenCoding5291_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5291_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5291_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5291_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5291(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5291_15;
    operand.values[16] = tokenCoding5291_16;
    operand.values[17] = tokenCoding5291_17;
    operand.values[18] = tokenCoding5291_18;
}
x64Token x64Parser::tokenBranches5278[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5279,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5291,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5277[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5278}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5276[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5277}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5283_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5283_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5283_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5283_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5283(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5283_15;
    operand.values[16] = tokenCoding5283_16;
    operand.values[17] = tokenCoding5283_17;
    operand.values[18] = tokenCoding5283_18;
}
Coding x64Parser::tokenCoding5295_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5295_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5295_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5295_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5295(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5295_15;
    operand.values[16] = tokenCoding5295_16;
    operand.values[17] = tokenCoding5295_17;
    operand.values[18] = tokenCoding5295_18;
}
x64Token x64Parser::tokenBranches5282[] = {{
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5283,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5295,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5281[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5282}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5280[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5281}, {x64Token::EOT}};
void x64Parser::TokenFunc5272(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5276(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5280(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5271[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5272, x64Parser::tokenBranches5272},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5276, x64Parser::tokenBranches5276},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5280, x64Parser::tokenBranches5280},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5300_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5300_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5300_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5300_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5300(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5300_15;
    operand.values[16] = tokenCoding5300_16;
    operand.values[17] = tokenCoding5300_17;
    operand.values[18] = tokenCoding5300_18;
}
x64Token x64Parser::tokenBranches5299[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5300,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5298[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5299}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5297[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5298}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5304_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5304_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5304_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5304_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5304(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5304_15;
    operand.values[16] = tokenCoding5304_16;
    operand.values[17] = tokenCoding5304_17;
    operand.values[18] = tokenCoding5304_18;
}
x64Token x64Parser::tokenBranches5303[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5304,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5302[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5303}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5301[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5302}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5308_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5308_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5308_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5308_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5308(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5308_15;
    operand.values[16] = tokenCoding5308_16;
    operand.values[17] = tokenCoding5308_17;
    operand.values[18] = tokenCoding5308_18;
}
x64Token x64Parser::tokenBranches5307[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5308,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5306[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5307}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5305[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5306}, {x64Token::EOT}};
void x64Parser::TokenFunc5297(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5301(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5305(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5296[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5297, x64Parser::tokenBranches5297},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5301, x64Parser::tokenBranches5301},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5305, x64Parser::tokenBranches5305},
    {x64Token::EOT}};
void x64Parser::TokenFunc5313(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 445;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5312[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5313,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5311[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5312}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5310[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5311}, {x64Token::EOT}};
void x64Parser::TokenFunc5317(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 446;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5316[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5317,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5315[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5316}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5314[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5315}, {x64Token::EOT}};
void x64Parser::TokenFunc5321(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 447;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5320[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5321,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5319[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5320}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5318[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5319}, {x64Token::EOT}};
void x64Parser::TokenFunc5325(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 448;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5324[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5325,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5323[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5324}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5322[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5323}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5329_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5329_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5329_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5329_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5329(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5329_15;
    operand.values[16] = tokenCoding5329_16;
    operand.values[17] = tokenCoding5329_17;
    operand.values[18] = tokenCoding5329_18;
}
x64Token x64Parser::tokenBranches5328[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5329,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5327[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5328}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5326[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5327}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5333_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5333_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5333_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5333_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5333_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5333(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5333_15;
    operand.values[16] = tokenCoding5333_16;
    operand.values[22] = tokenCoding5333_22;
    operand.values[17] = tokenCoding5333_17;
    operand.values[18] = tokenCoding5333_18;
}
x64Token x64Parser::tokenBranches5332[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5333,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5331[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5332}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5330[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5331}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5337_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5337_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5337_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5337_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5337(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5337_15;
    operand.values[16] = tokenCoding5337_16;
    operand.values[17] = tokenCoding5337_17;
    operand.values[18] = tokenCoding5337_18;
}
x64Token x64Parser::tokenBranches5336[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5337,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5335[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5336}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5334[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5335}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5341_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5341_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5341_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5341_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5341(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5341_15;
    operand.values[16] = tokenCoding5341_16;
    operand.values[17] = tokenCoding5341_17;
    operand.values[18] = tokenCoding5341_18;
}
x64Token x64Parser::tokenBranches5340[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5341,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5339[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5340}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5338[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5339}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5345_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5345_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5345_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5345_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5345(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5345_15;
    operand.values[16] = tokenCoding5345_16;
    operand.values[17] = tokenCoding5345_17;
    operand.values[18] = tokenCoding5345_18;
}
x64Token x64Parser::tokenBranches5344[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5345,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5343[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5344}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5342[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5343}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5349_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5349_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5349_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5349_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 36, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5349(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5349_15;
    operand.values[16] = tokenCoding5349_16;
    operand.values[17] = tokenCoding5349_17;
    operand.values[18] = tokenCoding5349_18;
}
Coding x64Parser::tokenCoding5353_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5353_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5353_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5353_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5353_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 36, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5353(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5353_15;
    operand.values[16] = tokenCoding5353_16;
    operand.values[22] = tokenCoding5353_22;
    operand.values[17] = tokenCoding5353_17;
    operand.values[18] = tokenCoding5353_18;
}
x64Token x64Parser::tokenBranches5348[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5349,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5353,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5347[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5348}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5346[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5347},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5357_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5357_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5357_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5357_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5357(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5357_15;
    operand.values[16] = tokenCoding5357_16;
    operand.values[17] = tokenCoding5357_17;
    operand.values[18] = tokenCoding5357_18;
}
x64Token x64Parser::tokenBranches5356[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5357,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5355[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5356}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5354[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5355},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5361_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5361_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5361_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5361_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5361(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5361_15;
    operand.values[16] = tokenCoding5361_16;
    operand.values[17] = tokenCoding5361_17;
    operand.values[18] = tokenCoding5361_18;
}
x64Token x64Parser::tokenBranches5360[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5361,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5359[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5360}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5358[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5359},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5365_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5365_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5365_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5365_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5365(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5365_15;
    operand.values[16] = tokenCoding5365_16;
    operand.values[17] = tokenCoding5365_17;
    operand.values[18] = tokenCoding5365_18;
}
x64Token x64Parser::tokenBranches5364[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5365,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5363[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5364}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5362[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5363},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5370_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5370_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5370_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5370(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5370_15;
    operand.values[16] = tokenCoding5370_16;
    operand.values[18] = tokenCoding5370_18;
}
x64Token x64Parser::tokenBranches5369[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5370,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5368[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5369}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5367[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5368}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5366[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5367},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5375_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5375_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5375_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5375(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 450;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5375_15;
    operand.values[16] = tokenCoding5375_16;
    operand.values[18] = tokenCoding5375_18;
}
x64Token x64Parser::tokenBranches5374[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5375,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5380_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5380_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5380_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5380(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 450;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5380_15;
    operand.values[16] = tokenCoding5380_16;
    operand.values[18] = tokenCoding5380_18;
}
Coding x64Parser::tokenCoding5385_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5385_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5385_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5385(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 451;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5385_15;
    operand.values[16] = tokenCoding5385_16;
    operand.values[18] = tokenCoding5385_18;
}
x64Token x64Parser::tokenBranches5379[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5380,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5385,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5373[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5374},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5379},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5372[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5373}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5371[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5372},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5390_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5390_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5390_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5390(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5390_15;
    operand.values[16] = tokenCoding5390_16;
    operand.values[18] = tokenCoding5390_18;
}
x64Token x64Parser::tokenBranches5389[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5390,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5395_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5395_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5395_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5395(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5395_15;
    operand.values[16] = tokenCoding5395_16;
    operand.values[18] = tokenCoding5395_18;
}
x64Token x64Parser::tokenBranches5394[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5395,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5400_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5400_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5400_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5400(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5400_15;
    operand.values[16] = tokenCoding5400_16;
    operand.values[18] = tokenCoding5400_18;
}
Coding x64Parser::tokenCoding5405_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5405_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5405_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5405(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 453;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5405_15;
    operand.values[16] = tokenCoding5405_16;
    operand.values[18] = tokenCoding5405_18;
}
x64Token x64Parser::tokenBranches5399[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5400,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5405,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5388[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5389},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5394},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5399},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5387[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5388}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5386[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5387},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5410_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5410_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5410_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5410(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5410_15;
    operand.values[16] = tokenCoding5410_16;
    operand.values[18] = tokenCoding5410_18;
}
x64Token x64Parser::tokenBranches5409[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5410,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5415_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5415_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5415_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5415(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5415_15;
    operand.values[16] = tokenCoding5415_16;
    operand.values[18] = tokenCoding5415_18;
}
x64Token x64Parser::tokenBranches5414[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5415,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5420_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5420_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5420_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5420(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5420_15;
    operand.values[16] = tokenCoding5420_16;
    operand.values[18] = tokenCoding5420_18;
}
x64Token x64Parser::tokenBranches5419[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5420,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5425_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5425_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5425_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5425(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5425_15;
    operand.values[16] = tokenCoding5425_16;
    operand.values[18] = tokenCoding5425_18;
}
Coding x64Parser::tokenCoding5430_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5430_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5430_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5430(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 453;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5430_15;
    operand.values[16] = tokenCoding5430_16;
    operand.values[18] = tokenCoding5430_18;
}
x64Token x64Parser::tokenBranches5424[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5425,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5430,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5408[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5409},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5414},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5419},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5424},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5407[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5408}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5406[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5407},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5434_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5434_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5434_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 128, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5434(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5434_15;
    operand.values[16] = tokenCoding5434_16;
    operand.values[18] = tokenCoding5434_18;
}
x64Token x64Parser::tokenBranches5433[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5434,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5432[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5433}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5431[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5432}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5438_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5438_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5438_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5438(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 450;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5438_15;
    operand.values[16] = tokenCoding5438_16;
    operand.values[18] = tokenCoding5438_18;
}
x64Token x64Parser::tokenBranches5437[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5438,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5442_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5442_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5442_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5442(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 450;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5442_15;
    operand.values[16] = tokenCoding5442_16;
    operand.values[18] = tokenCoding5442_18;
}
Coding x64Parser::tokenCoding5446_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5446_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5446_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5446(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 451;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5446_15;
    operand.values[16] = tokenCoding5446_16;
    operand.values[18] = tokenCoding5446_18;
}
x64Token x64Parser::tokenBranches5441[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5442,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5446,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5436[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5437},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5441},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5435[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5436}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5450_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5450_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5450_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5450(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5450_15;
    operand.values[16] = tokenCoding5450_16;
    operand.values[18] = tokenCoding5450_18;
}
x64Token x64Parser::tokenBranches5449[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5450,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5454_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5454_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5454_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5454(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5454_15;
    operand.values[16] = tokenCoding5454_16;
    operand.values[18] = tokenCoding5454_18;
}
x64Token x64Parser::tokenBranches5453[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5454,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5458_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5458_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5458_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5458(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 452;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5458_15;
    operand.values[16] = tokenCoding5458_16;
    operand.values[18] = tokenCoding5458_18;
}
Coding x64Parser::tokenCoding5462_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5462_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5462_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5462(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 453;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5462_15;
    operand.values[16] = tokenCoding5462_16;
    operand.values[18] = tokenCoding5462_18;
}
x64Token x64Parser::tokenBranches5457[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5458,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5462,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5448[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5449},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5453},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5457},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5447[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5448}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5466_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5466_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5466_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5466(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 454;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5466_15;
    operand.values[16] = tokenCoding5466_16;
    operand.values[18] = tokenCoding5466_18;
}
x64Token x64Parser::tokenBranches5465[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5466,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5470_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5470_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5470_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5470(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 454;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5470_15;
    operand.values[16] = tokenCoding5470_16;
    operand.values[18] = tokenCoding5470_18;
}
x64Token x64Parser::tokenBranches5469[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5470,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5474_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5474_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5474_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5474(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 454;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5474_15;
    operand.values[16] = tokenCoding5474_16;
    operand.values[18] = tokenCoding5474_18;
}
x64Token x64Parser::tokenBranches5473[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5474,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5478_15[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5478_16[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5478_18[] = {
    {CODING_NAME("signedimm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 131, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5478(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 454;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5478_15;
    operand.values[16] = tokenCoding5478_16;
    operand.values[18] = tokenCoding5478_18;
}
Coding x64Parser::tokenCoding5482_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5482_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5482_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 129, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5482(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 455;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5482_15;
    operand.values[16] = tokenCoding5482_16;
    operand.values[18] = tokenCoding5482_18;
}
x64Token x64Parser::tokenBranches5477[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5478,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5482,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5464[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5465},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5469},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5473},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5477},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5463[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5464}, {x64Token::EOT}};
void x64Parser::TokenFunc5326(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5330(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5334(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5338(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5342(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5309[] = {
    {x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches5310},
    {x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5314},
    {x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5318},
    {x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5322},
    {x64Token::REGISTERCLASS, 1, 0, 0, NULL, &x64Parser::TokenFunc5326, x64Parser::tokenBranches5326},
    {x64Token::REGISTERCLASS, 14, 0, 0, NULL, &x64Parser::TokenFunc5330, x64Parser::tokenBranches5330},
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5334, x64Parser::tokenBranches5334},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5338, x64Parser::tokenBranches5338},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5342, x64Parser::tokenBranches5342},
    {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5346},
    {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5354},
    {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5358},
    {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5362},
    {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5366},
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5371},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5386},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5406},
    {x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5431},
    {x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches5435},
    {x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches5447},
    {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5463},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5488_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5488_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5488_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5488(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 456;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5488_15;
    operand.values[16] = tokenCoding5488_16;
    operand.values[18] = tokenCoding5488_18;
}
x64Token x64Parser::tokenBranches5487[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5488,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5502_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5502_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5502_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5502_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5502(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5502_15;
    operand.values[16] = tokenCoding5502_16;
    operand.values[17] = tokenCoding5502_17;
    operand.values[18] = tokenCoding5502_18;
}
x64Token x64Parser::tokenBranches5486[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5487},
                                           {
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5502,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5485[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5486}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5484[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5485},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5493_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5493_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5493_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5493(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 457;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5493_15;
    operand.values[16] = tokenCoding5493_16;
    operand.values[18] = tokenCoding5493_18;
}
x64Token x64Parser::tokenBranches5492[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5493,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5506_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5506_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5506_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5506_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5506(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5506_15;
    operand.values[16] = tokenCoding5506_16;
    operand.values[17] = tokenCoding5506_17;
    operand.values[18] = tokenCoding5506_18;
}
x64Token x64Parser::tokenBranches5491[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5492},
                                           {
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5506,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5490[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5491}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5489[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5490},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5498_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5498_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5498_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5498(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 458;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5498_15;
    operand.values[16] = tokenCoding5498_16;
    operand.values[18] = tokenCoding5498_18;
}
x64Token x64Parser::tokenBranches5497[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5498,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5510_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5510_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5510_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5510_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5510(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5510_15;
    operand.values[16] = tokenCoding5510_16;
    operand.values[17] = tokenCoding5510_17;
    operand.values[18] = tokenCoding5510_18;
}
x64Token x64Parser::tokenBranches5496[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5497},
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5510,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5495[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5496}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5494[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5495},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5483[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5484},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5489},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5494},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5520_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5520_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5520_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5520(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5520_15;
    operand.values[16] = tokenCoding5520_16;
    operand.values[18] = tokenCoding5520_18;
}
x64Token x64Parser::tokenBranches5519[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5520,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5522_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5522_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5522_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5522(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5522_15;
    operand.values[16] = tokenCoding5522_16;
    operand.values[18] = tokenCoding5522_18;
}
x64Token x64Parser::tokenBranches5521[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5522,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5524_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5524_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5524_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5524(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5524_15;
    operand.values[16] = tokenCoding5524_16;
    operand.values[18] = tokenCoding5524_18;
}
x64Token x64Parser::tokenBranches5523[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5524,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5526_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5526_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5526_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5526(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5526_15;
    operand.values[16] = tokenCoding5526_16;
    operand.values[18] = tokenCoding5526_18;
}
x64Token x64Parser::tokenBranches5525[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5526,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5512_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5512_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5512_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5512(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5512_15;
    operand.values[16] = tokenCoding5512_16;
    operand.values[18] = tokenCoding5512_18;
}
void x64Parser::TokenFunc5513(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 459;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5514(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 460;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5515(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 461;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
Coding x64Parser::tokenCoding5516_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5516_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5516_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5516(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5516_15;
    operand.values[16] = tokenCoding5516_16;
    operand.values[18] = tokenCoding5516_18;
}
Coding x64Parser::tokenCoding5517_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5517_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5517_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5517(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5517_15;
    operand.values[16] = tokenCoding5517_16;
    operand.values[18] = tokenCoding5517_18;
}
Coding x64Parser::tokenCoding5518_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5518_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5518_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5518(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5518_15;
    operand.values[16] = tokenCoding5518_16;
    operand.values[18] = tokenCoding5518_18;
}
x64Token x64Parser::tokenBranches5511[] = {{
                                               x64Token::ADDRESSCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5512,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5513,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5514,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5515,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5516,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5517,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5518,
                                           },
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5519},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5521},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5523},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5525},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5533_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5533_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5533_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5533(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5533_15;
    operand.values[16] = tokenCoding5533_16;
    operand.values[18] = tokenCoding5533_18;
}
x64Token x64Parser::tokenBranches5532[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5533,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5535_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5535_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5535_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5535(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5535_15;
    operand.values[16] = tokenCoding5535_16;
    operand.values[18] = tokenCoding5535_18;
}
x64Token x64Parser::tokenBranches5534[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5535,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5537_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5537_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5537_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5537(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5537_15;
    operand.values[16] = tokenCoding5537_16;
    operand.values[18] = tokenCoding5537_18;
}
x64Token x64Parser::tokenBranches5536[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5537,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5539_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5539_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5539_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5539(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5539_15;
    operand.values[16] = tokenCoding5539_16;
    operand.values[18] = tokenCoding5539_18;
}
x64Token x64Parser::tokenBranches5538[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5539,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5528_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5528_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5528_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5528(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5528_15;
    operand.values[16] = tokenCoding5528_16;
    operand.values[18] = tokenCoding5528_18;
}
Coding x64Parser::tokenCoding5529_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5529_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5529_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5529(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5529_15;
    operand.values[16] = tokenCoding5529_16;
    operand.values[18] = tokenCoding5529_18;
}
Coding x64Parser::tokenCoding5530_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5530_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5530_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5530(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5530_15;
    operand.values[16] = tokenCoding5530_16;
    operand.values[18] = tokenCoding5530_18;
}
Coding x64Parser::tokenCoding5531_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5531_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5531_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5531(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5531_15;
    operand.values[16] = tokenCoding5531_16;
    operand.values[18] = tokenCoding5531_18;
}
x64Token x64Parser::tokenBranches5527[] = {{
                                               x64Token::ADDRESSCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5528,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5529,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5530,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5531,
                                           },
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5532},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5534},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5536},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5538},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5543(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5542[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5543,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5541[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5542}, {x64Token::EOT}};
void x64Parser::TokenFunc5546(x64Operand& operand, int tokenPos) { operand.operandCoding = 463; }
x64Token x64Parser::tokenBranches5545[] = {{
                                               x64Token::REGISTER,
                                               99,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5546,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5544[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5545}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5549_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5549_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5549_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5549(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5549_15;
    operand.values[16] = tokenCoding5549_16;
    operand.values[18] = tokenCoding5549_18;
}
x64Token x64Parser::tokenBranches5548[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5549,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5551_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5551_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5551_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5551(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5551_15;
    operand.values[16] = tokenCoding5551_16;
    operand.values[18] = tokenCoding5551_18;
}
x64Token x64Parser::tokenBranches5550[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5551,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5544(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5540[] = {
    {x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches5541},
    {x64Token::REGISTERCLASS, 20, 1, 0, NULL, &x64Parser::TokenFunc5544, x64Parser::tokenBranches5544},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5548},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5550},
    {x64Token::EOT}};
void x64Parser::TokenFunc5555(x64Operand& operand, int tokenPos) { operand.operandCoding = 439; }
x64Token x64Parser::tokenBranches5554[] = {{
                                               x64Token::REGISTER,
                                               99,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5555,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5553[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5554}, {x64Token::EOT}};
void x64Parser::TokenFunc5553(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 439;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
void x64Parser::TokenFunc5557(x64Operand& operand, int tokenPos) { operand.operandCoding = 464; }
x64Token x64Parser::tokenBranches5552[] = {
    {x64Token::REGISTERCLASS, 20, 1, 0, NULL, &x64Parser::TokenFunc5553, x64Parser::tokenBranches5553},
    {
        x64Token::EMPTY,
        0,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5557,
    },
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5560_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5560_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5560_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5560(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5560_15;
    operand.values[16] = tokenCoding5560_16;
    operand.values[18] = tokenCoding5560_18;
}
x64Token x64Parser::tokenBranches5559[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5560,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5562_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5562_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5562_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5562(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5562_15;
    operand.values[16] = tokenCoding5562_16;
    operand.values[18] = tokenCoding5562_18;
}
x64Token x64Parser::tokenBranches5561[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5562,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5558[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5559},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5561},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5565_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5565_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5565(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5565_15;
    operand.values[16] = tokenCoding5565_16;
}
x64Token x64Parser::tokenBranches5564[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5565,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5563[] = {{x64Token::TOKEN, 12, 0, 1, NULL, NULL, x64Parser::tokenBranches5564}, {x64Token::EOT}};
void x64Parser::TokenFunc5568(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 465;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5567[] = {{
                                               x64Token::NUMBER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5568,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5570(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 466;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5572(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 467;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5569[] = {{
                                               x64Token::NUMBER,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5570,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               15,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5572,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5573(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 466;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5574(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 467;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5566[] = {{x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches5567},
                                           {x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5569},
                                           {
                                               x64Token::NUMBER,
                                               11,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5573,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               15,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5574,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5579_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5579_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5579_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5579_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5579(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5579_15;
    operand.values[16] = tokenCoding5579_16;
    operand.values[17] = tokenCoding5579_17;
    operand.values[18] = tokenCoding5579_18;
}
x64Token x64Parser::tokenBranches5578[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5579,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5577[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5578}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5576[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5577}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5583_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5583_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5583_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5583_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5583(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5583_15;
    operand.values[16] = tokenCoding5583_16;
    operand.values[17] = tokenCoding5583_17;
    operand.values[18] = tokenCoding5583_18;
}
x64Token x64Parser::tokenBranches5582[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5583,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5581[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5582}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5580[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5581}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5587_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5587_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5587_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5587_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 4, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5587(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5587_15;
    operand.values[16] = tokenCoding5587_16;
    operand.values[17] = tokenCoding5587_17;
    operand.values[18] = tokenCoding5587_18;
}
x64Token x64Parser::tokenBranches5586[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5587,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5585[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5586}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5584[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5585}, {x64Token::EOT}};
void x64Parser::TokenFunc5576(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5580(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5584(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5575[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5576, x64Parser::tokenBranches5576},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5580, x64Parser::tokenBranches5580},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5584, x64Parser::tokenBranches5584},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5590_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5590_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5590_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5590_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 4, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5590(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5590_15;
    operand.values[16] = tokenCoding5590_16;
    operand.values[17] = tokenCoding5590_17;
    operand.values[18] = tokenCoding5590_18;
}
x64Token x64Parser::tokenBranches5589[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5590,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5588[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5589}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5604_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5604_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5604_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5604_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5604(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5604_15;
    operand.values[16] = tokenCoding5604_16;
    operand.values[17] = tokenCoding5604_17;
    operand.values[18] = tokenCoding5604_18;
}
x64Token x64Parser::tokenBranches5603[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5604,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5594_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5594_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5594_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5594_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5594(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5594_15;
    operand.values[16] = tokenCoding5594_16;
    operand.values[17] = tokenCoding5594_17;
    operand.values[18] = tokenCoding5594_18;
}
x64Token x64Parser::tokenBranches5593[] = {{
                                               x64Token::ADDRESSCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5594,
                                           },
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5603},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5592[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5593}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5608_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5608_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5608_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5608_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5608(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5608_15;
    operand.values[16] = tokenCoding5608_16;
    operand.values[17] = tokenCoding5608_17;
    operand.values[18] = tokenCoding5608_18;
}
x64Token x64Parser::tokenBranches5607[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5608,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5612_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5612_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5612_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5612_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5612(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5612_15;
    operand.values[16] = tokenCoding5612_16;
    operand.values[17] = tokenCoding5612_17;
    operand.values[18] = tokenCoding5612_18;
}
x64Token x64Parser::tokenBranches5611[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5612,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5597_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5597_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5597_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5597_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5597(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5597_15;
    operand.values[16] = tokenCoding5597_16;
    operand.values[17] = tokenCoding5597_17;
    operand.values[18] = tokenCoding5597_18;
}
Coding x64Parser::tokenCoding5600_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5600_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5600_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5600_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5600(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5600_15;
    operand.values[16] = tokenCoding5600_16;
    operand.values[17] = tokenCoding5600_17;
    operand.values[18] = tokenCoding5600_18;
}
x64Token x64Parser::tokenBranches5596[] = {{
                                               x64Token::ADDRESSCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5597,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5600,
                                           },
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5607},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5611},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5595[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5596}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5625_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5625_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5625_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5625_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5625(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5625_15;
    operand.values[16] = tokenCoding5625_16;
    operand.values[17] = tokenCoding5625_17;
    operand.values[18] = tokenCoding5625_18;
}
x64Token x64Parser::tokenBranches5624[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5625,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5629_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5629_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5629_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5629_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5629(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5629_15;
    operand.values[16] = tokenCoding5629_16;
    operand.values[17] = tokenCoding5629_17;
    operand.values[18] = tokenCoding5629_18;
}
x64Token x64Parser::tokenBranches5628[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5629,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5633_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5633_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5633_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5633_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5633(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5633_15;
    operand.values[16] = tokenCoding5633_16;
    operand.values[17] = tokenCoding5633_17;
    operand.values[18] = tokenCoding5633_18;
}
x64Token x64Parser::tokenBranches5632[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5633,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5615_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5615_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5615_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5615_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5615(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5615_15;
    operand.values[16] = tokenCoding5615_16;
    operand.values[17] = tokenCoding5615_17;
    operand.values[18] = tokenCoding5615_18;
}
Coding x64Parser::tokenCoding5618_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5618_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5618_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5618_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5618(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5618_15;
    operand.values[16] = tokenCoding5618_16;
    operand.values[17] = tokenCoding5618_17;
    operand.values[18] = tokenCoding5618_18;
}
Coding x64Parser::tokenCoding5621_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5621_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5621_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5621_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5621(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5621_15;
    operand.values[16] = tokenCoding5621_16;
    operand.values[17] = tokenCoding5621_17;
    operand.values[18] = tokenCoding5621_18;
}
x64Token x64Parser::tokenBranches5614[] = {{
                                               x64Token::ADDRESSCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5615,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5618,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5621,
                                           },
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5624},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5628},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5632},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5613[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5614}, {x64Token::EOT}};
void x64Parser::TokenFunc5592(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5595(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5613(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5591[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5592, x64Parser::tokenBranches5592},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5595, x64Parser::tokenBranches5595},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5613, x64Parser::tokenBranches5613},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5637_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5637_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5637_18[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5637(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5637_15;
    operand.values[16] = tokenCoding5637_16;
    operand.values[18] = tokenCoding5637_18;
}
Coding x64Parser::tokenCoding5640_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5640_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5640_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5640(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5640_15;
    operand.values[16] = tokenCoding5640_16;
    operand.values[18] = tokenCoding5640_18;
}
Coding x64Parser::tokenCoding5643_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5643_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5643_18[] = {
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5643(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5643_15;
    operand.values[16] = tokenCoding5643_16;
    operand.values[18] = tokenCoding5643_18;
}
x64Token x64Parser::tokenBranches5636[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5637,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5640,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5643,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5635[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5636}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5648_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5648_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5648_18[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5648(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5648_15;
    operand.values[16] = tokenCoding5648_16;
    operand.values[18] = tokenCoding5648_18;
}
Coding x64Parser::tokenCoding5653_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5653_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5653_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5653(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5653_15;
    operand.values[16] = tokenCoding5653_16;
    operand.values[18] = tokenCoding5653_18;
}
x64Token x64Parser::tokenBranches5647[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5648,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5653,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5657_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5657_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5657_18[] = {
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 210, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5657(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5657_15;
    operand.values[16] = tokenCoding5657_16;
    operand.values[18] = tokenCoding5657_18;
}
x64Token x64Parser::tokenBranches5646[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5647},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5657,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5645[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5646}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5644[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5645},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5660_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5660_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5660_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 3},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5660(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5660_15;
    operand.values[16] = tokenCoding5660_16;
    operand.values[18] = tokenCoding5660_18;
}
Coding x64Parser::tokenCoding5663_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5663_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5663_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5663(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5663_15;
    operand.values[16] = tokenCoding5663_16;
    operand.values[18] = tokenCoding5663_18;
}
Coding x64Parser::tokenCoding5666_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5666_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5666_18[] = {
    {CODING_NAME("") Coding::stateFunc, 3},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5666(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5666_15;
    operand.values[16] = tokenCoding5666_16;
    operand.values[18] = tokenCoding5666_18;
}
x64Token x64Parser::tokenBranches5659[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5660,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5663,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5666,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5658[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5659}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5671_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5671_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5671_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 3},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5671(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5671_15;
    operand.values[16] = tokenCoding5671_16;
    operand.values[18] = tokenCoding5671_18;
}
Coding x64Parser::tokenCoding5676_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5676_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5676_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5676(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5676_15;
    operand.values[16] = tokenCoding5676_16;
    operand.values[18] = tokenCoding5676_18;
}
x64Token x64Parser::tokenBranches5670[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5671,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5676,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5680_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5680_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5680_18[] = {
    {CODING_NAME("") Coding::stateFunc, 3},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5680(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5680_15;
    operand.values[16] = tokenCoding5680_16;
    operand.values[18] = tokenCoding5680_18;
}
x64Token x64Parser::tokenBranches5669[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5670},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5680,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5668[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5669}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5667[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5668},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5687_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5687_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5687_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5687(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5687_15;
    operand.values[16] = tokenCoding5687_16;
    operand.values[18] = tokenCoding5687_18;
}
x64Token x64Parser::tokenBranches5686[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5687,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5683_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5683_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5683_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 4},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5683(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5683_15;
    operand.values[16] = tokenCoding5683_16;
    operand.values[18] = tokenCoding5683_18;
}
Coding x64Parser::tokenCoding5690_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5690_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5690_18[] = {
    {CODING_NAME("") Coding::stateFunc, 4},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5690(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5690_15;
    operand.values[16] = tokenCoding5690_16;
    operand.values[18] = tokenCoding5690_18;
}
x64Token x64Parser::tokenBranches5682[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5683,
                                           },
                                           {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5686},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5690,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5681[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5682}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5695_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5695_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5695_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 4},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5695(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5695_15;
    operand.values[16] = tokenCoding5695_16;
    operand.values[18] = tokenCoding5695_18;
}
Coding x64Parser::tokenCoding5700_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5700_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5700_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5700(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5700_15;
    operand.values[16] = tokenCoding5700_16;
    operand.values[18] = tokenCoding5700_18;
}
x64Token x64Parser::tokenBranches5694[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5695,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5700,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5704_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5704_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5704_18[] = {
    {CODING_NAME("") Coding::stateFunc, 4},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5704(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5704_15;
    operand.values[16] = tokenCoding5704_16;
    operand.values[18] = tokenCoding5704_18;
}
x64Token x64Parser::tokenBranches5693[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5694},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5704,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5692[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5693}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5691[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5692},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5711_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5711_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5711_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5711(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5711_15;
    operand.values[16] = tokenCoding5711_16;
    operand.values[18] = tokenCoding5711_18;
}
x64Token x64Parser::tokenBranches5710[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5711,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5707_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5707_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5707_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 5},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5707(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5707_15;
    operand.values[16] = tokenCoding5707_16;
    operand.values[18] = tokenCoding5707_18;
}
Coding x64Parser::tokenCoding5714_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5714_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5714_18[] = {
    {CODING_NAME("") Coding::stateFunc, 5},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5714(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5714_15;
    operand.values[16] = tokenCoding5714_16;
    operand.values[18] = tokenCoding5714_18;
}
x64Token x64Parser::tokenBranches5706[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5707,
                                           },
                                           {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5710},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5714,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5705[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5706}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5719_15[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5719_16[] = {
    {CODING_NAME("one")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5719_18[] = {
    {CODING_NAME("one") Coding::stateFunc, 5},
    {CODING_NAME("one")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5719(x64Operand& operand, int tokenPos)
{
    operand.values[24] = new Coding[2];
    CleanupValues.push_back(operand.values[24]);
    operand.values[24]->type = Coding::number;
    operand.values[24]->val = operands.size();
    operand.values[24]->bits = 0;
    operand.values[24]->field = 0;
    operand.values[24]->unary = 0;
    operand.values[24]->binary = 0;
    operand.values[24][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5719_15;
    operand.values[16] = tokenCoding5719_16;
    operand.values[18] = tokenCoding5719_18;
}
Coding x64Parser::tokenCoding5724_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5724_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5724_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5724(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5724_15;
    operand.values[16] = tokenCoding5724_16;
    operand.values[18] = tokenCoding5724_18;
}
x64Token x64Parser::tokenBranches5718[] = {{
                                               x64Token::NUMBER,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5719,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5724,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5728_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5728_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5728_18[] = {
    {CODING_NAME("") Coding::stateFunc, 5},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 211, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5728(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5728_15;
    operand.values[16] = tokenCoding5728_16;
    operand.values[18] = tokenCoding5728_18;
}
x64Token x64Parser::tokenBranches5717[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches5718},
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5728,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5716[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5717}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5715[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5716},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5634[] = {{x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches5635},
                                           {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5644},
                                           {x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches5658},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5667},
                                           {x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches5681},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5691},
                                           {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches5705},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5715},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5735_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5735_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5735_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5735_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5735(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5735_15;
    operand.values[16] = tokenCoding5735_16;
    operand.values[17] = tokenCoding5735_17;
    operand.values[18] = tokenCoding5735_18;
}
Coding x64Parser::tokenCoding5741_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5741_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5741_17[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5741_18[] = {
    {CODING_NAME("") Coding::stateFunc, 3},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5741(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5741_15;
    operand.values[16] = tokenCoding5741_16;
    operand.values[17] = tokenCoding5741_17;
    operand.values[18] = tokenCoding5741_18;
}
x64Token x64Parser::tokenBranches5734[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5735,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5741,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5733[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5734}, {x64Token::EOT}};
void x64Parser::TokenFunc5733(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5732[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc5733, x64Parser::tokenBranches5733}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5731[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5732}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5730[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5731},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5747_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5747_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5747_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5747_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5747(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5747_15;
    operand.values[16] = tokenCoding5747_16;
    operand.values[17] = tokenCoding5747_17;
    operand.values[18] = tokenCoding5747_18;
}
Coding x64Parser::tokenCoding5753_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5753_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5753_17[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5753_18[] = {
    {CODING_NAME("") Coding::stateFunc, 4},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5753(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5753_15;
    operand.values[16] = tokenCoding5753_16;
    operand.values[17] = tokenCoding5753_17;
    operand.values[18] = tokenCoding5753_18;
}
x64Token x64Parser::tokenBranches5746[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5747,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5753,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5745[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5746}, {x64Token::EOT}};
void x64Parser::TokenFunc5745(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5744[] = {
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5745, x64Parser::tokenBranches5745}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5743[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5744}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5742[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches5743},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5759_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5759_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5759_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5759_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5759(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5759_15;
    operand.values[16] = tokenCoding5759_16;
    operand.values[17] = tokenCoding5759_17;
    operand.values[18] = tokenCoding5759_18;
}
Coding x64Parser::tokenCoding5765_15[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5765_16[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5765_17[] = {
    {CODING_NAME("")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5765_18[] = {
    {CODING_NAME("") Coding::stateFunc, 4},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5765(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5765_15;
    operand.values[16] = tokenCoding5765_16;
    operand.values[17] = tokenCoding5765_17;
    operand.values[18] = tokenCoding5765_18;
}
x64Token x64Parser::tokenBranches5758[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5759,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5765,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5757[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5758}, {x64Token::EOT}};
void x64Parser::TokenFunc5757(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5756[] = {
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5757, x64Parser::tokenBranches5757}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5755[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5756}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5754[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5755},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5729[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5730},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5742},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches5754},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5767_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5767_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5767(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5767_15;
    operand.values[16] = tokenCoding5767_16;
}
x64Token x64Parser::tokenBranches5766[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5767,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5771_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5771_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5771_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5771(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5771_15;
    operand.values[16] = tokenCoding5771_16;
    operand.values[17] = tokenCoding5771_17;
}
x64Token x64Parser::tokenBranches5770[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5771,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5769[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5770}, {x64Token::EOT}};
void x64Parser::TokenFunc5769(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5768[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5769, x64Parser::tokenBranches5769}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5775_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5775_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5775_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5775_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5775(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5775_15;
    operand.values[16] = tokenCoding5775_16;
    operand.values[17] = tokenCoding5775_17;
    operand.values[18] = tokenCoding5775_18;
}
x64Token x64Parser::tokenBranches5774[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5775,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5773[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5774}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5778_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5778_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5778_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5778_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5778(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5778_15;
    operand.values[16] = tokenCoding5778_16;
    operand.values[17] = tokenCoding5778_17;
    operand.values[18] = tokenCoding5778_18;
}
x64Token x64Parser::tokenBranches5777[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5778,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5776[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5777}, {x64Token::EOT}};
void x64Parser::TokenFunc5773(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5772[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5773, x64Parser::tokenBranches5773},
    {x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5776},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5782_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5782_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5782_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5782_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5782(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5782_15;
    operand.values[16] = tokenCoding5782_16;
    operand.values[17] = tokenCoding5782_17;
    operand.values[18] = tokenCoding5782_18;
}
x64Token x64Parser::tokenBranches5781[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5782,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5780[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5781}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5785_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5785_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5785_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5785_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5785(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5785_15;
    operand.values[16] = tokenCoding5785_16;
    operand.values[17] = tokenCoding5785_17;
    operand.values[18] = tokenCoding5785_18;
}
x64Token x64Parser::tokenBranches5784[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5785,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5783[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5784}, {x64Token::EOT}};
void x64Parser::TokenFunc5780(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5779[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5780, x64Parser::tokenBranches5780},
    {x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5783},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5789_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5789_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5789_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5789_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5789(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5789_15;
    operand.values[16] = tokenCoding5789_16;
    operand.values[17] = tokenCoding5789_17;
    operand.values[18] = tokenCoding5789_18;
}
x64Token x64Parser::tokenBranches5788[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5789,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5787[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5788}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5792_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5792_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5792_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5792_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5792(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5792_15;
    operand.values[16] = tokenCoding5792_16;
    operand.values[17] = tokenCoding5792_17;
    operand.values[18] = tokenCoding5792_18;
}
x64Token x64Parser::tokenBranches5791[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5792,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5790[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5791}, {x64Token::EOT}};
void x64Parser::TokenFunc5787(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5786[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5787, x64Parser::tokenBranches5787},
    {x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5790},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5796_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5796_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5796_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5796(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5796_15;
    operand.values[16] = tokenCoding5796_16;
    operand.values[17] = tokenCoding5796_17;
}
x64Token x64Parser::tokenBranches5795[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5796,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5794[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5795}, {x64Token::EOT}};
void x64Parser::TokenFunc5794(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5793[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc5794, x64Parser::tokenBranches5794}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5800_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5800_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5800_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5800(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5800_15;
    operand.values[16] = tokenCoding5800_16;
    operand.values[17] = tokenCoding5800_17;
}
x64Token x64Parser::tokenBranches5799[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5800,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5798[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5799}, {x64Token::EOT}};
void x64Parser::TokenFunc5798(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5797[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5798, x64Parser::tokenBranches5798}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5804_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5804_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5804_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5804(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5804_15;
    operand.values[16] = tokenCoding5804_16;
    operand.values[17] = tokenCoding5804_17;
}
x64Token x64Parser::tokenBranches5803[] = {{
                                               x64Token::ADDRESSCLASS,
                                               27,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5804,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5802[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5803}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5807_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5807_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5807_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5807(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5807_15;
    operand.values[16] = tokenCoding5807_16;
    operand.values[17] = tokenCoding5807_17;
}
x64Token x64Parser::tokenBranches5806[] = {{
                                               x64Token::ADDRESSCLASS,
                                               27,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5807,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5805[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5806}, {x64Token::EOT}};
void x64Parser::TokenFunc5802(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5805(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5801[] = {
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc5802, x64Parser::tokenBranches5802},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc5805, x64Parser::tokenBranches5805},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5812_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5812_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5812_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5812(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5812_15;
    operand.values[16] = tokenCoding5812_16;
    operand.values[17] = tokenCoding5812_17;
}
x64Token x64Parser::tokenBranches5811[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5812,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5816_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5816_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5816_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5816(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5816_15;
    operand.values[16] = tokenCoding5816_16;
    operand.values[17] = tokenCoding5816_17;
}
x64Token x64Parser::tokenBranches5815[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5816,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5810[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5811},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5815},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5809[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5810}, {x64Token::EOT}};
void x64Parser::TokenFunc5809(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5808[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5809, x64Parser::tokenBranches5809}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5820_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5820_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5820_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5820_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5820(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5820_15;
    operand.values[16] = tokenCoding5820_16;
    operand.values[22] = tokenCoding5820_22;
    operand.values[17] = tokenCoding5820_17;
}
x64Token x64Parser::tokenBranches5819[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5820,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5818[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5819}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5823_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5823_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5823_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5823_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5823(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5823_15;
    operand.values[16] = tokenCoding5823_16;
    operand.values[22] = tokenCoding5823_22;
    operand.values[17] = tokenCoding5823_17;
}
x64Token x64Parser::tokenBranches5822[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5823,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5821[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5822}, {x64Token::EOT}};
void x64Parser::TokenFunc5818(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5821(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5817[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc5818, x64Parser::tokenBranches5818},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5821, x64Parser::tokenBranches5821},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5829_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5829_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5829_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5829(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5829_15;
    operand.values[16] = tokenCoding5829_16;
    operand.values[17] = tokenCoding5829_17;
}
x64Token x64Parser::tokenBranches5828[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5829,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5827[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5828}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5826[] = {{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5827},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5825[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5826}, {x64Token::EOT}};
void x64Parser::TokenFunc5825(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5824[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5825, x64Parser::tokenBranches5825}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5833_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5833_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5833_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5833_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect), 38, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5833_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5833(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5833_15;
    operand.values[16] = tokenCoding5833_16;
    operand.values[22] = tokenCoding5833_22;
    operand.values[17] = tokenCoding5833_17;
    operand.values[18] = tokenCoding5833_18;
}
x64Token x64Parser::tokenBranches5832[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5833,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5831[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5832}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5836_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5836_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5836_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5836_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect), 38, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5836_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5836(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5836_15;
    operand.values[16] = tokenCoding5836_16;
    operand.values[22] = tokenCoding5836_22;
    operand.values[17] = tokenCoding5836_17;
    operand.values[18] = tokenCoding5836_18;
}
x64Token x64Parser::tokenBranches5835[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5836,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5834[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5835}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5839_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5839_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5839_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5839_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5839_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5839(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5839_15;
    operand.values[16] = tokenCoding5839_16;
    operand.values[22] = tokenCoding5839_22;
    operand.values[17] = tokenCoding5839_17;
    operand.values[18] = tokenCoding5839_18;
}
x64Token x64Parser::tokenBranches5838[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5839,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5837[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5838}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5842_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5842_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5842_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5842_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5842_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 36, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5842(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5842_15;
    operand.values[16] = tokenCoding5842_16;
    operand.values[22] = tokenCoding5842_22;
    operand.values[17] = tokenCoding5842_17;
    operand.values[18] = tokenCoding5842_18;
}
x64Token x64Parser::tokenBranches5841[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5842,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5840[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5841}, {x64Token::EOT}};
void x64Parser::TokenFunc5837(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc5840(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5830[] = {
    {x64Token::ADDRESSCLASS, 24, 0, 0, NULL, NULL, x64Parser::tokenBranches5831},
    {x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches5834},
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc5837, x64Parser::tokenBranches5837},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5840, x64Parser::tokenBranches5840},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding5848_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5848_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5848_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5848(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5848_15;
    operand.values[16] = tokenCoding5848_16;
    operand.values[17] = tokenCoding5848_17;
}
x64Token x64Parser::tokenBranches5847[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5848,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5846[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5847}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5845[] = {{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5846},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5844[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5845}, {x64Token::EOT}};
void x64Parser::TokenFunc5844(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5843[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc5844, x64Parser::tokenBranches5844}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5854_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5854_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5854_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5854(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding5854_15;
    operand.values[16] = tokenCoding5854_16;
    operand.values[17] = tokenCoding5854_17;
}
x64Token x64Parser::tokenBranches5853[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5854,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5852[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5853}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5851[] = {{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5852},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5850[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5851}, {x64Token::EOT}};
void x64Parser::TokenFunc5850(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5849[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc5850, x64Parser::tokenBranches5850}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5865_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5865_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5865_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5865_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5865(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5865_15;
    operand.values[16] = tokenCoding5865_16;
    operand.values[17] = tokenCoding5865_17;
    operand.values[18] = tokenCoding5865_18;
}
x64Token x64Parser::tokenBranches5864[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5865,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5863[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5864}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5862[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches5863},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5870_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5870_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5870_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5870(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 469;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5870_15;
    operand.values[16] = tokenCoding5870_16;
    operand.values[17] = tokenCoding5870_17;
}
Coding x64Parser::tokenCoding5871_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5871_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5871_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5871(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 470;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding5871_15;
    operand.values[16] = tokenCoding5871_16;
    operand.values[17] = tokenCoding5871_17;
}
x64Token x64Parser::tokenBranches5869[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5870,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5871,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5880(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 471;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5879[] = {{
                                               x64Token::NUMBER,
                                               6,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5880,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5884(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 472;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches5883[] = {{
                                               x64Token::NUMBER,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5884,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5878[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches5879},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches5883},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5877[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5878}, {x64Token::EOT}};
Coding x64Parser::tokenCoding5892_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5892_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5892_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5892_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5892(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5892_15;
    operand.values[16] = tokenCoding5892_16;
    operand.values[17] = tokenCoding5892_17;
    operand.values[18] = tokenCoding5892_18;
}
x64Token x64Parser::tokenBranches5891[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5892,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5894_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5894_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5894_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5894_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5894(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5894_15;
    operand.values[16] = tokenCoding5894_16;
    operand.values[17] = tokenCoding5894_17;
    operand.values[18] = tokenCoding5894_18;
}
x64Token x64Parser::tokenBranches5893[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5894,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5896_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5896_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5896_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5896_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5896(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5896_15;
    operand.values[16] = tokenCoding5896_16;
    operand.values[17] = tokenCoding5896_17;
    operand.values[18] = tokenCoding5896_18;
}
x64Token x64Parser::tokenBranches5895[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5896,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5905_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5905_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5905_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5905_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5905(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5905_15;
    operand.values[16] = tokenCoding5905_16;
    operand.values[17] = tokenCoding5905_17;
    operand.values[18] = tokenCoding5905_18;
}
x64Token x64Parser::tokenBranches5904[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5905,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding5908_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5908_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5908_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5908_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5908(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5908_15;
    operand.values[16] = tokenCoding5908_16;
    operand.values[17] = tokenCoding5908_17;
    operand.values[18] = tokenCoding5908_18;
}
x64Token x64Parser::tokenBranches5907[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5908,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5898(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 475;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5900(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 476;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5902_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5902_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5902_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5902_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5902(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5902_15;
    operand.values[16] = tokenCoding5902_16;
    operand.values[17] = tokenCoding5902_17;
    operand.values[18] = tokenCoding5902_18;
}
x64Token x64Parser::tokenBranches5897[] = {{
                                               x64Token::NUMBER,
                                               6,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5898,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5900,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5902,
                                           },
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5904},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5907},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5877(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::number;
    operand.values[1]->val = operands.size();
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5885(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 473;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc5886(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 474;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding5887_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5887_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5887_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5887_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5887(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5887_15;
    operand.values[16] = tokenCoding5887_16;
    operand.values[17] = tokenCoding5887_17;
    operand.values[18] = tokenCoding5887_18;
}
Coding x64Parser::tokenCoding5888_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5888_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5888_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5888_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5888(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5888_15;
    operand.values[16] = tokenCoding5888_16;
    operand.values[17] = tokenCoding5888_17;
    operand.values[18] = tokenCoding5888_18;
}
Coding x64Parser::tokenCoding5889_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5889_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5889_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5889_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5889(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5889_15;
    operand.values[16] = tokenCoding5889_16;
    operand.values[17] = tokenCoding5889_17;
    operand.values[18] = tokenCoding5889_18;
}
Coding x64Parser::tokenCoding5890_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5890_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5890_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding5890_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc5890(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding5890_15;
    operand.values[16] = tokenCoding5890_16;
    operand.values[17] = tokenCoding5890_17;
    operand.values[18] = tokenCoding5890_18;
}
x64Token x64Parser::tokenBranches5876[] = {
    {x64Token::NUMBER, 4, 0, 0, NULL, &x64Parser::TokenFunc5877, x64Parser::tokenBranches5877},
    {
        x64Token::NUMBER,
        13,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5885,
    },
    {
        x64Token::NUMBER,
        15,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5886,
    },
    {
        x64Token::ADDRESSCLASS,
        17,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5887,
    },
    {
        x64Token::ADDRESSCLASS,
        19,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5888,
    },
    {
        x64Token::ADDRESSCLASS,
        21,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5889,
    },
    {
        x64Token::ADDRESSCLASS,
        1,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc5890,
    },
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches5891},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches5893},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches5895},
    {x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches5897},
    {x64Token::EOT}};
void x64Parser::TokenFunc5912(x64Operand& operand, int tokenPos) { operand.operandCoding = 477; }
x64Token x64Parser::tokenBranches5911[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5912,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc5962(x64Operand& operand, int tokenPos) { operand.operandCoding = 478; }
x64Token x64Parser::tokenBranches5961[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5962,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5960[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5961},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5959[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5960}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5958[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5959}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5957[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5958},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5956[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5957}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5955[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5956}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5954[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5955}, {x64Token::EOT}};
void x64Parser::TokenFunc5988(x64Operand& operand, int tokenPos) { operand.operandCoding = 480; }
x64Token x64Parser::tokenBranches5987[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5988,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5986[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches5987},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5985[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5986}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5984[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5985}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5983[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5984},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5982[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5983}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5981[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5982}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5980[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5981}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5953[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5954},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5980},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5952[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5953}, {x64Token::EOT}};
void x64Parser::TokenFunc5975(x64Operand& operand, int tokenPos) { operand.operandCoding = 479; }
x64Token x64Parser::tokenBranches5974[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc5975,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5973[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches5974},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5972[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5973}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5971[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5972}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5970[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5971},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5969[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5970}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5968[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5969}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5967[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5968}, {x64Token::EOT}};
void x64Parser::TokenFunc6001(x64Operand& operand, int tokenPos) { operand.operandCoding = 481; }
x64Token x64Parser::tokenBranches6000[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6001,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5999[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6000},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5998[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5999}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5997[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5998}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5996[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches5997},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5995[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5996}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5994[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches5995}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5993[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches5994}, {x64Token::EOT}};
void x64Parser::TokenFunc6023(x64Operand& operand, int tokenPos) { operand.operandCoding = 483; }
x64Token x64Parser::tokenBranches6022[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6023,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6021[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6022},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6020[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6021}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6019[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6020}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6018[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6019},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6017[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6018}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6016[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6017}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6015[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6016}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5966[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches5967},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches5993},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6015},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches5965[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches5966}, {x64Token::EOT}};
void x64Parser::TokenFunc6010(x64Operand& operand, int tokenPos) { operand.operandCoding = 482; }
x64Token x64Parser::tokenBranches6009[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6010,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6008[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6009},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6007[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6008}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6006[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6007}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6005[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6006}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6004[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6005}, {x64Token::EOT}};
void x64Parser::TokenFunc5965(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches5951[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches5952},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc5965, x64Parser::tokenBranches5965},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6004},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches5950[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches5951}, {x64Token::EOT}};
void x64Parser::TokenFunc6036(x64Operand& operand, int tokenPos) { operand.operandCoding = 484; }
x64Token x64Parser::tokenBranches6035[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6036,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6034[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6035},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6033[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6034}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6032[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6033}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6031[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6032},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6030[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6031}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6029[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6030}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6028[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6029}, {x64Token::EOT}};
void x64Parser::TokenFunc6062(x64Operand& operand, int tokenPos) { operand.operandCoding = 486; }
x64Token x64Parser::tokenBranches6061[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6062,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6060[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6061},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6059[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6060}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6058[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6059}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6057[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6058},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6056[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6057}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6055[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6056}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6054[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6055}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6027[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6028},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6054},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6026[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6027}, {x64Token::EOT}};
void x64Parser::TokenFunc6049(x64Operand& operand, int tokenPos) { operand.operandCoding = 485; }
x64Token x64Parser::tokenBranches6048[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6049,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6047[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6048},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6046[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6047}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6045[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6046}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6044[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6045},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6043[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6044}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6042[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6043}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6041[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6042}, {x64Token::EOT}};
void x64Parser::TokenFunc6075(x64Operand& operand, int tokenPos) { operand.operandCoding = 487; }
x64Token x64Parser::tokenBranches6074[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6075,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6073[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6074},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6072[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6073}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6071[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6072}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6070[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6071},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6069[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6070}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6068[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6069}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6067[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6068}, {x64Token::EOT}};
void x64Parser::TokenFunc6095(x64Operand& operand, int tokenPos) { operand.operandCoding = 489; }
x64Token x64Parser::tokenBranches6094[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6095,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6093[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6094},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6092[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6093}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6091[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6092}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6090[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6091}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6089[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6090}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6040[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6041},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6067},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6089},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6039[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6040}, {x64Token::EOT}};
void x64Parser::TokenFunc6084(x64Operand& operand, int tokenPos) { operand.operandCoding = 488; }
x64Token x64Parser::tokenBranches6083[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6084,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6082[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6083},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6081[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6082}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6080[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6081}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6079[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6080}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6078[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6079}, {x64Token::EOT}};
void x64Parser::TokenFunc6039(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6025[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6026},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6039, x64Parser::tokenBranches6039},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6078},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6024[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6025}, {x64Token::EOT}};
void x64Parser::TokenFunc6108(x64Operand& operand, int tokenPos) { operand.operandCoding = 490; }
x64Token x64Parser::tokenBranches6107[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6108,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6106[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6107},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6105[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6106}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6104[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6105}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6103[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6104},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6102[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6103}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6101[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6102}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6100[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6101}, {x64Token::EOT}};
void x64Parser::TokenFunc6134(x64Operand& operand, int tokenPos) { operand.operandCoding = 492; }
x64Token x64Parser::tokenBranches6133[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6134,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6132[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6133},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6131[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6132}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6130[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6131}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6129[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6130},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6128[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6129}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6127[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6128}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6126[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6127}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6099[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6100},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6126},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6098[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6099}, {x64Token::EOT}};
void x64Parser::TokenFunc6121(x64Operand& operand, int tokenPos) { operand.operandCoding = 491; }
x64Token x64Parser::tokenBranches6120[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6121,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6119[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6120},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6118[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6119}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6117[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6118}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6116[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6117},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6115[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6116}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6114[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6115}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6113[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6114}, {x64Token::EOT}};
void x64Parser::TokenFunc6147(x64Operand& operand, int tokenPos) { operand.operandCoding = 493; }
x64Token x64Parser::tokenBranches6146[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6147,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6145[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6146},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6144[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6145}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6143[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6144}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6142[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6143},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6141[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6142}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6140[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6141}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6139[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6140}, {x64Token::EOT}};
void x64Parser::TokenFunc6167(x64Operand& operand, int tokenPos) { operand.operandCoding = 495; }
x64Token x64Parser::tokenBranches6166[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6167,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6165[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6166},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6164[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6165}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6163[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6164}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6162[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6163}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6161[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6162}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6112[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6113},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6139},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6161},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6111[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6112}, {x64Token::EOT}};
void x64Parser::TokenFunc6156(x64Operand& operand, int tokenPos) { operand.operandCoding = 494; }
x64Token x64Parser::tokenBranches6155[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6156,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6154[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6155},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6153[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6154}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6152[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6153}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6151[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6152}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6150[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6151}, {x64Token::EOT}};
void x64Parser::TokenFunc6111(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6097[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6098},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6111, x64Parser::tokenBranches6111},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6150},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6096[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6097}, {x64Token::EOT}};
void x64Parser::TokenFunc6180(x64Operand& operand, int tokenPos) { operand.operandCoding = 496; }
x64Token x64Parser::tokenBranches6179[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6180,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6178[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6179},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6177[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6178}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6176[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6177}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6175[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6176},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6174[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6175}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6173[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6174}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6172[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6173}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6171[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6172},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6170[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6171}, {x64Token::EOT}};
void x64Parser::TokenFunc6193(x64Operand& operand, int tokenPos) { operand.operandCoding = 497; }
x64Token x64Parser::tokenBranches6192[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6193,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6191[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6192},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6190[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6191}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6189[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6190}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6188[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6189},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6187[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6188}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6186[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6187}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6185[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6186}, {x64Token::EOT}};
void x64Parser::TokenFunc6213(x64Operand& operand, int tokenPos) { operand.operandCoding = 499; }
x64Token x64Parser::tokenBranches6212[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6213,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6211[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6212},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6210[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6211}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6209[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6210}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6208[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6209}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6207[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6208}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6184[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6185},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6207},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6183[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6184}, {x64Token::EOT}};
void x64Parser::TokenFunc6202(x64Operand& operand, int tokenPos) { operand.operandCoding = 498; }
x64Token x64Parser::tokenBranches6201[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6202,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6200[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6201},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6199[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6200}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6198[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6199}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6197[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6198}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6196[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6197}, {x64Token::EOT}};
void x64Parser::TokenFunc6183(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6169[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6170},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6183, x64Parser::tokenBranches6183},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6196},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6168[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6169}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches5949[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches5950},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6024},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6096},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6168},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6218(x64Operand& operand, int tokenPos) { operand.operandCoding = 500; }
x64Token x64Parser::tokenBranches6217[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6218,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6223_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6223_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6223_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6223_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6223(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding6223_15;
    operand.values[16] = tokenCoding6223_16;
    operand.values[17] = tokenCoding6223_17;
    operand.values[18] = tokenCoding6223_18;
}
Coding x64Parser::tokenCoding6227_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6227_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6227_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6227_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6227_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6227(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding6227_15;
    operand.values[16] = tokenCoding6227_16;
    operand.values[22] = tokenCoding6227_22;
    operand.values[17] = tokenCoding6227_17;
    operand.values[18] = tokenCoding6227_18;
}
x64Token x64Parser::tokenBranches6222[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6223,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6227,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6221[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6222}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6220[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6221},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6231_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6231_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6231_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6231_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6231(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding6231_15;
    operand.values[16] = tokenCoding6231_16;
    operand.values[17] = tokenCoding6231_17;
    operand.values[18] = tokenCoding6231_18;
}
x64Token x64Parser::tokenBranches6230[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6231,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6229[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6230}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6228[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6229},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6235_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6235_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6235_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6235_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6235(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding6235_15;
    operand.values[16] = tokenCoding6235_16;
    operand.values[17] = tokenCoding6235_17;
    operand.values[18] = tokenCoding6235_18;
}
x64Token x64Parser::tokenBranches6234[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6235,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6233[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6234}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6232[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches6233},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6239_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6239_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6239_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6239_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6239(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding6239_15;
    operand.values[16] = tokenCoding6239_16;
    operand.values[17] = tokenCoding6239_17;
    operand.values[18] = tokenCoding6239_18;
}
x64Token x64Parser::tokenBranches6238[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6239,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6237[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6238}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6236[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6237},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6219[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6220},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6228},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6232},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6236},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6241_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6241_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6241_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6241_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6241(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6241_15;
    operand.values[16] = tokenCoding6241_16;
    operand.values[17] = tokenCoding6241_17;
    operand.values[18] = tokenCoding6241_18;
}
x64Token x64Parser::tokenBranches6240[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6241,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6243_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6243_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6243_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6243_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6243(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6243_15;
    operand.values[16] = tokenCoding6243_16;
    operand.values[17] = tokenCoding6243_17;
    operand.values[18] = tokenCoding6243_18;
}
x64Token x64Parser::tokenBranches6242[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6243,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6246(x64Operand& operand, int tokenPos) { operand.operandCoding = 501; }
x64Token x64Parser::tokenBranches6245[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6246,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6258(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 502;
    operand.values[26] = new Coding[2];
    CleanupValues.push_back(operand.values[26]);
    operand.values[26]->type = Coding::number;
    operand.values[26]->val = operands.size();
    operand.values[26]->bits = 0;
    operand.values[26]->field = 0;
    operand.values[26]->unary = 0;
    operand.values[26]->binary = 0;
    operand.values[26][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6257[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6258,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6256[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6257}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6255[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6256}, {x64Token::EOT}};
void x64Parser::TokenFunc6255(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6254[] = {
    {x64Token::NUMBER, 4, 0, 0, NULL, &x64Parser::TokenFunc6255, x64Parser::tokenBranches6255}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6253[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6254}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6262_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6262_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6262_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 21, 0, 0, 0, '&'},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6262_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 27, 5, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 21, 0, 0, 0, '>'},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6262(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6262_15;
    operand.values[16] = tokenCoding6262_16;
    operand.values[17] = tokenCoding6262_17;
    operand.values[18] = tokenCoding6262_18;
}
x64Token x64Parser::tokenBranches6261[] = {{
                                               x64Token::ADDRESSCLASS,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6262,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6260[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6261}, {x64Token::EOT}};
void x64Parser::TokenFunc6260(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6259[] = {
    {x64Token::NUMBER, 2, 0, 0, NULL, &x64Parser::TokenFunc6260, x64Parser::tokenBranches6260}, {x64Token::EOT}};
void x64Parser::TokenFunc6275(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6274[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6275,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6273[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6274}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6272[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6273},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6279(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6278[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6279,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6277[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6278}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6276[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6277},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6283(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6282[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6283,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6281[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6282}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6280[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6281},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6287(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6286[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6287,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6285[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6286}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6284[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6285},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6291(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6290[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6291,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6289[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6290}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6288[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6289},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6295(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6294[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6295,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6293[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6294}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6292[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6293},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6299(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6298[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6299,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6297[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6298}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6296[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6297},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6303(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6302[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6303,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6301[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6302}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6300[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6301},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6307(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6306[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6307,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6305[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6306}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6310_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6310_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6310_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6310(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6310_15;
    operand.values[16] = tokenCoding6310_16;
    operand.values[18] = tokenCoding6310_18;
}
x64Token x64Parser::tokenBranches6309[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6310,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6312_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6312_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6312_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6312(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6312_15;
    operand.values[16] = tokenCoding6312_16;
    operand.values[18] = tokenCoding6312_18;
}
x64Token x64Parser::tokenBranches6311[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6312,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6308(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6304[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6305},
                                           {
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6308,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6309},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6311},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6316(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6315[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6316,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6314[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6315}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6313[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6314},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6320(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6319[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6320,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6318[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6319}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6317[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6318},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6324_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6324_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6324_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6324(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6324_15;
    operand.values[16] = tokenCoding6324_16;
    operand.values[18] = tokenCoding6324_18;
}
x64Token x64Parser::tokenBranches6323[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6324,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6326_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6326_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6326_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6326(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6326_15;
    operand.values[16] = tokenCoding6326_16;
    operand.values[18] = tokenCoding6326_18;
}
x64Token x64Parser::tokenBranches6325[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6326,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6322(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6321[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6322,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6323},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6325},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6337_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6337_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6337(x64Operand& operand, int tokenPos)
{
    operand.values[17] = tokenCoding6337_17;
    operand.values[18] = tokenCoding6337_18;
}
x64Token x64Parser::tokenBranches6336[] = {{
                                               x64Token::ADDRESSCLASS,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6337,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6339_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6339_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 223, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6339(x64Operand& operand, int tokenPos)
{
    operand.values[17] = tokenCoding6339_17;
    operand.values[18] = tokenCoding6339_18;
}
x64Token x64Parser::tokenBranches6338[] = {{
                                               x64Token::ADDRESSCLASS,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6339,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6347_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6347_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6347_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6347_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6347(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6347_15;
    operand.values[16] = tokenCoding6347_16;
    operand.values[17] = tokenCoding6347_17;
    operand.values[18] = tokenCoding6347_18;
}
x64Token x64Parser::tokenBranches6346[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6347,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6349_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6349_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6349_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6349_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6349(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6349_15;
    operand.values[16] = tokenCoding6349_16;
    operand.values[17] = tokenCoding6349_17;
    operand.values[18] = tokenCoding6349_18;
}
x64Token x64Parser::tokenBranches6348[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6349,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6351_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6351_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6351_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6351_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6351(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6351_15;
    operand.values[16] = tokenCoding6351_16;
    operand.values[17] = tokenCoding6351_17;
    operand.values[18] = tokenCoding6351_18;
}
x64Token x64Parser::tokenBranches6350[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6351,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6345[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6346},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6348},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6350},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6359_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6359_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6359_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6359_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6359(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6359_15;
    operand.values[16] = tokenCoding6359_16;
    operand.values[17] = tokenCoding6359_17;
    operand.values[18] = tokenCoding6359_18;
}
x64Token x64Parser::tokenBranches6358[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6359,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6361_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6361_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6361_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6361_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6361(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6361_15;
    operand.values[16] = tokenCoding6361_16;
    operand.values[17] = tokenCoding6361_17;
    operand.values[18] = tokenCoding6361_18;
}
x64Token x64Parser::tokenBranches6360[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6361,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6357[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6358},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6360},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6367_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6367_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6367_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6367_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 217, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6367(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6367_15;
    operand.values[16] = tokenCoding6367_16;
    operand.values[17] = tokenCoding6367_17;
    operand.values[18] = tokenCoding6367_18;
}
x64Token x64Parser::tokenBranches6366[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6367,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6369_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6369_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6369_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6369_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6369(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6369_15;
    operand.values[16] = tokenCoding6369_16;
    operand.values[17] = tokenCoding6369_17;
    operand.values[18] = tokenCoding6369_18;
}
x64Token x64Parser::tokenBranches6368[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6369,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6371_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6371_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6371_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6371_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 219, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6371(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6371_15;
    operand.values[16] = tokenCoding6371_16;
    operand.values[17] = tokenCoding6371_17;
    operand.values[18] = tokenCoding6371_18;
}
x64Token x64Parser::tokenBranches6370[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6371,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6365_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6365_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 217, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6365(x64Operand& operand, int tokenPos)
{
    operand.values[17] = tokenCoding6365_17;
    operand.values[18] = tokenCoding6365_18;
}
x64Token x64Parser::tokenBranches6364[] = {{
                                               x64Token::ADDRESSCLASS,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6365,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6366},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6368},
                                           {x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6370},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6375_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6375_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6375_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6375_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6375(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6375_15;
    operand.values[16] = tokenCoding6375_16;
    operand.values[17] = tokenCoding6375_17;
    operand.values[18] = tokenCoding6375_18;
}
x64Token x64Parser::tokenBranches6374[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6375,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6373[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6374}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6377_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6377_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6377_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6377_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6377(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6377_15;
    operand.values[16] = tokenCoding6377_16;
    operand.values[17] = tokenCoding6377_17;
    operand.values[18] = tokenCoding6377_18;
}
x64Token x64Parser::tokenBranches6376[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6377,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6388_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6388_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6388_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6388_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6388(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6388_15;
    operand.values[16] = tokenCoding6388_16;
    operand.values[17] = tokenCoding6388_17;
    operand.values[18] = tokenCoding6388_18;
}
x64Token x64Parser::tokenBranches6387[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6388,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6395_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6395_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6395_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6395_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6395(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6395_15;
    operand.values[16] = tokenCoding6395_16;
    operand.values[17] = tokenCoding6395_17;
    operand.values[18] = tokenCoding6395_18;
}
x64Token x64Parser::tokenBranches6394[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6395,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6397_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6397_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6397_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6397_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6397(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6397_15;
    operand.values[16] = tokenCoding6397_16;
    operand.values[17] = tokenCoding6397_17;
    operand.values[18] = tokenCoding6397_18;
}
x64Token x64Parser::tokenBranches6396[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6397,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6406_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6406_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6406_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6406_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 217, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6406(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6406_15;
    operand.values[16] = tokenCoding6406_16;
    operand.values[17] = tokenCoding6406_17;
    operand.values[18] = tokenCoding6406_18;
}
x64Token x64Parser::tokenBranches6405[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6406,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6408_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6408_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6408_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6408_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6408(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6408_15;
    operand.values[16] = tokenCoding6408_16;
    operand.values[17] = tokenCoding6408_17;
    operand.values[18] = tokenCoding6408_18;
}
x64Token x64Parser::tokenBranches6407[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6408,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6404_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6404_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6404(x64Operand& operand, int tokenPos)
{
    operand.values[17] = tokenCoding6404_17;
    operand.values[18] = tokenCoding6404_18;
}
x64Token x64Parser::tokenBranches6403[] = {{
                                               x64Token::ADDRESSCLASS,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6404,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6405},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6407},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6411_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6411_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6411_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6411_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6411(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6411_15;
    operand.values[16] = tokenCoding6411_16;
    operand.values[17] = tokenCoding6411_17;
    operand.values[18] = tokenCoding6411_18;
}
x64Token x64Parser::tokenBranches6410[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6411,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6409[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6410}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6414_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6414_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6414_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6414_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6414(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6414_15;
    operand.values[16] = tokenCoding6414_16;
    operand.values[17] = tokenCoding6414_17;
    operand.values[18] = tokenCoding6414_18;
}
x64Token x64Parser::tokenBranches6413[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6414,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6412[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6413}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6416_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6416_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6416_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6416_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6416(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6416_15;
    operand.values[16] = tokenCoding6416_16;
    operand.values[17] = tokenCoding6416_17;
    operand.values[18] = tokenCoding6416_18;
}
x64Token x64Parser::tokenBranches6415[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6416,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6418_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6418_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6418_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6418_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6418(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6418_15;
    operand.values[16] = tokenCoding6418_16;
    operand.values[17] = tokenCoding6418_17;
    operand.values[18] = tokenCoding6418_18;
}
x64Token x64Parser::tokenBranches6417[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6418,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6422_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6422_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6422_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6422_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 217, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6422(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6422_15;
    operand.values[16] = tokenCoding6422_16;
    operand.values[17] = tokenCoding6422_17;
    operand.values[18] = tokenCoding6422_18;
}
x64Token x64Parser::tokenBranches6421[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6422,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6424_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6424_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6424_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6424_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6424(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6424_15;
    operand.values[16] = tokenCoding6424_16;
    operand.values[17] = tokenCoding6424_17;
    operand.values[18] = tokenCoding6424_18;
}
x64Token x64Parser::tokenBranches6423[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6424,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6426_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6426_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6426_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6426_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 219, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6426(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6426_15;
    operand.values[16] = tokenCoding6426_16;
    operand.values[17] = tokenCoding6426_17;
    operand.values[18] = tokenCoding6426_18;
}
x64Token x64Parser::tokenBranches6425[] = {{
                                               x64Token::ADDRESSCLASS,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6426,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6420_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6420_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6420(x64Operand& operand, int tokenPos)
{
    operand.values[17] = tokenCoding6420_17;
    operand.values[18] = tokenCoding6420_18;
}
x64Token x64Parser::tokenBranches6419[] = {{
                                               x64Token::ADDRESSCLASS,
                                               12,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6420,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6421},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6423},
                                           {x64Token::TOKEN, 12, 0, 0, NULL, NULL, x64Parser::tokenBranches6425},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6429_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6429_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6429_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6429_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6429(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6429_15;
    operand.values[16] = tokenCoding6429_16;
    operand.values[17] = tokenCoding6429_17;
    operand.values[18] = tokenCoding6429_18;
}
x64Token x64Parser::tokenBranches6428[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6429,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6430(x64Operand& operand, int tokenPos) { operand.operandCoding = 503; }
x64Token x64Parser::tokenBranches6427[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6428},
                                           {
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6430,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6433_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6433_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6433_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6433_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6433(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6433_15;
    operand.values[16] = tokenCoding6433_16;
    operand.values[17] = tokenCoding6433_17;
    operand.values[18] = tokenCoding6433_18;
}
x64Token x64Parser::tokenBranches6432[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6433,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6434(x64Operand& operand, int tokenPos) { operand.operandCoding = 504; }
x64Token x64Parser::tokenBranches6431[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6432},
                                           {
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6434,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6444(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6443[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6444,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6442[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6443}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6441[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6442},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6448(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6447[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6448,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6446[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6447}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6445[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6446},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6457(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6456[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6457,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6455[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6456}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6454[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6455},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6461(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 462;
    operand.values[14] = new Coding[2];
    CleanupValues.push_back(operand.values[14]);
    operand.values[14]->type = Coding::reg;
    operand.values[14]->val = inputTokens[tokenPos]->val->ival;
    operand.values[14]->bits = 0;
    operand.values[14]->field = 0;
    operand.values[14]->unary = 0;
    operand.values[14]->binary = 0;
    operand.values[14][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6460[] = {{
                                               x64Token::REGISTERCLASS,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6461,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6459[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6460}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6458[] = {{x64Token::REGISTER, 99, 0, 0, NULL, NULL, x64Parser::tokenBranches6459},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6463_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6463_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6463_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6463_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 174, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6463(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6463_15;
    operand.values[16] = tokenCoding6463_16;
    operand.values[17] = tokenCoding6463_17;
    operand.values[18] = tokenCoding6463_18;
}
x64Token x64Parser::tokenBranches6462[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6463,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6465_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6465_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6465_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6465_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 174, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6465(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6465_15;
    operand.values[16] = tokenCoding6465_16;
    operand.values[17] = tokenCoding6465_17;
    operand.values[18] = tokenCoding6465_18;
}
x64Token x64Parser::tokenBranches6464[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6465,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6476(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 505;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6475[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6476,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6503_15[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6503_16[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6503_17[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6503_18[] = {
    {CODING_NAME("isigned") Coding::stateFunc, 3},
    {CODING_NAME("isigned")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6503(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 511;
    operand.values[27] = new Coding[2];
    CleanupValues.push_back(operand.values[27]);
    operand.values[27]->type = Coding::number;
    operand.values[27]->val = operands.size();
    operand.values[27]->bits = 0;
    operand.values[27]->field = 0;
    operand.values[27]->unary = 0;
    operand.values[27]->binary = 0;
    operand.values[27][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6503_15;
    operand.values[16] = tokenCoding6503_16;
    operand.values[17] = tokenCoding6503_17;
    operand.values[18] = tokenCoding6503_18;
}
x64Token x64Parser::tokenBranches6502[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6503,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6509_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6509_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6509_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6509_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6509(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 512;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6509_15;
    operand.values[16] = tokenCoding6509_16;
    operand.values[17] = tokenCoding6509_17;
    operand.values[18] = tokenCoding6509_18;
}
x64Token x64Parser::tokenBranches6501[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6502},
                                           {
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6509,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6500[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6501}, {x64Token::EOT}};
void x64Parser::TokenFunc6480(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 506;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6500_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6500_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6500_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6500_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6500(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6500_15;
    operand.values[16] = tokenCoding6500_16;
    operand.values[17] = tokenCoding6500_17;
    operand.values[18] = tokenCoding6500_18;
}
x64Token x64Parser::tokenBranches6479[] = {
    {
        x64Token::NUMBER,
        4,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6480,
    },
    {x64Token::ADDRESSCLASS, 4, 1, 0, NULL, &x64Parser::TokenFunc6500, x64Parser::tokenBranches6500},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6474[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6475},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6479},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6473[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6474}, {x64Token::EOT}};
void x64Parser::TokenFunc6484(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 507;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6483[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6484,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6520_15[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6520_16[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6520_17[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6520_18[] = {
    {CODING_NAME("isigned") Coding::stateFunc, 4},
    {CODING_NAME("isigned")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6520(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 511;
    operand.values[27] = new Coding[2];
    CleanupValues.push_back(operand.values[27]);
    operand.values[27]->type = Coding::number;
    operand.values[27]->val = operands.size();
    operand.values[27]->bits = 0;
    operand.values[27]->field = 0;
    operand.values[27]->unary = 0;
    operand.values[27]->binary = 0;
    operand.values[27][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6520_15;
    operand.values[16] = tokenCoding6520_16;
    operand.values[17] = tokenCoding6520_17;
    operand.values[18] = tokenCoding6520_18;
}
x64Token x64Parser::tokenBranches6519[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6520,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6526_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6526_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6526_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6526_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6526(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6526_15;
    operand.values[16] = tokenCoding6526_16;
    operand.values[17] = tokenCoding6526_17;
    operand.values[18] = tokenCoding6526_18;
}
x64Token x64Parser::tokenBranches6518[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6519},
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6526,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6517[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6518}, {x64Token::EOT}};
void x64Parser::TokenFunc6488(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 508;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6517_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6517_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6517_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6517_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6517(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6517_15;
    operand.values[16] = tokenCoding6517_16;
    operand.values[17] = tokenCoding6517_17;
    operand.values[18] = tokenCoding6517_18;
}
x64Token x64Parser::tokenBranches6487[] = {
    {
        x64Token::NUMBER,
        5,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6488,
    },
    {x64Token::ADDRESSCLASS, 5, 1, 0, NULL, &x64Parser::TokenFunc6517, x64Parser::tokenBranches6517},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6482[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6483},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6487},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6481[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6482}, {x64Token::EOT}};
void x64Parser::TokenFunc6492(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 509;
    operand.values[23] = new Coding[2];
    CleanupValues.push_back(operand.values[23]);
    operand.values[23]->type = Coding::number;
    operand.values[23]->val = operands.size();
    operand.values[23]->bits = 0;
    operand.values[23]->field = 0;
    operand.values[23]->unary = 0;
    operand.values[23]->binary = 0;
    operand.values[23][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6491[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6492,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6537_15[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6537_16[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6537_17[] = {
    {CODING_NAME("isigned")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6537_18[] = {
    {CODING_NAME("isigned") Coding::stateFunc, 5},
    {CODING_NAME("isigned")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6537(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 511;
    operand.values[27] = new Coding[2];
    CleanupValues.push_back(operand.values[27]);
    operand.values[27]->type = Coding::number;
    operand.values[27]->val = operands.size();
    operand.values[27]->bits = 0;
    operand.values[27]->field = 0;
    operand.values[27]->unary = 0;
    operand.values[27]->binary = 0;
    operand.values[27][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6537_15;
    operand.values[16] = tokenCoding6537_16;
    operand.values[17] = tokenCoding6537_17;
    operand.values[18] = tokenCoding6537_18;
}
x64Token x64Parser::tokenBranches6536[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6537,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6543_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6543_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6543_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6543_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6543(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding6543_15;
    operand.values[16] = tokenCoding6543_16;
    operand.values[17] = tokenCoding6543_17;
    operand.values[18] = tokenCoding6543_18;
}
x64Token x64Parser::tokenBranches6535[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6536},
                                           {
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6543,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6534[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6535}, {x64Token::EOT}};
void x64Parser::TokenFunc6496(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 510;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6534_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6534_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6534_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6534_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6534(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6534_15;
    operand.values[16] = tokenCoding6534_16;
    operand.values[17] = tokenCoding6534_17;
    operand.values[18] = tokenCoding6534_18;
}
x64Token x64Parser::tokenBranches6495[] = {
    {
        x64Token::NUMBER,
        5,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6496,
    },
    {x64Token::ADDRESSCLASS, 7, 1, 0, NULL, &x64Parser::TokenFunc6534, x64Parser::tokenBranches6534},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6490[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6491},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches6495},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6489[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6490}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6549_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6549_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6549_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6549_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6549(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6549_15;
    operand.values[16] = tokenCoding6549_16;
    operand.values[17] = tokenCoding6549_17;
    operand.values[18] = tokenCoding6549_18;
}
x64Token x64Parser::tokenBranches6548[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6549,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6551_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6551_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6551_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6551_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6551(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6551_15;
    operand.values[16] = tokenCoding6551_16;
    operand.values[17] = tokenCoding6551_17;
    operand.values[18] = tokenCoding6551_18;
}
x64Token x64Parser::tokenBranches6550[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6551,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6553_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6553_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6553_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6553_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6553(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6553_15;
    operand.values[16] = tokenCoding6553_16;
    operand.values[17] = tokenCoding6553_17;
    operand.values[18] = tokenCoding6553_18;
}
x64Token x64Parser::tokenBranches6552[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6553,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6555_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6555_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6555_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6555_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6555(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6555_15;
    operand.values[16] = tokenCoding6555_16;
    operand.values[17] = tokenCoding6555_17;
    operand.values[18] = tokenCoding6555_18;
}
x64Token x64Parser::tokenBranches6554[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6555,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6473(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc6481(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc6489(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6472[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc6473, x64Parser::tokenBranches6473},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc6481, x64Parser::tokenBranches6481},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc6489, x64Parser::tokenBranches6489},
    {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6548},
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6550},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6552},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6554},
    {x64Token::EOT}};
void x64Parser::TokenFunc6560(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 514;
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6559[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6560,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6575(x64Operand& operand, int tokenPos) { operand.operandCoding = 518; }
x64Token x64Parser::tokenBranches6558[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6559},
                                           {
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6575,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6557[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6558}, {x64Token::EOT}};
void x64Parser::TokenFunc6564(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 515;
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6563[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6564,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6578(x64Operand& operand, int tokenPos) { operand.operandCoding = 519; }
x64Token x64Parser::tokenBranches6562[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6563},
                                           {
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6578,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6561[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6562}, {x64Token::EOT}};
void x64Parser::TokenFunc6568(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 516;
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6567[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6568,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6581(x64Operand& operand, int tokenPos) { operand.operandCoding = 520; }
x64Token x64Parser::tokenBranches6566[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6567},
                                           {
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6581,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6565[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6566}, {x64Token::EOT}};
void x64Parser::TokenFunc6572(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 517;
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6571[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6572,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6584(x64Operand& operand, int tokenPos) { operand.operandCoding = 521; }
x64Token x64Parser::tokenBranches6570[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6571},
                                           {
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6584,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6569[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6570}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6556[] = {{x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6557},
                                           {x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6561},
                                           {x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6565},
                                           {x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches6569},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6593(x64Operand& operand, int tokenPos) { operand.operandCoding = 522; }
x64Token x64Parser::tokenBranches6592[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6593,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6591[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6592}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6590[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6591}, {x64Token::EOT}};
void x64Parser::TokenFunc6609(x64Operand& operand, int tokenPos) { operand.operandCoding = 524; }
x64Token x64Parser::tokenBranches6608[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6609,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6607[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6608}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6606[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6607}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6589[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6590},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6606},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6588[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6589}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6587[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6588}, {x64Token::EOT}};
void x64Parser::TokenFunc6601(x64Operand& operand, int tokenPos) { operand.operandCoding = 523; }
x64Token x64Parser::tokenBranches6600[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6601,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6599[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6600}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6598[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6599}, {x64Token::EOT}};
void x64Parser::TokenFunc6617(x64Operand& operand, int tokenPos) { operand.operandCoding = 525; }
x64Token x64Parser::tokenBranches6616[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6617,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6615[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6616}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6614[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6615}, {x64Token::EOT}};
void x64Parser::TokenFunc6631(x64Operand& operand, int tokenPos) { operand.operandCoding = 527; }
x64Token x64Parser::tokenBranches6630[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6631,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6629[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6630}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6628[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6629}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6597[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6598},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6614},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6628},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6596[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6597}, {x64Token::EOT}};
void x64Parser::TokenFunc6623(x64Operand& operand, int tokenPos) { operand.operandCoding = 526; }
x64Token x64Parser::tokenBranches6622[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6623,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6621[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6622}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6620[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6621}, {x64Token::EOT}};
void x64Parser::TokenFunc6596(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6595[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6596, x64Parser::tokenBranches6596},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6620},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6586[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6587},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6595},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6639(x64Operand& operand, int tokenPos) { operand.operandCoding = 528; }
x64Token x64Parser::tokenBranches6638[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6639,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6637[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6638}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6636[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6637}, {x64Token::EOT}};
void x64Parser::TokenFunc6655(x64Operand& operand, int tokenPos) { operand.operandCoding = 530; }
x64Token x64Parser::tokenBranches6654[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6655,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6653[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6654}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6652[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6653}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6635[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6636},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6652},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6634[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6635}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6633[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6634}, {x64Token::EOT}};
void x64Parser::TokenFunc6647(x64Operand& operand, int tokenPos) { operand.operandCoding = 529; }
x64Token x64Parser::tokenBranches6646[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6647,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6645[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6646}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6644[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6645}, {x64Token::EOT}};
void x64Parser::TokenFunc6663(x64Operand& operand, int tokenPos) { operand.operandCoding = 531; }
x64Token x64Parser::tokenBranches6662[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6663,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6661[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6662}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6660[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6661}, {x64Token::EOT}};
void x64Parser::TokenFunc6677(x64Operand& operand, int tokenPos) { operand.operandCoding = 533; }
x64Token x64Parser::tokenBranches6676[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6677,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6675[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6676}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6674[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6675}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6643[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6644},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6660},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6674},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6642[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6643}, {x64Token::EOT}};
void x64Parser::TokenFunc6669(x64Operand& operand, int tokenPos) { operand.operandCoding = 532; }
x64Token x64Parser::tokenBranches6668[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6669,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6667[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6668}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6666[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6667}, {x64Token::EOT}};
void x64Parser::TokenFunc6642(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6641[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6642, x64Parser::tokenBranches6642},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6666},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6632[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6633},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6641},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6685(x64Operand& operand, int tokenPos) { operand.operandCoding = 534; }
x64Token x64Parser::tokenBranches6684[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6685,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6683[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6684}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6682[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6683}, {x64Token::EOT}};
void x64Parser::TokenFunc6701(x64Operand& operand, int tokenPos) { operand.operandCoding = 536; }
x64Token x64Parser::tokenBranches6700[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6701,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6699[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6700}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6698[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6699}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6681[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6682},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6698},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6680[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6681}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6679[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6680}, {x64Token::EOT}};
void x64Parser::TokenFunc6693(x64Operand& operand, int tokenPos) { operand.operandCoding = 535; }
x64Token x64Parser::tokenBranches6692[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6693,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6691[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6692}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6690[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6691}, {x64Token::EOT}};
void x64Parser::TokenFunc6709(x64Operand& operand, int tokenPos) { operand.operandCoding = 537; }
x64Token x64Parser::tokenBranches6708[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6709,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6707[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6708}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6706[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6707}, {x64Token::EOT}};
void x64Parser::TokenFunc6723(x64Operand& operand, int tokenPos) { operand.operandCoding = 539; }
x64Token x64Parser::tokenBranches6722[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6723,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6721[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6722}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6720[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6721}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6689[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches6690},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches6706},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6720},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6688[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6689}, {x64Token::EOT}};
void x64Parser::TokenFunc6715(x64Operand& operand, int tokenPos) { operand.operandCoding = 538; }
x64Token x64Parser::tokenBranches6714[] = {{
                                               x64Token::REGISTER,
                                               20,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6715,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6713[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6714}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6712[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches6713}, {x64Token::EOT}};
void x64Parser::TokenFunc6688(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6687[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6688, x64Parser::tokenBranches6688},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches6712},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6678[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches6679},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6687},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6585[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6586},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6632},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6678},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6730(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 540;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6729[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6730,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6728[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6729}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6736_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6736_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6736_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6736_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6736(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6736_15;
    operand.values[16] = tokenCoding6736_16;
    operand.values[17] = tokenCoding6736_17;
    operand.values[18] = tokenCoding6736_18;
}
x64Token x64Parser::tokenBranches6735[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6736,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6740(x64Operand& operand, int tokenPos) { operand.operandCoding = 541; }
x64Token x64Parser::tokenBranches6739[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6740,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6748(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 542;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6747[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6748,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6750(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 543;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6749[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6750,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6761(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 544;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6760[] = {{
                                               x64Token::NUMBER,
                                               6,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6761,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6766(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 545;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6765[] = {{
                                               x64Token::NUMBER,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6766,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6759[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches6760},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches6765},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6758[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6759}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6775_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6775_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6775_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6775_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6775(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6775_15;
    operand.values[16] = tokenCoding6775_16;
    operand.values[17] = tokenCoding6775_17;
    operand.values[18] = tokenCoding6775_18;
}
x64Token x64Parser::tokenBranches6774[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6775,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6778_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6778_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6778_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6778_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6778(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6778_15;
    operand.values[16] = tokenCoding6778_16;
    operand.values[17] = tokenCoding6778_17;
    operand.values[18] = tokenCoding6778_18;
}
x64Token x64Parser::tokenBranches6777[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6778,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6758(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::number;
    operand.values[1]->val = operands.size();
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc6768(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 546;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc6770(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 547;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6772_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6772_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6772_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6772_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6772(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6772_15;
    operand.values[16] = tokenCoding6772_16;
    operand.values[17] = tokenCoding6772_17;
    operand.values[18] = tokenCoding6772_18;
}
x64Token x64Parser::tokenBranches6757[] = {
    {x64Token::NUMBER, 4, 0, 0, NULL, &x64Parser::TokenFunc6758, x64Parser::tokenBranches6758},
    {
        x64Token::NUMBER,
        6,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6768,
    },
    {
        x64Token::NUMBER,
        7,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6770,
    },
    {
        x64Token::ADDRESSCLASS,
        1,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc6772,
    },
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6774},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6777},
    {x64Token::EOT}};
void x64Parser::TokenFunc6780(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 548;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6779[] = {{
                                               x64Token::NUMBER,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6780,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6782(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 549;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc6784(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 550;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6781[] = {{
                                               x64Token::NUMBER,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6782,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               15,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6784,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6792_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6792_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6792_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6792_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6792(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6792_15;
    operand.values[16] = tokenCoding6792_16;
    operand.values[17] = tokenCoding6792_17;
    operand.values[18] = tokenCoding6792_18;
}
x64Token x64Parser::tokenBranches6791[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6792,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6794_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6794_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6794_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6794_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6794(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6794_15;
    operand.values[16] = tokenCoding6794_16;
    operand.values[17] = tokenCoding6794_17;
    operand.values[18] = tokenCoding6794_18;
}
x64Token x64Parser::tokenBranches6793[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6794,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6796_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6796_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6796_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6796_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6796(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6796_15;
    operand.values[16] = tokenCoding6796_16;
    operand.values[17] = tokenCoding6796_17;
    operand.values[18] = tokenCoding6796_18;
}
x64Token x64Parser::tokenBranches6795[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6796,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6785(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 549;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc6786(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 550;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding6787_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6787_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6787_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6787_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6787(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6787_15;
    operand.values[16] = tokenCoding6787_16;
    operand.values[17] = tokenCoding6787_17;
    operand.values[18] = tokenCoding6787_18;
}
Coding x64Parser::tokenCoding6788_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6788_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6788_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6788_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6788(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6788_15;
    operand.values[16] = tokenCoding6788_16;
    operand.values[17] = tokenCoding6788_17;
    operand.values[18] = tokenCoding6788_18;
}
Coding x64Parser::tokenCoding6789_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6789_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6789_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6789_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6789(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6789_15;
    operand.values[16] = tokenCoding6789_16;
    operand.values[17] = tokenCoding6789_17;
    operand.values[18] = tokenCoding6789_18;
}
Coding x64Parser::tokenCoding6790_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6790_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6790_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6790_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6790(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6790_15;
    operand.values[16] = tokenCoding6790_16;
    operand.values[17] = tokenCoding6790_17;
    operand.values[18] = tokenCoding6790_18;
}
x64Token x64Parser::tokenBranches6756[] = {{x64Token::TOKEN, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches6757},
                                           {x64Token::TOKEN, 13, 0, 0, NULL, NULL, x64Parser::tokenBranches6779},
                                           {x64Token::TOKEN, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches6781},
                                           {
                                               x64Token::NUMBER,
                                               13,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6785,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               15,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6786,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6787,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6788,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6789,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6790,
                                           },
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6791},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6793},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6795},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6830_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6830_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6830_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6830_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6830(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6830_15;
    operand.values[16] = tokenCoding6830_16;
    operand.values[17] = tokenCoding6830_17;
    operand.values[18] = tokenCoding6830_18;
}
x64Token x64Parser::tokenBranches6829[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6830,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6837(x64Operand& operand, int tokenPos) { operand.operandCoding = 551; }
x64Token x64Parser::tokenBranches6836[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6837,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6849(x64Operand& operand, int tokenPos) { operand.operandCoding = 553; }
x64Token x64Parser::tokenBranches6848[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6849,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6835[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6836},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6848},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6834[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6835}, {x64Token::EOT}};
void x64Parser::TokenFunc6843(x64Operand& operand, int tokenPos) { operand.operandCoding = 552; }
x64Token x64Parser::tokenBranches6842[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6843,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6855(x64Operand& operand, int tokenPos) { operand.operandCoding = 554; }
x64Token x64Parser::tokenBranches6854[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6855,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6865(x64Operand& operand, int tokenPos) { operand.operandCoding = 556; }
x64Token x64Parser::tokenBranches6864[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6865,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6841[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6842},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6854},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6864},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6840[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6841}, {x64Token::EOT}};
void x64Parser::TokenFunc6859(x64Operand& operand, int tokenPos) { operand.operandCoding = 555; }
x64Token x64Parser::tokenBranches6858[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6859,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6840(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6833[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6834},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6840, x64Parser::tokenBranches6840},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6858},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6832[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6833}, {x64Token::EOT}};
void x64Parser::TokenFunc6871(x64Operand& operand, int tokenPos) { operand.operandCoding = 557; }
x64Token x64Parser::tokenBranches6870[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6871,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6883(x64Operand& operand, int tokenPos) { operand.operandCoding = 559; }
x64Token x64Parser::tokenBranches6882[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6883,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6869[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6870},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6882},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6868[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6869}, {x64Token::EOT}};
void x64Parser::TokenFunc6877(x64Operand& operand, int tokenPos) { operand.operandCoding = 558; }
x64Token x64Parser::tokenBranches6876[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6877,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6889(x64Operand& operand, int tokenPos) { operand.operandCoding = 560; }
x64Token x64Parser::tokenBranches6888[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6889,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6899(x64Operand& operand, int tokenPos) { operand.operandCoding = 562; }
x64Token x64Parser::tokenBranches6898[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6899,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6875[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6876},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6888},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6898},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6874[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6875}, {x64Token::EOT}};
void x64Parser::TokenFunc6893(x64Operand& operand, int tokenPos) { operand.operandCoding = 561; }
x64Token x64Parser::tokenBranches6892[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6893,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6874(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6867[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6868},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6874, x64Parser::tokenBranches6874},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6892},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6866[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6867}, {x64Token::EOT}};
void x64Parser::TokenFunc6905(x64Operand& operand, int tokenPos) { operand.operandCoding = 563; }
x64Token x64Parser::tokenBranches6904[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6905,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6917(x64Operand& operand, int tokenPos) { operand.operandCoding = 565; }
x64Token x64Parser::tokenBranches6916[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6917,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6903[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6904},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6916},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6902[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6903}, {x64Token::EOT}};
void x64Parser::TokenFunc6911(x64Operand& operand, int tokenPos) { operand.operandCoding = 564; }
x64Token x64Parser::tokenBranches6910[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6911,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6923(x64Operand& operand, int tokenPos) { operand.operandCoding = 566; }
x64Token x64Parser::tokenBranches6922[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6923,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6933(x64Operand& operand, int tokenPos) { operand.operandCoding = 568; }
x64Token x64Parser::tokenBranches6932[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6933,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6909[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches6910},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6922},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6932},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6908[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6909}, {x64Token::EOT}};
void x64Parser::TokenFunc6927(x64Operand& operand, int tokenPos) { operand.operandCoding = 567; }
x64Token x64Parser::tokenBranches6926[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6927,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6908(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6901[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6902},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6908, x64Parser::tokenBranches6908},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6926},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6900[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6901}, {x64Token::EOT}};
void x64Parser::TokenFunc6939(x64Operand& operand, int tokenPos) { operand.operandCoding = 569; }
x64Token x64Parser::tokenBranches6938[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6939,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6937[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6938},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6936[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6937}, {x64Token::EOT}};
void x64Parser::TokenFunc6945(x64Operand& operand, int tokenPos) { operand.operandCoding = 570; }
x64Token x64Parser::tokenBranches6944[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6945,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6955(x64Operand& operand, int tokenPos) { operand.operandCoding = 572; }
x64Token x64Parser::tokenBranches6954[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6955,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6943[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches6944},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6954},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6942[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6943}, {x64Token::EOT}};
void x64Parser::TokenFunc6949(x64Operand& operand, int tokenPos) { operand.operandCoding = 571; }
x64Token x64Parser::tokenBranches6948[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6949,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6942(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6935[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches6936},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6942, x64Parser::tokenBranches6942},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches6948},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6934[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6935}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6831[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches6832},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches6866},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches6900},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches6934},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6960(x64Operand& operand, int tokenPos) { operand.operandCoding = 573; }
x64Token x64Parser::tokenBranches6959[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6960,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6962(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 574;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6961[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6962,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6964(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 575;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6963[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6964,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6966(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 576;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6965[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6966,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6968(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 576;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6967[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6968,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6970(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 575;
    operand.values[10] = new Coding[2];
    CleanupValues.push_back(operand.values[10]);
    operand.values[10]->type = Coding::number;
    operand.values[10]->val = operands.size();
    operand.values[10]->bits = 0;
    operand.values[10]->field = 0;
    operand.values[10]->unary = 0;
    operand.values[10]->binary = 0;
    operand.values[10][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6969[] = {{
                                               x64Token::NUMBER,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6970,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6974_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6974_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6974_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6974_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6974(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6974_15;
    operand.values[16] = tokenCoding6974_16;
    operand.values[17] = tokenCoding6974_17;
    operand.values[18] = tokenCoding6974_18;
}
x64Token x64Parser::tokenBranches6973[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6974,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding6978_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6978_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6978_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 29, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6978_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6978(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6978_15;
    operand.values[16] = tokenCoding6978_16;
    operand.values[17] = tokenCoding6978_17;
    operand.values[18] = tokenCoding6978_18;
}
x64Token x64Parser::tokenBranches6977[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6978,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6976[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6977}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6981_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6981_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6981_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 30, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6981_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 35, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6981(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6981_15;
    operand.values[16] = tokenCoding6981_16;
    operand.values[17] = tokenCoding6981_17;
    operand.values[18] = tokenCoding6981_18;
}
x64Token x64Parser::tokenBranches6980[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6981,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6979[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6980}, {x64Token::EOT}};
Coding x64Parser::tokenCoding6984_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6984_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6984_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 31, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding6984_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 38, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc6984(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding6984_15;
    operand.values[16] = tokenCoding6984_16;
    operand.values[17] = tokenCoding6984_17;
    operand.values[18] = tokenCoding6984_18;
}
x64Token x64Parser::tokenBranches6983[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6984,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches6982[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6983}, {x64Token::EOT}};
void x64Parser::TokenFunc6990(x64Operand& operand, int tokenPos) { operand.operandCoding = 577; }
x64Token x64Parser::tokenBranches6989[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6990,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6998(x64Operand& operand, int tokenPos) { operand.operandCoding = 578; }
x64Token x64Parser::tokenBranches6997[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc6998,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7012(x64Operand& operand, int tokenPos) { operand.operandCoding = 580; }
x64Token x64Parser::tokenBranches7011[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7012,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6997(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7011(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6996[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc6997, x64Parser::tokenBranches6997},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7011, x64Parser::tokenBranches7011},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6995[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches6996}, {x64Token::EOT}};
void x64Parser::TokenFunc7004(x64Operand& operand, int tokenPos) { operand.operandCoding = 579; }
x64Token x64Parser::tokenBranches7003[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7004,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc6989(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc6995(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7003(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches6988[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc6989, x64Parser::tokenBranches6989},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc6995, x64Parser::tokenBranches6995},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7003, x64Parser::tokenBranches7003},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches6987[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches6988}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6986[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches6987}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches6985[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches6986}, {x64Token::EOT}};
void x64Parser::TokenFunc7018(x64Operand& operand, int tokenPos) { operand.operandCoding = 581; }
x64Token x64Parser::tokenBranches7017[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7018,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7026(x64Operand& operand, int tokenPos) { operand.operandCoding = 582; }
x64Token x64Parser::tokenBranches7025[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7026,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7040(x64Operand& operand, int tokenPos) { operand.operandCoding = 584; }
x64Token x64Parser::tokenBranches7039[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7040,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7025(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7039(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7024[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7025, x64Parser::tokenBranches7025},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7039, x64Parser::tokenBranches7039},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7023[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7024}, {x64Token::EOT}};
void x64Parser::TokenFunc7032(x64Operand& operand, int tokenPos) { operand.operandCoding = 583; }
x64Token x64Parser::tokenBranches7031[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7032,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7017(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7023(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7031(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7016[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7017, x64Parser::tokenBranches7017},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7023, x64Parser::tokenBranches7023},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7031, x64Parser::tokenBranches7031},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7015[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7016}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7014[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7015}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7013[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7014}, {x64Token::EOT}};
void x64Parser::TokenFunc7046(x64Operand& operand, int tokenPos) { operand.operandCoding = 585; }
x64Token x64Parser::tokenBranches7045[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7046,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7054(x64Operand& operand, int tokenPos) { operand.operandCoding = 586; }
x64Token x64Parser::tokenBranches7053[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7054,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7068(x64Operand& operand, int tokenPos) { operand.operandCoding = 588; }
x64Token x64Parser::tokenBranches7067[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7068,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7053(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7067(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7052[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7053, x64Parser::tokenBranches7053},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7067, x64Parser::tokenBranches7067},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7051[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7052}, {x64Token::EOT}};
void x64Parser::TokenFunc7060(x64Operand& operand, int tokenPos) { operand.operandCoding = 587; }
x64Token x64Parser::tokenBranches7059[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7060,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7045(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7051(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7059(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7044[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7045, x64Parser::tokenBranches7045},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7051, x64Parser::tokenBranches7051},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7059, x64Parser::tokenBranches7059},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7043[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7044}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7042[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7043}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7041[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7042}, {x64Token::EOT}};
void x64Parser::TokenFunc7072(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 589;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7092_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7092_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7092_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7092_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7092(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7092_15;
    operand.values[16] = tokenCoding7092_16;
    operand.values[17] = tokenCoding7092_17;
    operand.values[18] = tokenCoding7092_18;
}
x64Token x64Parser::tokenBranches7071[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7072,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7092,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7070[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7071}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7069[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7070}, {x64Token::EOT}};
void x64Parser::TokenFunc7076(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 590;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7096_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7096_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7096_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7096_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7096_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 138, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7096(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7096_15;
    operand.values[16] = tokenCoding7096_16;
    operand.values[22] = tokenCoding7096_22;
    operand.values[17] = tokenCoding7096_17;
    operand.values[18] = tokenCoding7096_18;
}
x64Token x64Parser::tokenBranches7075[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7076,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7096,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7074[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7075}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7073[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7074}, {x64Token::EOT}};
void x64Parser::TokenFunc7080(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 591;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7100_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7100_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7100_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7100_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7100(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7100_15;
    operand.values[16] = tokenCoding7100_16;
    operand.values[17] = tokenCoding7100_17;
    operand.values[18] = tokenCoding7100_18;
}
x64Token x64Parser::tokenBranches7079[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7080,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7100,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7078[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7079}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7077[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7078}, {x64Token::EOT}};
void x64Parser::TokenFunc7084(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 592;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7104_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7104_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7104_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7104_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7104(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7104_15;
    operand.values[16] = tokenCoding7104_16;
    operand.values[17] = tokenCoding7104_17;
    operand.values[18] = tokenCoding7104_18;
}
x64Token x64Parser::tokenBranches7083[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7084,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7104,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7082[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7083}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7081[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7082}, {x64Token::EOT}};
void x64Parser::TokenFunc7088(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 593;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7108_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7108_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7108_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7108_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 139, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7108(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7108_15;
    operand.values[16] = tokenCoding7108_16;
    operand.values[17] = tokenCoding7108_17;
    operand.values[18] = tokenCoding7108_18;
}
x64Token x64Parser::tokenBranches7087[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7088,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7108,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7086[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7087}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7085[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7086}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7113_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7113_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7113_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7113_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7113(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding7113_15;
    operand.values[16] = tokenCoding7113_16;
    operand.values[17] = tokenCoding7113_17;
    operand.values[18] = tokenCoding7113_18;
}
x64Token x64Parser::tokenBranches7112[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7113,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7111[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7112}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7110[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7111}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7109[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7110},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7118_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7118_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7118_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7118_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7118(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 512;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding7118_15;
    operand.values[16] = tokenCoding7118_16;
    operand.values[17] = tokenCoding7118_17;
    operand.values[18] = tokenCoding7118_18;
}
x64Token x64Parser::tokenBranches7117[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7118,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7116[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7117}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7115[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7116}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7114[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7115},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7123_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7123_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7123_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7123_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7123(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding7123_15;
    operand.values[16] = tokenCoding7123_16;
    operand.values[17] = tokenCoding7123_17;
    operand.values[18] = tokenCoding7123_18;
}
x64Token x64Parser::tokenBranches7122[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7123,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7121[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7122}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7120[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7121}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7119[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7120},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7128_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7128_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7128_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7128_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7128(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding7128_15;
    operand.values[16] = tokenCoding7128_16;
    operand.values[17] = tokenCoding7128_17;
    operand.values[18] = tokenCoding7128_18;
}
x64Token x64Parser::tokenBranches7127[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7128,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7126[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7127}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7125[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7126}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7124[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7125},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7279_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7279_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7279(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[17] = tokenCoding7279_17;
    operand.values[18] = tokenCoding7279_18;
}
x64Token x64Parser::tokenBranches7278[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7279,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7131_15[] = {
    {CODING_NAME("creg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7131_16[] = {
    {CODING_NAME("creg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7131_17[] = {
    {CODING_NAME("creg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 29, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7131_18[] = {
    {CODING_NAME("creg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("creg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7131(x64Operand& operand, int tokenPos)
{
    operand.values[29] = new Coding[2];
    CleanupValues.push_back(operand.values[29]);
    operand.values[29]->type = Coding::reg;
    operand.values[29]->val = inputTokens[tokenPos]->val->ival;
    operand.values[29]->bits = 0;
    operand.values[29]->field = 0;
    operand.values[29]->unary = 0;
    operand.values[29]->binary = 0;
    operand.values[29][1].type = Coding::eot;
    operand.values[15] = tokenCoding7131_15;
    operand.values[16] = tokenCoding7131_16;
    operand.values[17] = tokenCoding7131_17;
    operand.values[18] = tokenCoding7131_18;
}
Coding x64Parser::tokenCoding7134_15[] = {
    {CODING_NAME("dreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7134_16[] = {
    {CODING_NAME("dreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7134_17[] = {
    {CODING_NAME("dreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 30, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7134_18[] = {
    {CODING_NAME("dreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("dreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7134(x64Operand& operand, int tokenPos)
{
    operand.values[30] = new Coding[2];
    CleanupValues.push_back(operand.values[30]);
    operand.values[30]->type = Coding::reg;
    operand.values[30]->val = inputTokens[tokenPos]->val->ival;
    operand.values[30]->bits = 0;
    operand.values[30]->field = 0;
    operand.values[30]->unary = 0;
    operand.values[30]->binary = 0;
    operand.values[30][1].type = Coding::eot;
    operand.values[15] = tokenCoding7134_15;
    operand.values[16] = tokenCoding7134_16;
    operand.values[17] = tokenCoding7134_17;
    operand.values[18] = tokenCoding7134_18;
}
Coding x64Parser::tokenCoding7137_15[] = {
    {CODING_NAME("treg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7137_16[] = {
    {CODING_NAME("treg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7137_17[] = {
    {CODING_NAME("treg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 31, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7137_18[] = {
    {CODING_NAME("treg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("treg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7137(x64Operand& operand, int tokenPos)
{
    operand.values[31] = new Coding[2];
    CleanupValues.push_back(operand.values[31]);
    operand.values[31]->type = Coding::reg;
    operand.values[31]->val = inputTokens[tokenPos]->val->ival;
    operand.values[31]->bits = 0;
    operand.values[31]->field = 0;
    operand.values[31]->unary = 0;
    operand.values[31]->binary = 0;
    operand.values[31][1].type = Coding::eot;
    operand.values[15] = tokenCoding7137_15;
    operand.values[16] = tokenCoding7137_16;
    operand.values[17] = tokenCoding7137_17;
    operand.values[18] = tokenCoding7137_18;
}
Coding x64Parser::tokenCoding7264_15[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7264_16[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7264_17[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7264_18[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7264(x64Operand& operand, int tokenPos)
{
    operand.values[32] = new Coding[2];
    CleanupValues.push_back(operand.values[32]);
    operand.values[32]->type = Coding::reg;
    operand.values[32]->val = inputTokens[tokenPos]->val->ival;
    operand.values[32]->bits = 0;
    operand.values[32]->field = 0;
    operand.values[32]->unary = 0;
    operand.values[32]->binary = 0;
    operand.values[32][1].type = Coding::eot;
    operand.values[15] = tokenCoding7264_15;
    operand.values[16] = tokenCoding7264_16;
    operand.values[17] = tokenCoding7264_17;
    operand.values[18] = tokenCoding7264_18;
}
x64Token x64Parser::tokenBranches7130[] = {{
                                               x64Token::REGISTERCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7131,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               22,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7134,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               23,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7137,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7264,
                                           },
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7278},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7129[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7130}, {x64Token::EOT}};
void x64Parser::TokenFunc7143(x64Operand& operand, int tokenPos) { operand.operandCoding = 594; }
x64Token x64Parser::tokenBranches7142[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7143,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7141[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7142}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7140[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7141}, {x64Token::EOT}};
void x64Parser::TokenFunc7151(x64Operand& operand, int tokenPos) { operand.operandCoding = 595; }
x64Token x64Parser::tokenBranches7150[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7151,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7149[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7150}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7148[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7149}, {x64Token::EOT}};
void x64Parser::TokenFunc7165(x64Operand& operand, int tokenPos) { operand.operandCoding = 597; }
x64Token x64Parser::tokenBranches7164[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7165,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7163[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7164}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7162[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7163}, {x64Token::EOT}};
void x64Parser::TokenFunc7148(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7162(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7147[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7148, x64Parser::tokenBranches7148},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7162, x64Parser::tokenBranches7162},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7146[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7147}, {x64Token::EOT}};
void x64Parser::TokenFunc7157(x64Operand& operand, int tokenPos) { operand.operandCoding = 596; }
x64Token x64Parser::tokenBranches7156[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7157,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7155[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7156}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7154[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7155}, {x64Token::EOT}};
void x64Parser::TokenFunc7140(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7146(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7154(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7139[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7140, x64Parser::tokenBranches7140},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7146, x64Parser::tokenBranches7146},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7154, x64Parser::tokenBranches7154},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding7225_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7225_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7225_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7225_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7225(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7225_15;
    operand.values[16] = tokenCoding7225_16;
    operand.values[17] = tokenCoding7225_17;
    operand.values[18] = tokenCoding7225_18;
}
Coding x64Parser::tokenCoding7229_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7229_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7229_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7229_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7229_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 136, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7229(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7229_15;
    operand.values[16] = tokenCoding7229_16;
    operand.values[22] = tokenCoding7229_22;
    operand.values[17] = tokenCoding7229_17;
    operand.values[18] = tokenCoding7229_18;
}
x64Token x64Parser::tokenBranches7224[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7225,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7229,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7223[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7224}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7138[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7139},
                                           {x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7223},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7171(x64Operand& operand, int tokenPos) { operand.operandCoding = 598; }
x64Token x64Parser::tokenBranches7170[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7171,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7169[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7170}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7168[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7169}, {x64Token::EOT}};
void x64Parser::TokenFunc7179(x64Operand& operand, int tokenPos) { operand.operandCoding = 599; }
x64Token x64Parser::tokenBranches7178[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7179,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7177[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7178}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7176[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7177}, {x64Token::EOT}};
void x64Parser::TokenFunc7193(x64Operand& operand, int tokenPos) { operand.operandCoding = 601; }
x64Token x64Parser::tokenBranches7192[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7193,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7191[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7192}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7190[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7191}, {x64Token::EOT}};
void x64Parser::TokenFunc7176(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7190(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7175[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7176, x64Parser::tokenBranches7176},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7190, x64Parser::tokenBranches7190},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7174[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7175}, {x64Token::EOT}};
void x64Parser::TokenFunc7185(x64Operand& operand, int tokenPos) { operand.operandCoding = 600; }
x64Token x64Parser::tokenBranches7184[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7185,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7183[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7184}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7182[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7183}, {x64Token::EOT}};
void x64Parser::TokenFunc7168(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7174(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7182(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7167[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7168, x64Parser::tokenBranches7168},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7174, x64Parser::tokenBranches7174},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7182, x64Parser::tokenBranches7182},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding7233_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7233_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7233_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7233_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7233(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7233_15;
    operand.values[16] = tokenCoding7233_16;
    operand.values[17] = tokenCoding7233_17;
    operand.values[18] = tokenCoding7233_18;
}
Coding x64Parser::tokenCoding7258_15[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7258_16[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7258_17[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7258_18[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7258(x64Operand& operand, int tokenPos)
{
    operand.values[32] = new Coding[2];
    CleanupValues.push_back(operand.values[32]);
    operand.values[32]->type = Coding::reg;
    operand.values[32]->val = inputTokens[tokenPos]->val->ival;
    operand.values[32]->bits = 0;
    operand.values[32]->field = 0;
    operand.values[32]->unary = 0;
    operand.values[32]->binary = 0;
    operand.values[32][1].type = Coding::eot;
    operand.values[15] = tokenCoding7258_15;
    operand.values[16] = tokenCoding7258_16;
    operand.values[17] = tokenCoding7258_17;
    operand.values[18] = tokenCoding7258_18;
}
x64Token x64Parser::tokenBranches7232[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7233,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7258,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7231[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7232}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7166[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7167},
                                           {x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7231},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7199(x64Operand& operand, int tokenPos) { operand.operandCoding = 602; }
x64Token x64Parser::tokenBranches7198[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7199,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7197[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7198}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7196[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7197}, {x64Token::EOT}};
void x64Parser::TokenFunc7207(x64Operand& operand, int tokenPos) { operand.operandCoding = 603; }
x64Token x64Parser::tokenBranches7206[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7207,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7205[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7206}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7204[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7205}, {x64Token::EOT}};
void x64Parser::TokenFunc7221(x64Operand& operand, int tokenPos) { operand.operandCoding = 605; }
x64Token x64Parser::tokenBranches7220[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7221,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7219[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7220}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7218[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7219}, {x64Token::EOT}};
void x64Parser::TokenFunc7204(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7218(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7203[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7204, x64Parser::tokenBranches7204},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7218, x64Parser::tokenBranches7218},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7202[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7203}, {x64Token::EOT}};
void x64Parser::TokenFunc7213(x64Operand& operand, int tokenPos) { operand.operandCoding = 604; }
x64Token x64Parser::tokenBranches7212[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7213,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7211[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7212}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7210[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7211}, {x64Token::EOT}};
void x64Parser::TokenFunc7196(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7202(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
void x64Parser::TokenFunc7210(x64Operand& operand, int tokenPos)
{
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7195[] = {
    {x64Token::NUMBER, 6, 0, 0, NULL, &x64Parser::TokenFunc7196, x64Parser::tokenBranches7196},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7202, x64Parser::tokenBranches7202},
    {x64Token::NUMBER, 7, 0, 0, NULL, &x64Parser::TokenFunc7210, x64Parser::tokenBranches7210},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding7237_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7237_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7237_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7237_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7237(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7237_15;
    operand.values[16] = tokenCoding7237_16;
    operand.values[17] = tokenCoding7237_17;
    operand.values[18] = tokenCoding7237_18;
}
x64Token x64Parser::tokenBranches7236[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7237,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7235[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7236}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7194[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7195},
                                           {x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7235},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7241_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7241_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7241_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7241_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 137, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7241(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7241_15;
    operand.values[16] = tokenCoding7241_16;
    operand.values[17] = tokenCoding7241_17;
    operand.values[18] = tokenCoding7241_18;
}
x64Token x64Parser::tokenBranches7240[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7241,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7239[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7240}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7238[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7239},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7245_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7245_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7245_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7245_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7245(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7245_15;
    operand.values[16] = tokenCoding7245_16;
    operand.values[17] = tokenCoding7245_17;
    operand.values[18] = tokenCoding7245_18;
}
x64Token x64Parser::tokenBranches7244[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7245,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7248_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7248_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7248_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7248_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7248(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7248_15;
    operand.values[16] = tokenCoding7248_16;
    operand.values[17] = tokenCoding7248_17;
    operand.values[18] = tokenCoding7248_18;
}
Coding x64Parser::tokenCoding7251_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7251_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7251_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7251_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7251(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7251_15;
    operand.values[16] = tokenCoding7251_16;
    operand.values[17] = tokenCoding7251_17;
    operand.values[18] = tokenCoding7251_18;
}
Coding x64Parser::tokenCoding7254_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7254_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7254_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7254_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 142, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7254(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7254_15;
    operand.values[16] = tokenCoding7254_16;
    operand.values[17] = tokenCoding7254_17;
    operand.values[18] = tokenCoding7254_18;
}
x64Token x64Parser::tokenBranches7243[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7244},
                                           {
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7248,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7251,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7254,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7242[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7243}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7275_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7275_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7275(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 512;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[17] = tokenCoding7275_17;
    operand.values[18] = tokenCoding7275_18;
}
x64Token x64Parser::tokenBranches7274[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7275,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7261_15[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7261_16[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7261_17[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7261_18[] = {
    {CODING_NAME("segm") Coding::stateFunc, 3},
    {CODING_NAME("segm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7261(x64Operand& operand, int tokenPos)
{
    operand.values[32] = new Coding[2];
    CleanupValues.push_back(operand.values[32]);
    operand.values[32]->type = Coding::reg;
    operand.values[32]->val = inputTokens[tokenPos]->val->ival;
    operand.values[32]->bits = 0;
    operand.values[32]->field = 0;
    operand.values[32]->unary = 0;
    operand.values[32]->binary = 0;
    operand.values[32][1].type = Coding::eot;
    operand.values[15] = tokenCoding7261_15;
    operand.values[16] = tokenCoding7261_16;
    operand.values[17] = tokenCoding7261_17;
    operand.values[18] = tokenCoding7261_18;
}
x64Token x64Parser::tokenBranches7260[] = {{
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7261,
                                           },
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7274},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7259[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7260}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7283_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7283_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 199, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7283(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[17] = tokenCoding7283_17;
    operand.values[18] = tokenCoding7283_18;
}
x64Token x64Parser::tokenBranches7282[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7283,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7267_15[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7267_16[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7267_17[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 32, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7267_18[] = {
    {CODING_NAME("segm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 140, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7267(x64Operand& operand, int tokenPos)
{
    operand.values[32] = new Coding[2];
    CleanupValues.push_back(operand.values[32]);
    operand.values[32]->type = Coding::reg;
    operand.values[32]->val = inputTokens[tokenPos]->val->ival;
    operand.values[32]->bits = 0;
    operand.values[32]->field = 0;
    operand.values[32]->unary = 0;
    operand.values[32]->binary = 0;
    operand.values[32][1].type = Coding::eot;
    operand.values[15] = tokenCoding7267_15;
    operand.values[16] = tokenCoding7267_16;
    operand.values[17] = tokenCoding7267_17;
    operand.values[18] = tokenCoding7267_18;
}
x64Token x64Parser::tokenBranches7266[] = {{
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7267,
                                           },
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7282},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7265[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7266}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7271_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7271_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7271(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[17] = tokenCoding7271_17;
    operand.values[18] = tokenCoding7271_18;
}
x64Token x64Parser::tokenBranches7270[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7271,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7269[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7270}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7268[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7269}, {x64Token::EOT}};
void x64Parser::TokenFunc6976(x64Operand& operand, int tokenPos)
{
    operand.values[29] = new Coding[2];
    CleanupValues.push_back(operand.values[29]);
    operand.values[29]->type = Coding::reg;
    operand.values[29]->val = inputTokens[tokenPos]->val->ival;
    operand.values[29]->bits = 0;
    operand.values[29]->field = 0;
    operand.values[29]->unary = 0;
    operand.values[29]->binary = 0;
    operand.values[29][1].type = Coding::eot;
}
void x64Parser::TokenFunc6979(x64Operand& operand, int tokenPos)
{
    operand.values[30] = new Coding[2];
    CleanupValues.push_back(operand.values[30]);
    operand.values[30]->type = Coding::reg;
    operand.values[30]->val = inputTokens[tokenPos]->val->ival;
    operand.values[30]->bits = 0;
    operand.values[30]->field = 0;
    operand.values[30]->unary = 0;
    operand.values[30]->binary = 0;
    operand.values[30][1].type = Coding::eot;
}
void x64Parser::TokenFunc6982(x64Operand& operand, int tokenPos)
{
    operand.values[31] = new Coding[2];
    CleanupValues.push_back(operand.values[31]);
    operand.values[31]->type = Coding::reg;
    operand.values[31]->val = inputTokens[tokenPos]->val->ival;
    operand.values[31]->bits = 0;
    operand.values[31]->field = 0;
    operand.values[31]->unary = 0;
    operand.values[31]->binary = 0;
    operand.values[31][1].type = Coding::eot;
}
void x64Parser::TokenFunc7069(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7073(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7077(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7081(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7085(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7242(x64Operand& operand, int tokenPos)
{
    operand.values[32] = new Coding[2];
    CleanupValues.push_back(operand.values[32]);
    operand.values[32]->type = Coding::reg;
    operand.values[32]->val = inputTokens[tokenPos]->val->ival;
    operand.values[32]->bits = 0;
    operand.values[32]->field = 0;
    operand.values[32]->unary = 0;
    operand.values[32]->binary = 0;
    operand.values[32][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches6975[] = {
    {x64Token::REGISTERCLASS, 21, 0, 0, NULL, &x64Parser::TokenFunc6976, x64Parser::tokenBranches6976},
    {x64Token::REGISTERCLASS, 22, 0, 0, NULL, &x64Parser::TokenFunc6979, x64Parser::tokenBranches6979},
    {x64Token::REGISTERCLASS, 23, 0, 0, NULL, &x64Parser::TokenFunc6982, x64Parser::tokenBranches6982},
    {x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches6985},
    {x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7013},
    {x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7041},
    {x64Token::REGISTERCLASS, 1, 0, 0, NULL, &x64Parser::TokenFunc7069, x64Parser::tokenBranches7069},
    {x64Token::REGISTERCLASS, 14, 0, 0, NULL, &x64Parser::TokenFunc7073, x64Parser::tokenBranches7073},
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc7077, x64Parser::tokenBranches7077},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc7081, x64Parser::tokenBranches7081},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc7085, x64Parser::tokenBranches7085},
    {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7109},
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7114},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7119},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7124},
    {x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches7129},
    {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7138},
    {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7166},
    {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7194},
    {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7238},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7242, x64Parser::tokenBranches7242},
    {x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches7259},
    {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches7265},
    {x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches7268},
    {x64Token::EOT}};
void x64Parser::TokenFunc7297(x64Operand& operand, int tokenPos) { operand.operandCoding = 606; }
x64Token x64Parser::tokenBranches7296[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7297,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7295[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7296},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7294[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7295}, {x64Token::EOT}};
void x64Parser::TokenFunc7310(x64Operand& operand, int tokenPos) { operand.operandCoding = 607; }
x64Token x64Parser::tokenBranches7309[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7310,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7308[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7309},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7307[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7308}, {x64Token::EOT}};
void x64Parser::TokenFunc7307(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7293[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7294},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7307, x64Parser::tokenBranches7307},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7292[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7293}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7291[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7292}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7290[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7291}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7289[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7290}, {x64Token::EOT}};
void x64Parser::TokenFunc7323(x64Operand& operand, int tokenPos) { operand.operandCoding = 608; }
x64Token x64Parser::tokenBranches7322[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7323,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7321[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7322},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7320[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7321}, {x64Token::EOT}};
void x64Parser::TokenFunc7336(x64Operand& operand, int tokenPos) { operand.operandCoding = 609; }
x64Token x64Parser::tokenBranches7335[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7336,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7334[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7335},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7333[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7334}, {x64Token::EOT}};
void x64Parser::TokenFunc7333(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7319[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7320},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7333, x64Parser::tokenBranches7333},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7318[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7319}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7317[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7318}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7316[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7317}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7315[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7316}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7288[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7289},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7315},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7287[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7288}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7286[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7287}, {x64Token::EOT}};
void x64Parser::TokenFunc7345(x64Operand& operand, int tokenPos) { operand.operandCoding = 610; }
x64Token x64Parser::tokenBranches7344[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7345,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7356(x64Operand& operand, int tokenPos) { operand.operandCoding = 611; }
x64Token x64Parser::tokenBranches7355[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7356,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7354[] = {{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7355},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7353[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7354}, {x64Token::EOT}};
void x64Parser::TokenFunc7353(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7343[] = {
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7344},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7353, x64Parser::tokenBranches7353},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7342[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7343}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7341[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7342}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7340[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7341}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7339[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7340}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7338[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7339},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7285[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7286},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7338},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7369(x64Operand& operand, int tokenPos) { operand.operandCoding = 612; }
x64Token x64Parser::tokenBranches7368[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7369,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7367[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7368},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7366[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7367}, {x64Token::EOT}};
void x64Parser::TokenFunc7382(x64Operand& operand, int tokenPos) { operand.operandCoding = 613; }
x64Token x64Parser::tokenBranches7381[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7382,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7380[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7381},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7379[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7380}, {x64Token::EOT}};
void x64Parser::TokenFunc7379(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7365[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7366},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7379, x64Parser::tokenBranches7379},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7364[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7365}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7363[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7364}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7362[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7363}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7361[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7362}, {x64Token::EOT}};
void x64Parser::TokenFunc7395(x64Operand& operand, int tokenPos) { operand.operandCoding = 614; }
x64Token x64Parser::tokenBranches7394[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7395,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7393[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7394},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7392[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7393}, {x64Token::EOT}};
void x64Parser::TokenFunc7408(x64Operand& operand, int tokenPos) { operand.operandCoding = 615; }
x64Token x64Parser::tokenBranches7407[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7408,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7406[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7407},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7405[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7406}, {x64Token::EOT}};
void x64Parser::TokenFunc7405(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7391[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7392},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7405, x64Parser::tokenBranches7405},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7390[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7391}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7389[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7390}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7388[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7389}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7387[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7388}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7360[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7361},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7387},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7359[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7360}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7358[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7359}, {x64Token::EOT}};
void x64Parser::TokenFunc7417(x64Operand& operand, int tokenPos) { operand.operandCoding = 616; }
x64Token x64Parser::tokenBranches7416[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7417,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7428(x64Operand& operand, int tokenPos) { operand.operandCoding = 617; }
x64Token x64Parser::tokenBranches7427[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7428,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7426[] = {{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7427},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7425[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7426}, {x64Token::EOT}};
void x64Parser::TokenFunc7425(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7415[] = {
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7416},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7425, x64Parser::tokenBranches7425},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7414[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7415}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7413[] = {{x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7414}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7412[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7413}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7411[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7412}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7410[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7411},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7357[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7358},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7410},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7441(x64Operand& operand, int tokenPos) { operand.operandCoding = 618; }
x64Token x64Parser::tokenBranches7440[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7441,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7439[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7440},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7438[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7439}, {x64Token::EOT}};
void x64Parser::TokenFunc7454(x64Operand& operand, int tokenPos) { operand.operandCoding = 619; }
x64Token x64Parser::tokenBranches7453[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7454,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7452[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7453},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7451[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7452}, {x64Token::EOT}};
void x64Parser::TokenFunc7451(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7437[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7438},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7451, x64Parser::tokenBranches7451},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7436[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7437}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7435[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7436}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7434[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7435}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7433[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7434}, {x64Token::EOT}};
void x64Parser::TokenFunc7467(x64Operand& operand, int tokenPos) { operand.operandCoding = 620; }
x64Token x64Parser::tokenBranches7466[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7467,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7465[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7466},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7464[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7465}, {x64Token::EOT}};
void x64Parser::TokenFunc7480(x64Operand& operand, int tokenPos) { operand.operandCoding = 621; }
x64Token x64Parser::tokenBranches7479[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7480,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7478[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7479},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7477[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7478}, {x64Token::EOT}};
void x64Parser::TokenFunc7477(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7463[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7464},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7477, x64Parser::tokenBranches7477},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7462[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7463}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7461[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7462}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7460[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7461}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7459[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7460}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7432[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7433},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7459},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7431[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7432}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7430[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7431}, {x64Token::EOT}};
void x64Parser::TokenFunc7489(x64Operand& operand, int tokenPos) { operand.operandCoding = 622; }
x64Token x64Parser::tokenBranches7488[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7489,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7500(x64Operand& operand, int tokenPos) { operand.operandCoding = 623; }
x64Token x64Parser::tokenBranches7499[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7500,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7498[] = {{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7499},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7497[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7498}, {x64Token::EOT}};
void x64Parser::TokenFunc7497(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7487[] = {
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7488},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7497, x64Parser::tokenBranches7497},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7486[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7487}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7485[] = {{x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7486}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7484[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7485}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7483[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7484}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7482[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7483},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7429[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7430},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7482},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7513(x64Operand& operand, int tokenPos) { operand.operandCoding = 624; }
x64Token x64Parser::tokenBranches7512[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7513,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7511[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7512},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7510[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7511}, {x64Token::EOT}};
void x64Parser::TokenFunc7526(x64Operand& operand, int tokenPos) { operand.operandCoding = 625; }
x64Token x64Parser::tokenBranches7525[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7526,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7524[] = {{x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7525},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7523[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7524}, {x64Token::EOT}};
void x64Parser::TokenFunc7523(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7509[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7510},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7523, x64Parser::tokenBranches7523},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7508[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7509}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7507[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7508}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7506[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7507}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7505[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7506}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7504[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7505},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7503[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7504}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7502[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7503}, {x64Token::EOT}};
void x64Parser::TokenFunc7535(x64Operand& operand, int tokenPos) { operand.operandCoding = 624; }
x64Token x64Parser::tokenBranches7534[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7535,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7546(x64Operand& operand, int tokenPos) { operand.operandCoding = 625; }
x64Token x64Parser::tokenBranches7545[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7546,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7544[] = {{x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7545},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7543[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7544}, {x64Token::EOT}};
void x64Parser::TokenFunc7543(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7533[] = {
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7534},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7543, x64Parser::tokenBranches7543},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7532[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7533}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7531[] = {{x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7532}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7530[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7531}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7529[] = {{x64Token::TOKEN, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches7530}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7528[] = {{x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7529},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7501[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7502},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7528},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7284[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7285},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7357},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7429},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7501},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7551_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7551_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7551_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7551_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7551(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7551_15;
    operand.values[16] = tokenCoding7551_16;
    operand.values[17] = tokenCoding7551_17;
    operand.values[18] = tokenCoding7551_18;
}
x64Token x64Parser::tokenBranches7550[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7551,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7549[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7550}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7548[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7549}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7555_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7555_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7555_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7555_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7555(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7555_15;
    operand.values[16] = tokenCoding7555_16;
    operand.values[17] = tokenCoding7555_17;
    operand.values[18] = tokenCoding7555_18;
}
x64Token x64Parser::tokenBranches7554[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7555,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7553[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7554}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7552[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7553}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7559_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7559_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7559_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7559_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7559(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7559_15;
    operand.values[16] = tokenCoding7559_16;
    operand.values[17] = tokenCoding7559_17;
    operand.values[18] = tokenCoding7559_18;
}
x64Token x64Parser::tokenBranches7558[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7559,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7557[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7558}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7556[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7557}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7563_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7563_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7563_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7563_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7563(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7563_15;
    operand.values[16] = tokenCoding7563_16;
    operand.values[17] = tokenCoding7563_17;
    operand.values[18] = tokenCoding7563_18;
}
x64Token x64Parser::tokenBranches7562[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7563,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7561[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7562}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7560[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches7561},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7567_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7567_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7567_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7567_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7567(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7567_15;
    operand.values[16] = tokenCoding7567_16;
    operand.values[17] = tokenCoding7567_17;
    operand.values[18] = tokenCoding7567_18;
}
x64Token x64Parser::tokenBranches7566[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7567,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7565[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7566}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7564[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches7565},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7571_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7571_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7571_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7571_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7571(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7571_15;
    operand.values[16] = tokenCoding7571_16;
    operand.values[17] = tokenCoding7571_17;
    operand.values[18] = tokenCoding7571_18;
}
x64Token x64Parser::tokenBranches7570[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7571,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7569[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7570}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7568[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7569},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7548(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7552(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7556(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7547[] = {
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc7548, x64Parser::tokenBranches7548},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc7552, x64Parser::tokenBranches7552},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc7556, x64Parser::tokenBranches7556},
    {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7560},
    {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7564},
    {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7568},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding7577_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7577_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7577_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7577_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7577_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7577(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7577_15;
    operand.values[16] = tokenCoding7577_16;
    operand.values[22] = tokenCoding7577_22;
    operand.values[17] = tokenCoding7577_17;
    operand.values[18] = tokenCoding7577_18;
}
x64Token x64Parser::tokenBranches7576[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7577,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7575[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7576}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7580_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7580_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7580_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7580_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7580_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 17, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7580(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding7580_15;
    operand.values[16] = tokenCoding7580_16;
    operand.values[22] = tokenCoding7580_22;
    operand.values[17] = tokenCoding7580_17;
    operand.values[18] = tokenCoding7580_18;
}
x64Token x64Parser::tokenBranches7579[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7580,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7578[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7579}, {x64Token::EOT}};
void x64Parser::TokenFunc7575(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7581(x64Operand& operand, int tokenPos) { operand.operandCoding = 626; }
x64Token x64Parser::tokenBranches7574[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc7575, x64Parser::tokenBranches7575},
    {x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7578},
    {
        x64Token::EMPTY,
        0,
        1,
        0,
        NULL,
        &x64Parser::TokenFunc7581,
    },
    {x64Token::EOT}};
void x64Parser::TokenFunc7583(x64Operand& operand, int tokenPos) { operand.operandCoding = 627; }
x64Token x64Parser::tokenBranches7582[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7583,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7593_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7593_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7593_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7593_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7593(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7593_15;
    operand.values[16] = tokenCoding7593_16;
    operand.values[17] = tokenCoding7593_17;
    operand.values[18] = tokenCoding7593_18;
}
x64Token x64Parser::tokenBranches7592[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7593,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7589_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7589_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7589_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7589_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7589(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7589_15;
    operand.values[16] = tokenCoding7589_16;
    operand.values[17] = tokenCoding7589_17;
    operand.values[18] = tokenCoding7589_18;
}
x64Token x64Parser::tokenBranches7588[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7589,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7592},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7587[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7588}, {x64Token::EOT}};
Coding x64Parser::tokenCoding7600_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7600_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7600_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7600_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7600(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7600_15;
    operand.values[16] = tokenCoding7600_16;
    operand.values[17] = tokenCoding7600_17;
    operand.values[18] = tokenCoding7600_18;
}
x64Token x64Parser::tokenBranches7599[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7600,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7596_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7596_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7596_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7596_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7596(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7596_15;
    operand.values[16] = tokenCoding7596_16;
    operand.values[17] = tokenCoding7596_17;
    operand.values[18] = tokenCoding7596_18;
}
x64Token x64Parser::tokenBranches7595[] = {{
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7596,
                                           },
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7599},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7594[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7595}, {x64Token::EOT}};
void x64Parser::TokenFunc7587(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7594(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7586[] = {
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc7587, x64Parser::tokenBranches7587},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc7594, x64Parser::tokenBranches7594},
    {x64Token::EOT}};
void x64Parser::TokenFunc7610(x64Operand& operand, int tokenPos) { operand.operandCoding = 628; }
x64Token x64Parser::tokenBranches7609[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7610,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7608[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7609}, {x64Token::EOT}};
void x64Parser::TokenFunc7608(x64Operand& operand, int tokenPos)
{
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7607[] = {
    {x64Token::NUMBER, 3, 0, 0, NULL, &x64Parser::TokenFunc7608, x64Parser::tokenBranches7608}, {x64Token::EOT}};
void x64Parser::TokenFunc7614(x64Operand& operand, int tokenPos) { operand.operandCoding = 629; }
x64Token x64Parser::tokenBranches7613[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7614,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7612[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7613}, {x64Token::EOT}};
void x64Parser::TokenFunc7612(x64Operand& operand, int tokenPos)
{
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7611[] = {
    {x64Token::NUMBER, 3, 0, 0, NULL, &x64Parser::TokenFunc7612, x64Parser::tokenBranches7612}, {x64Token::EOT}};
void x64Parser::TokenFunc7618(x64Operand& operand, int tokenPos) { operand.operandCoding = 630; }
x64Token x64Parser::tokenBranches7617[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7618,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7616[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7617}, {x64Token::EOT}};
void x64Parser::TokenFunc7616(x64Operand& operand, int tokenPos)
{
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7615[] = {
    {x64Token::NUMBER, 3, 0, 0, NULL, &x64Parser::TokenFunc7616, x64Parser::tokenBranches7616}, {x64Token::EOT}};
void x64Parser::TokenFunc7622(x64Operand& operand, int tokenPos) { operand.operandCoding = 631; }
x64Token x64Parser::tokenBranches7621[] = {{
                                               x64Token::REGISTER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7622,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7620[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7621}, {x64Token::EOT}};
void x64Parser::TokenFunc7620(x64Operand& operand, int tokenPos)
{
    operand.values[28] = new Coding[2];
    CleanupValues.push_back(operand.values[28]);
    operand.values[28]->type = Coding::number;
    operand.values[28]->val = operands.size();
    operand.values[28]->bits = 0;
    operand.values[28]->field = 0;
    operand.values[28]->unary = 0;
    operand.values[28]->binary = 0;
    operand.values[28][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7619[] = {
    {x64Token::NUMBER, 3, 0, 0, NULL, &x64Parser::TokenFunc7620, x64Parser::tokenBranches7620}, {x64Token::EOT}};
void x64Parser::TokenFunc7625(x64Operand& operand, int tokenPos) { operand.operandCoding = 632; }
void x64Parser::TokenFunc7628(x64Operand& operand, int tokenPos) { operand.operandCoding = 633; }
void x64Parser::TokenFunc7631(x64Operand& operand, int tokenPos) { operand.operandCoding = 634; }
void x64Parser::TokenFunc7634(x64Operand& operand, int tokenPos) { operand.operandCoding = 635; }
x64Token x64Parser::tokenBranches7624[] = {{
                                               x64Token::REGISTER,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7625,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7628,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7631,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7634,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7623[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7624}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7606[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7607},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches7611},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches7615},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches7619},
                                           {x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches7623},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7643(x64Operand& operand, int tokenPos) { operand.operandCoding = 636; }
x64Token x64Parser::tokenBranches7642[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7643,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7659(x64Operand& operand, int tokenPos) { operand.operandCoding = 638; }
x64Token x64Parser::tokenBranches7658[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7659,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7641[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7642},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7658},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7640[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7641}, {x64Token::EOT}};
void x64Parser::TokenFunc7651(x64Operand& operand, int tokenPos) { operand.operandCoding = 637; }
x64Token x64Parser::tokenBranches7650[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7651,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7667(x64Operand& operand, int tokenPos) { operand.operandCoding = 639; }
x64Token x64Parser::tokenBranches7666[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7667,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7681(x64Operand& operand, int tokenPos) { operand.operandCoding = 641; }
x64Token x64Parser::tokenBranches7680[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7681,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7649[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7650},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7666},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7680},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7648[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7649}, {x64Token::EOT}};
void x64Parser::TokenFunc7673(x64Operand& operand, int tokenPos) { operand.operandCoding = 640; }
x64Token x64Parser::tokenBranches7672[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7673,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7648(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7639[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7640},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7648, x64Parser::tokenBranches7648},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7672},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7638[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7639}, {x64Token::EOT}};
void x64Parser::TokenFunc7689(x64Operand& operand, int tokenPos) { operand.operandCoding = 642; }
x64Token x64Parser::tokenBranches7688[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7689,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7705(x64Operand& operand, int tokenPos) { operand.operandCoding = 644; }
x64Token x64Parser::tokenBranches7704[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7705,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7687[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7688},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7704},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7686[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7687}, {x64Token::EOT}};
void x64Parser::TokenFunc7697(x64Operand& operand, int tokenPos) { operand.operandCoding = 643; }
x64Token x64Parser::tokenBranches7696[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7697,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7713(x64Operand& operand, int tokenPos) { operand.operandCoding = 645; }
x64Token x64Parser::tokenBranches7712[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7713,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7727(x64Operand& operand, int tokenPos) { operand.operandCoding = 647; }
x64Token x64Parser::tokenBranches7726[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7727,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7695[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7696},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7712},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7726},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7694[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7695}, {x64Token::EOT}};
void x64Parser::TokenFunc7719(x64Operand& operand, int tokenPos) { operand.operandCoding = 646; }
x64Token x64Parser::tokenBranches7718[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7719,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7694(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7685[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7686},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7694, x64Parser::tokenBranches7694},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7718},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7684[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7685}, {x64Token::EOT}};
void x64Parser::TokenFunc7735(x64Operand& operand, int tokenPos) { operand.operandCoding = 648; }
x64Token x64Parser::tokenBranches7734[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7735,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7751(x64Operand& operand, int tokenPos) { operand.operandCoding = 650; }
x64Token x64Parser::tokenBranches7750[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7751,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7733[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7734},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7750},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7732[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7733}, {x64Token::EOT}};
void x64Parser::TokenFunc7743(x64Operand& operand, int tokenPos) { operand.operandCoding = 649; }
x64Token x64Parser::tokenBranches7742[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7743,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7759(x64Operand& operand, int tokenPos) { operand.operandCoding = 651; }
x64Token x64Parser::tokenBranches7758[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7759,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7773(x64Operand& operand, int tokenPos) { operand.operandCoding = 653; }
x64Token x64Parser::tokenBranches7772[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7773,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7741[] = {{x64Token::REGISTER, 53, 0, 0, NULL, NULL, x64Parser::tokenBranches7742},
                                           {x64Token::REGISTER, 54, 0, 0, NULL, NULL, x64Parser::tokenBranches7758},
                                           {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7772},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7740[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7741}, {x64Token::EOT}};
void x64Parser::TokenFunc7765(x64Operand& operand, int tokenPos) { operand.operandCoding = 652; }
x64Token x64Parser::tokenBranches7764[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7765,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7740(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7731[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches7732},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7740, x64Parser::tokenBranches7740},
    {x64Token::REGISTER, 55, 0, 0, NULL, NULL, x64Parser::tokenBranches7764},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7730[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7731}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7637[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7638},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7684},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7730},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7636[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches7637}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7635[] = {{x64Token::REGISTER, 20, 0, 0, NULL, NULL, x64Parser::tokenBranches7636},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7782_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7782_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7782_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7782_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7782(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7782_15;
    operand.values[16] = tokenCoding7782_16;
    operand.values[17] = tokenCoding7782_17;
    operand.values[18] = tokenCoding7782_18;
}
x64Token x64Parser::tokenBranches7781[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7782,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7784_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7784_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7784_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7784_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7784(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7784_15;
    operand.values[16] = tokenCoding7784_16;
    operand.values[17] = tokenCoding7784_17;
    operand.values[18] = tokenCoding7784_18;
}
x64Token x64Parser::tokenBranches7783[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7784,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7786_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7786_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7786_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7786_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 143, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7786(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding7786_15;
    operand.values[16] = tokenCoding7786_16;
    operand.values[17] = tokenCoding7786_17;
    operand.values[18] = tokenCoding7786_18;
}
x64Token x64Parser::tokenBranches7785[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7786,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7778(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 654;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7779(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 655;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7780(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 656;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7787(x64Operand& operand, int tokenPos) { operand.operandCoding = 657; }
void x64Parser::TokenFunc7788(x64Operand& operand, int tokenPos) { operand.operandCoding = 658; }
void x64Parser::TokenFunc7789(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 659;
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7777[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7778,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7779,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7780,
                                           },
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7781},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7783},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7785},
                                           {
                                               x64Token::REGISTER,
                                               97,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7787,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               98,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7788,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7789,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7799_33[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7799_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7799_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7799_34[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7799_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7799_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7799(x64Operand& operand, int tokenPos)
{
    operand.values[33] = tokenCoding7799_33;
    operand.values[15] = tokenCoding7799_15;
    operand.values[16] = tokenCoding7799_16;
    operand.values[34] = tokenCoding7799_34;
    operand.values[17] = tokenCoding7799_17;
    operand.values[18] = tokenCoding7799_18;
}
x64Token x64Parser::tokenBranches7798[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7799,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7801_33[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7801_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7801_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7801_34[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7801_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7801_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7801(x64Operand& operand, int tokenPos)
{
    operand.values[33] = tokenCoding7801_33;
    operand.values[15] = tokenCoding7801_15;
    operand.values[16] = tokenCoding7801_16;
    operand.values[34] = tokenCoding7801_34;
    operand.values[17] = tokenCoding7801_17;
    operand.values[18] = tokenCoding7801_18;
}
x64Token x64Parser::tokenBranches7800[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7801,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7803_33[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7803_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7803_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7803_34[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7803_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7803_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7803(x64Operand& operand, int tokenPos)
{
    operand.values[33] = tokenCoding7803_33;
    operand.values[15] = tokenCoding7803_15;
    operand.values[16] = tokenCoding7803_16;
    operand.values[34] = tokenCoding7803_34;
    operand.values[17] = tokenCoding7803_17;
    operand.values[18] = tokenCoding7803_18;
}
x64Token x64Parser::tokenBranches7802[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7803,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding7805_33[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7805_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7805_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7805_34[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7805_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7805_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 24, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7805(x64Operand& operand, int tokenPos)
{
    operand.values[33] = tokenCoding7805_33;
    operand.values[15] = tokenCoding7805_15;
    operand.values[16] = tokenCoding7805_16;
    operand.values[34] = tokenCoding7805_34;
    operand.values[17] = tokenCoding7805_17;
    operand.values[18] = tokenCoding7805_18;
}
x64Token x64Parser::tokenBranches7804[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7805,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7811(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 663;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches7810[] = {{
                                               x64Token::NUMBER,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7811,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7816(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 664;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7822_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7822_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7822_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7822_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7822(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 667;
    operand.values[15] = tokenCoding7822_15;
    operand.values[16] = tokenCoding7822_16;
    operand.values[17] = tokenCoding7822_17;
    operand.values[18] = tokenCoding7822_18;
}
x64Token x64Parser::tokenBranches7815[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7816,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7822,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7818(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 665;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7824_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7824_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7824_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7824_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7824(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 668;
    operand.values[15] = tokenCoding7824_15;
    operand.values[16] = tokenCoding7824_16;
    operand.values[17] = tokenCoding7824_17;
    operand.values[18] = tokenCoding7824_18;
}
x64Token x64Parser::tokenBranches7817[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7818,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7824,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7820(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 666;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
Coding x64Parser::tokenCoding7826_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7826_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7826_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding7826_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc7826(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 668;
    operand.values[15] = tokenCoding7826_15;
    operand.values[16] = tokenCoding7826_16;
    operand.values[17] = tokenCoding7826_17;
    operand.values[18] = tokenCoding7826_18;
}
x64Token x64Parser::tokenBranches7819[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7820,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7826,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7807(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 660;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7808(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 661;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7809(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 662;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc7812(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 664;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7813(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 665;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7814(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 666;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7827(x64Operand& operand, int tokenPos) { operand.operandCoding = 669; }
void x64Parser::TokenFunc7828(x64Operand& operand, int tokenPos) { operand.operandCoding = 670; }
void x64Parser::TokenFunc7829(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 671;
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7806[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7807,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7808,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7809,
                                           },
                                           {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches7810},
                                           {
                                               x64Token::NUMBER,
                                               6,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7812,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7813,
                                           },
                                           {
                                               x64Token::NUMBER,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7814,
                                           },
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7815},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7817},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7819},
                                           {
                                               x64Token::REGISTER,
                                               97,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7827,
                                           },
                                           {
                                               x64Token::REGISTER,
                                               98,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7828,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7829,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7843(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 672;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7844(x64Operand& operand, int tokenPos) { operand.operandCoding = 673; }
x64Token x64Parser::tokenBranches7842[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7843,
                                           },
                                           {
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7844,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7846(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 674;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
void x64Parser::TokenFunc7847(x64Operand& operand, int tokenPos) { operand.operandCoding = 675; }
x64Token x64Parser::tokenBranches7845[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7846,
                                           },
                                           {
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7847,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7861(x64Operand& operand, int tokenPos) { operand.operandCoding = 676; }
x64Token x64Parser::tokenBranches7860[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7861,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7873(x64Operand& operand, int tokenPos) { operand.operandCoding = 678; }
x64Token x64Parser::tokenBranches7872[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7873,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7859[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7860},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7872},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7858[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7859}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7857[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7858}, {x64Token::EOT}};
void x64Parser::TokenFunc7867(x64Operand& operand, int tokenPos) { operand.operandCoding = 677; }
x64Token x64Parser::tokenBranches7866[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7867,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7879(x64Operand& operand, int tokenPos) { operand.operandCoding = 679; }
x64Token x64Parser::tokenBranches7878[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7879,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7889(x64Operand& operand, int tokenPos) { operand.operandCoding = 681; }
x64Token x64Parser::tokenBranches7888[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7889,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7865[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7866},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7878},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7888},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7864[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7865}, {x64Token::EOT}};
void x64Parser::TokenFunc7883(x64Operand& operand, int tokenPos) { operand.operandCoding = 680; }
x64Token x64Parser::tokenBranches7882[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7883,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7864(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7863[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7864, x64Parser::tokenBranches7864},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7882},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7856[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7857},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7863},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7895(x64Operand& operand, int tokenPos) { operand.operandCoding = 682; }
x64Token x64Parser::tokenBranches7894[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7895,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7907(x64Operand& operand, int tokenPos) { operand.operandCoding = 684; }
x64Token x64Parser::tokenBranches7906[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7907,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7893[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7894},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7906},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7892[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7893}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7891[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7892}, {x64Token::EOT}};
void x64Parser::TokenFunc7901(x64Operand& operand, int tokenPos) { operand.operandCoding = 683; }
x64Token x64Parser::tokenBranches7900[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7901,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7913(x64Operand& operand, int tokenPos) { operand.operandCoding = 685; }
x64Token x64Parser::tokenBranches7912[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7913,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7923(x64Operand& operand, int tokenPos) { operand.operandCoding = 687; }
x64Token x64Parser::tokenBranches7922[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7923,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7899[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7900},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7912},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7922},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7898[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7899}, {x64Token::EOT}};
void x64Parser::TokenFunc7917(x64Operand& operand, int tokenPos) { operand.operandCoding = 686; }
x64Token x64Parser::tokenBranches7916[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7917,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7898(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7897[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7898, x64Parser::tokenBranches7898},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7916},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7890[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7891},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7897},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7929(x64Operand& operand, int tokenPos) { operand.operandCoding = 688; }
x64Token x64Parser::tokenBranches7928[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7929,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7941(x64Operand& operand, int tokenPos) { operand.operandCoding = 690; }
x64Token x64Parser::tokenBranches7940[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7941,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7927[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7928},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7940},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7926[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7927}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7925[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7926}, {x64Token::EOT}};
void x64Parser::TokenFunc7935(x64Operand& operand, int tokenPos) { operand.operandCoding = 689; }
x64Token x64Parser::tokenBranches7934[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7935,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7947(x64Operand& operand, int tokenPos) { operand.operandCoding = 691; }
x64Token x64Parser::tokenBranches7946[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7947,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7957(x64Operand& operand, int tokenPos) { operand.operandCoding = 693; }
x64Token x64Parser::tokenBranches7956[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7957,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7933[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches7934},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7946},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7956},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7932[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7933}, {x64Token::EOT}};
void x64Parser::TokenFunc7951(x64Operand& operand, int tokenPos) { operand.operandCoding = 692; }
x64Token x64Parser::tokenBranches7950[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7951,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7932(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7931[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7932, x64Parser::tokenBranches7932},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7950},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7924[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7925},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7931},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7963(x64Operand& operand, int tokenPos) { operand.operandCoding = 694; }
x64Token x64Parser::tokenBranches7962[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7963,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7961[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7962},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7960[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7961}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches7959[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7960}, {x64Token::EOT}};
void x64Parser::TokenFunc7969(x64Operand& operand, int tokenPos) { operand.operandCoding = 695; }
x64Token x64Parser::tokenBranches7968[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7969,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7979(x64Operand& operand, int tokenPos) { operand.operandCoding = 695; }
x64Token x64Parser::tokenBranches7978[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7979,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7967[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches7968},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7978},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7966[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches7967}, {x64Token::EOT}};
void x64Parser::TokenFunc7973(x64Operand& operand, int tokenPos) { operand.operandCoding = 694; }
x64Token x64Parser::tokenBranches7972[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7973,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7966(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches7965[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc7966, x64Parser::tokenBranches7966},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches7972},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches7958[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches7959},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches7965},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches7855[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches7856},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches7890},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches7924},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches7958},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc7984(x64Operand& operand, int tokenPos) { operand.operandCoding = 696; }
x64Token x64Parser::tokenBranches7983[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc7984,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8024_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8024_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8024_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8024_18[] = {
    {CODING_NAME("reg") Coding::stateFunc, 3},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8024(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8024_15;
    operand.values[16] = tokenCoding8024_16;
    operand.values[17] = tokenCoding8024_17;
    operand.values[18] = tokenCoding8024_18;
}
x64Token x64Parser::tokenBranches8023[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8024,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8034(x64Operand& operand, int tokenPos) { operand.operandCoding = 697; }
x64Token x64Parser::tokenBranches8033[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8034,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8046(x64Operand& operand, int tokenPos) { operand.operandCoding = 699; }
x64Token x64Parser::tokenBranches8045[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8046,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8032[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8033},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8045},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8031[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8032}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8030[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8031}, {x64Token::EOT}};
void x64Parser::TokenFunc8040(x64Operand& operand, int tokenPos) { operand.operandCoding = 698; }
x64Token x64Parser::tokenBranches8039[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8040,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8052(x64Operand& operand, int tokenPos) { operand.operandCoding = 700; }
x64Token x64Parser::tokenBranches8051[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8052,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8062(x64Operand& operand, int tokenPos) { operand.operandCoding = 702; }
x64Token x64Parser::tokenBranches8061[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8062,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8038[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8039},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8051},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8061},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8037[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8038}, {x64Token::EOT}};
void x64Parser::TokenFunc8056(x64Operand& operand, int tokenPos) { operand.operandCoding = 701; }
x64Token x64Parser::tokenBranches8055[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8056,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8037(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8036[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc8037, x64Parser::tokenBranches8037},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8055},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches8029[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches8030},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8036},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8068(x64Operand& operand, int tokenPos) { operand.operandCoding = 703; }
x64Token x64Parser::tokenBranches8067[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8068,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8080(x64Operand& operand, int tokenPos) { operand.operandCoding = 705; }
x64Token x64Parser::tokenBranches8079[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8080,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8066[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8067},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8079},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8065[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8066}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8064[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8065}, {x64Token::EOT}};
void x64Parser::TokenFunc8074(x64Operand& operand, int tokenPos) { operand.operandCoding = 704; }
x64Token x64Parser::tokenBranches8073[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8074,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8086(x64Operand& operand, int tokenPos) { operand.operandCoding = 706; }
x64Token x64Parser::tokenBranches8085[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8086,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8096(x64Operand& operand, int tokenPos) { operand.operandCoding = 708; }
x64Token x64Parser::tokenBranches8095[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8096,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8072[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8073},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8085},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8095},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8071[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8072}, {x64Token::EOT}};
void x64Parser::TokenFunc8090(x64Operand& operand, int tokenPos) { operand.operandCoding = 707; }
x64Token x64Parser::tokenBranches8089[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8090,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8071(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8070[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc8071, x64Parser::tokenBranches8071},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8089},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches8063[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches8064},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8070},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8102(x64Operand& operand, int tokenPos) { operand.operandCoding = 709; }
x64Token x64Parser::tokenBranches8101[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8102,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8114(x64Operand& operand, int tokenPos) { operand.operandCoding = 711; }
x64Token x64Parser::tokenBranches8113[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8114,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8100[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8101},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8113},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8099[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8100}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8098[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8099}, {x64Token::EOT}};
void x64Parser::TokenFunc8108(x64Operand& operand, int tokenPos) { operand.operandCoding = 710; }
x64Token x64Parser::tokenBranches8107[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8108,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8120(x64Operand& operand, int tokenPos) { operand.operandCoding = 712; }
x64Token x64Parser::tokenBranches8119[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8120,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8130(x64Operand& operand, int tokenPos) { operand.operandCoding = 714; }
x64Token x64Parser::tokenBranches8129[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8130,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8106[] = {{x64Token::REGISTER, 61, 0, 0, NULL, NULL, x64Parser::tokenBranches8107},
                                           {x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8119},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8129},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8105[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8106}, {x64Token::EOT}};
void x64Parser::TokenFunc8124(x64Operand& operand, int tokenPos) { operand.operandCoding = 713; }
x64Token x64Parser::tokenBranches8123[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8124,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8105(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8104[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc8105, x64Parser::tokenBranches8105},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8123},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches8097[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches8098},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8104},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8136(x64Operand& operand, int tokenPos) { operand.operandCoding = 715; }
x64Token x64Parser::tokenBranches8135[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8136,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8134[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8135},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8133[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8134}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8132[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8133}, {x64Token::EOT}};
void x64Parser::TokenFunc8142(x64Operand& operand, int tokenPos) { operand.operandCoding = 716; }
x64Token x64Parser::tokenBranches8141[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8142,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8152(x64Operand& operand, int tokenPos) { operand.operandCoding = 716; }
x64Token x64Parser::tokenBranches8151[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8152,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8140[] = {{x64Token::REGISTER, 62, 0, 0, NULL, NULL, x64Parser::tokenBranches8141},
                                           {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8151},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8139[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8140}, {x64Token::EOT}};
void x64Parser::TokenFunc8146(x64Operand& operand, int tokenPos) { operand.operandCoding = 715; }
x64Token x64Parser::tokenBranches8145[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8146,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8139(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8138[] = {
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc8139, x64Parser::tokenBranches8139},
    {x64Token::REGISTER, 63, 0, 0, NULL, NULL, x64Parser::tokenBranches8145},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches8131[] = {{x64Token::REGISTER, 93, 0, 0, NULL, NULL, x64Parser::tokenBranches8132},
                                           {x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8138},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8028[] = {{x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches8029},
                                           {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches8063},
                                           {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches8097},
                                           {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches8131},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8157(x64Operand& operand, int tokenPos) { operand.operandCoding = 717; }
x64Token x64Parser::tokenBranches8156[] = {{
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8157,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8159_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8159_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8159_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8159_18[] = {
    {CODING_NAME("reg") Coding::stateFunc, 3},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8159(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8159_15;
    operand.values[16] = tokenCoding8159_16;
    operand.values[17] = tokenCoding8159_17;
    operand.values[18] = tokenCoding8159_18;
}
Coding x64Parser::tokenCoding8160_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8160_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8160_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8160_18[] = {
    {CODING_NAME("reg") Coding::stateFunc, 4},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8160(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8160_15;
    operand.values[16] = tokenCoding8160_16;
    operand.values[17] = tokenCoding8160_17;
    operand.values[18] = tokenCoding8160_18;
}
Coding x64Parser::tokenCoding8161_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8161_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8161_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8161_18[] = {
    {CODING_NAME("reg") Coding::stateFunc, 5},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8161(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8161_15;
    operand.values[16] = tokenCoding8161_16;
    operand.values[17] = tokenCoding8161_17;
    operand.values[18] = tokenCoding8161_18;
}
x64Token x64Parser::tokenBranches8158[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8159,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               19,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8160,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8161,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8171(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 718;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches8170[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8171,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8169[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8170}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8168[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8169}, {x64Token::EOT}};
void x64Parser::TokenFunc8175(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 719;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches8174[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8175,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8173[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8174}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8172[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8173}, {x64Token::EOT}};
void x64Parser::TokenFunc8179(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 720;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches8178[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8179,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8177[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8178}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8176[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8177}, {x64Token::EOT}};
void x64Parser::TokenFunc8183(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 721;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
}
x64Token x64Parser::tokenBranches8182[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8183,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8181[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8182}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8180[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8181}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8187_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8187_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8187_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8187_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8187(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8187_15;
    operand.values[16] = tokenCoding8187_16;
    operand.values[17] = tokenCoding8187_17;
    operand.values[18] = tokenCoding8187_18;
}
Coding x64Parser::tokenCoding8191_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8191_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8191_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8191_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8191_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8191(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8191_15;
    operand.values[16] = tokenCoding8191_16;
    operand.values[22] = tokenCoding8191_22;
    operand.values[17] = tokenCoding8191_17;
    operand.values[18] = tokenCoding8191_18;
}
x64Token x64Parser::tokenBranches8186[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8187,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8191,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8185[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8186}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8184[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8185},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8195_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8195_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8195_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8195_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8195(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8195_15;
    operand.values[16] = tokenCoding8195_16;
    operand.values[17] = tokenCoding8195_17;
    operand.values[18] = tokenCoding8195_18;
}
x64Token x64Parser::tokenBranches8194[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8195,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8193[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8194}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8192[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8193},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8199_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8199_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8199_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8199_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8199(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8199_15;
    operand.values[16] = tokenCoding8199_16;
    operand.values[17] = tokenCoding8199_17;
    operand.values[18] = tokenCoding8199_18;
}
x64Token x64Parser::tokenBranches8198[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8199,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8197[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8198}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8196[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8197},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8203_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8203_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8203_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8203_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8203(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8203_15;
    operand.values[16] = tokenCoding8203_16;
    operand.values[17] = tokenCoding8203_17;
    operand.values[18] = tokenCoding8203_18;
}
x64Token x64Parser::tokenBranches8202[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8203,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8201[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8202}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8200[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8201},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8248_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8248_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8248_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8248_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8248(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8248_15;
    operand.values[16] = tokenCoding8248_16;
    operand.values[17] = tokenCoding8248_17;
    operand.values[18] = tokenCoding8248_18;
}
x64Token x64Parser::tokenBranches8247[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8248,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8206_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8206_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8206_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8206_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8206(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8206_15;
    operand.values[16] = tokenCoding8206_16;
    operand.values[17] = tokenCoding8206_17;
    operand.values[18] = tokenCoding8206_18;
}
Coding x64Parser::tokenCoding8212_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8212_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8212_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8212_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8212_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8212(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8212_15;
    operand.values[16] = tokenCoding8212_16;
    operand.values[22] = tokenCoding8212_22;
    operand.values[17] = tokenCoding8212_17;
    operand.values[18] = tokenCoding8212_18;
}
x64Token x64Parser::tokenBranches8205[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8206,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8212,
                                           },
                                           {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8247},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8204[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8205}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8209_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8209_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8209_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8209_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8209_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8209(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8209_15;
    operand.values[16] = tokenCoding8209_16;
    operand.values[22] = tokenCoding8209_22;
    operand.values[17] = tokenCoding8209_17;
    operand.values[18] = tokenCoding8209_18;
}
Coding x64Parser::tokenCoding8215_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8215_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8215_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8215_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8215_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8215(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8215_15;
    operand.values[16] = tokenCoding8215_16;
    operand.values[22] = tokenCoding8215_22;
    operand.values[17] = tokenCoding8215_17;
    operand.values[18] = tokenCoding8215_18;
}
x64Token x64Parser::tokenBranches8208[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8209,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8215,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8207[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8208}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8252_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8252_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8252_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8252_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8252(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 512;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8252_15;
    operand.values[16] = tokenCoding8252_16;
    operand.values[17] = tokenCoding8252_17;
    operand.values[18] = tokenCoding8252_18;
}
x64Token x64Parser::tokenBranches8251[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8252,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8218_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8218_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8218_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8218_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8218(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8218_15;
    operand.values[16] = tokenCoding8218_16;
    operand.values[17] = tokenCoding8218_17;
    operand.values[18] = tokenCoding8218_18;
}
x64Token x64Parser::tokenBranches8217[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8218,
                                           },
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8251},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8216[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8217}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8256_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8256_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8256_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8256_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8256(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8256_15;
    operand.values[16] = tokenCoding8256_16;
    operand.values[17] = tokenCoding8256_17;
    operand.values[18] = tokenCoding8256_18;
}
x64Token x64Parser::tokenBranches8255[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8256,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8221_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8221_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8221_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8221_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8221(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8221_15;
    operand.values[16] = tokenCoding8221_16;
    operand.values[17] = tokenCoding8221_17;
    operand.values[18] = tokenCoding8221_18;
}
x64Token x64Parser::tokenBranches8220[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8221,
                                           },
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8255},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8219[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8220}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8260_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8260_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8260_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8260_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8260(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8260_15;
    operand.values[16] = tokenCoding8260_16;
    operand.values[17] = tokenCoding8260_17;
    operand.values[18] = tokenCoding8260_18;
}
x64Token x64Parser::tokenBranches8259[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8260,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8224_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8224_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8224_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8224_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8224(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8224_15;
    operand.values[16] = tokenCoding8224_16;
    operand.values[17] = tokenCoding8224_17;
    operand.values[18] = tokenCoding8224_18;
}
x64Token x64Parser::tokenBranches8223[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8224,
                                           },
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8259},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8222[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8223}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8228_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8228_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8228_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8228_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8228(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8228_15;
    operand.values[16] = tokenCoding8228_16;
    operand.values[17] = tokenCoding8228_17;
    operand.values[18] = tokenCoding8228_18;
}
x64Token x64Parser::tokenBranches8227[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8228,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8226[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8227}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8225[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8226}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8232_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8232_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8232_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8232_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8232_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 132, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8232(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8232_15;
    operand.values[16] = tokenCoding8232_16;
    operand.values[22] = tokenCoding8232_22;
    operand.values[17] = tokenCoding8232_17;
    operand.values[18] = tokenCoding8232_18;
}
x64Token x64Parser::tokenBranches8231[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8232,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8230[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8231}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8229[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8230}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8236_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8236_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8236_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8236_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8236(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8236_15;
    operand.values[16] = tokenCoding8236_16;
    operand.values[17] = tokenCoding8236_17;
    operand.values[18] = tokenCoding8236_18;
}
x64Token x64Parser::tokenBranches8235[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8236,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8234[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8235}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8233[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8234}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8240_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8240_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8240_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8240_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8240(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8240_15;
    operand.values[16] = tokenCoding8240_16;
    operand.values[17] = tokenCoding8240_17;
    operand.values[18] = tokenCoding8240_18;
}
x64Token x64Parser::tokenBranches8239[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8240,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8238[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8239}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8237[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8238}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8244_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8244_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8244_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8244_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 133, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8244(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8244_15;
    operand.values[16] = tokenCoding8244_16;
    operand.values[17] = tokenCoding8244_17;
    operand.values[18] = tokenCoding8244_18;
}
x64Token x64Parser::tokenBranches8243[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8244,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8242[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8243}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8241[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8242}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8265_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8265_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8265_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8265_18[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8265(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 449;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8265_15;
    operand.values[16] = tokenCoding8265_16;
    operand.values[17] = tokenCoding8265_17;
    operand.values[18] = tokenCoding8265_18;
}
x64Token x64Parser::tokenBranches8264[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8265,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8263[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8264}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8262[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8263}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8261[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8262},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8270_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8270_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8270_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8270_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 3},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8270(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 512;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8270_15;
    operand.values[16] = tokenCoding8270_16;
    operand.values[17] = tokenCoding8270_17;
    operand.values[18] = tokenCoding8270_18;
}
x64Token x64Parser::tokenBranches8269[] = {{
                                               x64Token::NUMBER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8270,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8268[] = {{x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8269}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8267[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8268}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8266[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8267},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8275_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8275_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8275_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8275_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 4},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8275(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8275_15;
    operand.values[16] = tokenCoding8275_16;
    operand.values[17] = tokenCoding8275_17;
    operand.values[18] = tokenCoding8275_18;
}
x64Token x64Parser::tokenBranches8274[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8275,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8273[] = {{x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8274}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8272[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8273}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8271[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8272},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8280_15[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8280_16[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8280_17[] = {
    {CODING_NAME("omem")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8280_18[] = {
    {CODING_NAME("omem") Coding::stateFunc, 5},
    {CODING_NAME("omem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8280(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 513;
    operand.values[21] = new Coding[2];
    CleanupValues.push_back(operand.values[21]);
    operand.values[21]->type = Coding::number;
    operand.values[21]->val = operands.size();
    operand.values[21]->bits = 0;
    operand.values[21]->field = 0;
    operand.values[21]->unary = 0;
    operand.values[21]->binary = 0;
    operand.values[21][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8280_15;
    operand.values[16] = tokenCoding8280_16;
    operand.values[17] = tokenCoding8280_17;
    operand.values[18] = tokenCoding8280_18;
}
x64Token x64Parser::tokenBranches8279[] = {{
                                               x64Token::NUMBER,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8280,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8278[] = {{x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8279}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8277[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8278}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8276[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8277},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8225(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8229(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8233(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8237(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8241(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8167[] = {
    {x64Token::REGISTER, 0, 0, 0, NULL, NULL, x64Parser::tokenBranches8168},
    {x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches8172},
    {x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8176},
    {x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches8180},
    {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8184},
    {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8192},
    {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8196},
    {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8200},
    {x64Token::ADDRESSCLASS, 14, 0, 0, NULL, NULL, x64Parser::tokenBranches8204},
    {x64Token::ADDRESSCLASS, 15, 0, 0, NULL, NULL, x64Parser::tokenBranches8207},
    {x64Token::ADDRESSCLASS, 17, 0, 0, NULL, NULL, x64Parser::tokenBranches8216},
    {x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches8219},
    {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches8222},
    {x64Token::REGISTERCLASS, 1, 0, 0, NULL, &x64Parser::TokenFunc8225, x64Parser::tokenBranches8225},
    {x64Token::REGISTERCLASS, 14, 0, 0, NULL, &x64Parser::TokenFunc8229, x64Parser::tokenBranches8229},
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc8233, x64Parser::tokenBranches8233},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc8237, x64Parser::tokenBranches8237},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc8241, x64Parser::tokenBranches8241},
    {x64Token::TOKEN, 11, 0, 0, NULL, NULL, x64Parser::tokenBranches8261},
    {x64Token::TOKEN, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches8266},
    {x64Token::TOKEN, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches8271},
    {x64Token::TOKEN, 10, 0, 0, NULL, NULL, x64Parser::tokenBranches8276},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8283_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8283_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8283_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8283_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8283(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8283_15;
    operand.values[16] = tokenCoding8283_16;
    operand.values[17] = tokenCoding8283_17;
    operand.values[18] = tokenCoding8283_18;
}
x64Token x64Parser::tokenBranches8282[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8283,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8285_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8285_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8285_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8285_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8285(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8285_15;
    operand.values[16] = tokenCoding8285_16;
    operand.values[17] = tokenCoding8285_17;
    operand.values[18] = tokenCoding8285_18;
}
x64Token x64Parser::tokenBranches8284[] = {{
                                               x64Token::ADDRESSCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8285,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8293_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8293_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8293_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8293_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8293(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8293_15;
    operand.values[16] = tokenCoding8293_16;
    operand.values[17] = tokenCoding8293_17;
    operand.values[18] = tokenCoding8293_18;
}
Coding x64Parser::tokenCoding8297_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8297_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8297_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8297_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8297_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 192, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8297(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8297_15;
    operand.values[16] = tokenCoding8297_16;
    operand.values[22] = tokenCoding8297_22;
    operand.values[17] = tokenCoding8297_17;
    operand.values[18] = tokenCoding8297_18;
}
x64Token x64Parser::tokenBranches8292[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8293,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8297,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8291[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8292}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8290[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8291},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8301_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8301_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8301_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8301_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8301(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8301_15;
    operand.values[16] = tokenCoding8301_16;
    operand.values[17] = tokenCoding8301_17;
    operand.values[18] = tokenCoding8301_18;
}
x64Token x64Parser::tokenBranches8300[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8301,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8299[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8300}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8298[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches8299},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8305_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8305_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8305_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8305_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8305(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8305_15;
    operand.values[16] = tokenCoding8305_16;
    operand.values[17] = tokenCoding8305_17;
    operand.values[18] = tokenCoding8305_18;
}
x64Token x64Parser::tokenBranches8304[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8305,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8303[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8304}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8302[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8303},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8309_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8309_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8309_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8309_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 193, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8309(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8309_15;
    operand.values[16] = tokenCoding8309_16;
    operand.values[17] = tokenCoding8309_17;
    operand.values[18] = tokenCoding8309_18;
}
x64Token x64Parser::tokenBranches8308[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8309,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8307[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8308}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8306[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8307},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8289[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8290},
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8298},
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8302},
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8306},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8313(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 722;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8312[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8313,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8311[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8312}, {x64Token::EOT}};
void x64Parser::TokenFunc8316(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 723;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8315[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8316,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8314[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8315}, {x64Token::EOT}};
void x64Parser::TokenFunc8319(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 724;
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8318[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8319,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8317[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8318}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8340_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8340_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8340_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8340_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 3},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8340(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8340_15;
    operand.values[16] = tokenCoding8340_16;
    operand.values[17] = tokenCoding8340_17;
    operand.values[18] = tokenCoding8340_18;
}
x64Token x64Parser::tokenBranches8339[] = {{
                                               x64Token::ADDRESSCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8340,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8322(x64Operand& operand, int tokenPos) { operand.operandCoding = 722; }
x64Token x64Parser::tokenBranches8321[] = {{
                                               x64Token::REGISTER,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8322,
                                           },
                                           {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8339},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8320[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8321}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8344_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8344_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8344_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8344_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 4},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8344(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8344_15;
    operand.values[16] = tokenCoding8344_16;
    operand.values[17] = tokenCoding8344_17;
    operand.values[18] = tokenCoding8344_18;
}
x64Token x64Parser::tokenBranches8343[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8344,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8325(x64Operand& operand, int tokenPos) { operand.operandCoding = 723; }
x64Token x64Parser::tokenBranches8324[] = {{
                                               x64Token::REGISTER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8325,
                                           },
                                           {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8343},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8323[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8324}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8348_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8348_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8348_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8348_18[] = {
    {CODING_NAME("rm") Coding::stateFunc, 5},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8348(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8348_15;
    operand.values[16] = tokenCoding8348_16;
    operand.values[17] = tokenCoding8348_17;
    operand.values[18] = tokenCoding8348_18;
}
x64Token x64Parser::tokenBranches8347[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8348,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8328(x64Operand& operand, int tokenPos) { operand.operandCoding = 724; }
x64Token x64Parser::tokenBranches8327[] = {{
                                               x64Token::REGISTER,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8328,
                                           },
                                           {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8347},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8326[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8327}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8332_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8332_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8332_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8332_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8332(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8332_15;
    operand.values[16] = tokenCoding8332_16;
    operand.values[17] = tokenCoding8332_17;
    operand.values[18] = tokenCoding8332_18;
}
x64Token x64Parser::tokenBranches8331[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8332,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8330[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8331}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8329[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8330}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8336_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8336_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8336_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8336_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8336_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8336(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8336_15;
    operand.values[16] = tokenCoding8336_16;
    operand.values[22] = tokenCoding8336_22;
    operand.values[17] = tokenCoding8336_17;
    operand.values[18] = tokenCoding8336_18;
}
x64Token x64Parser::tokenBranches8335[] = {{
                                               x64Token::ADDRESSCLASS,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8336,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8334[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8335}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8333[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8334}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8352_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8352_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8352_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8352_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8352(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8352_15;
    operand.values[16] = tokenCoding8352_16;
    operand.values[17] = tokenCoding8352_17;
    operand.values[18] = tokenCoding8352_18;
}
Coding x64Parser::tokenCoding8356_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8356_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8356_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8356_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8356_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 134, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8356(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8356_15;
    operand.values[16] = tokenCoding8356_16;
    operand.values[22] = tokenCoding8356_22;
    operand.values[17] = tokenCoding8356_17;
    operand.values[18] = tokenCoding8356_18;
}
x64Token x64Parser::tokenBranches8351[] = {{
                                               x64Token::REGISTERCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8352,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               14,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8356,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8350[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8351}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8349[] = {{x64Token::ADDRESSCLASS, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8350},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8360_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8360_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8360_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8360_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 3},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8360(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8360_15;
    operand.values[16] = tokenCoding8360_16;
    operand.values[17] = tokenCoding8360_17;
    operand.values[18] = tokenCoding8360_18;
}
x64Token x64Parser::tokenBranches8359[] = {{
                                               x64Token::REGISTERCLASS,
                                               4,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8360,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8358[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8359}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8357[] = {{x64Token::ADDRESSCLASS, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches8358},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8364_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8364_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8364_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8364_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 4},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8364(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8364_15;
    operand.values[16] = tokenCoding8364_16;
    operand.values[17] = tokenCoding8364_17;
    operand.values[18] = tokenCoding8364_18;
}
x64Token x64Parser::tokenBranches8363[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8364,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8362[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8363}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8361[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8362},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8368_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8368_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8368_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8368_18[] = {
    {CODING_NAME("modreg") Coding::stateFunc, 5},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 135, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8368(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8368_15;
    operand.values[16] = tokenCoding8368_16;
    operand.values[17] = tokenCoding8368_17;
    operand.values[18] = tokenCoding8368_18;
}
x64Token x64Parser::tokenBranches8367[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8368,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8366[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8367}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8365[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8366},
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8320(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8323(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8326(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8329(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8333(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8310[] = {
    {x64Token::REGISTER, 2, 0, 0, NULL, NULL, x64Parser::tokenBranches8311},
    {x64Token::REGISTER, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8314},
    {x64Token::REGISTER, 4, 0, 0, NULL, NULL, x64Parser::tokenBranches8317},
    {x64Token::REGISTERCLASS, 4, 0, 0, NULL, &x64Parser::TokenFunc8320, x64Parser::tokenBranches8320},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc8323, x64Parser::tokenBranches8323},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc8326, x64Parser::tokenBranches8326},
    {x64Token::REGISTERCLASS, 1, 0, 0, NULL, &x64Parser::TokenFunc8329, x64Parser::tokenBranches8329},
    {x64Token::REGISTERCLASS, 14, 0, 0, NULL, &x64Parser::TokenFunc8333, x64Parser::tokenBranches8333},
    {x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8349},
    {x64Token::TOKEN, 8, 0, 1, NULL, NULL, x64Parser::tokenBranches8357},
    {x64Token::TOKEN, 9, 0, 1, NULL, NULL, x64Parser::tokenBranches8361},
    {x64Token::TOKEN, 10, 0, 1, NULL, NULL, x64Parser::tokenBranches8365},
    {x64Token::EOT}};
void x64Parser::TokenFunc8375(x64Operand& operand, int tokenPos) { operand.operandCoding = 725; }
x64Token x64Parser::tokenBranches8374[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8375,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8387(x64Operand& operand, int tokenPos) { operand.operandCoding = 727; }
x64Token x64Parser::tokenBranches8386[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8387,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8399(x64Operand& operand, int tokenPos) { operand.operandCoding = 729; }
x64Token x64Parser::tokenBranches8398[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8399,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8373[] = {{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches8374},
                                           {x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches8386},
                                           {x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches8398},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8372[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8373}, {x64Token::EOT}};
void x64Parser::TokenFunc8381(x64Operand& operand, int tokenPos) { operand.operandCoding = 726; }
x64Token x64Parser::tokenBranches8380[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8381,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8393(x64Operand& operand, int tokenPos) { operand.operandCoding = 728; }
x64Token x64Parser::tokenBranches8392[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8393,
                                           },
                                           {x64Token::EOT}};
void x64Parser::TokenFunc8405(x64Operand& operand, int tokenPos) { operand.operandCoding = 730; }
x64Token x64Parser::tokenBranches8404[] = {{
                                               x64Token::TOKEN,
                                               2,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8405,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8379[] = {{x64Token::REGISTER, 29, 0, 0, NULL, NULL, x64Parser::tokenBranches8380},
                                           {x64Token::REGISTER, 30, 0, 0, NULL, NULL, x64Parser::tokenBranches8392},
                                           {x64Token::REGISTER, 31, 0, 0, NULL, NULL, x64Parser::tokenBranches8404},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8378[] = {{x64Token::TOKEN, 3, 0, 0, NULL, NULL, x64Parser::tokenBranches8379}, {x64Token::EOT}};
void x64Parser::TokenFunc8378(x64Operand& operand, int tokenPos)
{
    operand.values[1] = new Coding[2];
    CleanupValues.push_back(operand.values[1]);
    operand.values[1]->type = Coding::reg;
    operand.values[1]->val = inputTokens[tokenPos]->val->ival;
    operand.values[1]->bits = 0;
    operand.values[1]->field = 0;
    operand.values[1]->unary = 0;
    operand.values[1]->binary = 0;
    operand.values[1][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8371[] = {
    {x64Token::REGISTER, 96, 0, 0, NULL, NULL, x64Parser::tokenBranches8372},
    {x64Token::REGISTERCLASS, 19, 0, 0, NULL, &x64Parser::TokenFunc8378, x64Parser::tokenBranches8378},
    {x64Token::EOT}};
x64Token x64Parser::tokenBranches8370[] = {{x64Token::TOKEN, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8371}, {x64Token::EOT}};
void x64Parser::TokenFunc8406(x64Operand& operand, int tokenPos) { operand.operandCoding = 731; }
x64Token x64Parser::tokenBranches8369[] = {{x64Token::TOKEN, 11, 0, 1, NULL, NULL, x64Parser::tokenBranches8370},
                                           {
                                               x64Token::EMPTY,
                                               0,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8406,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8410_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8410_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8410_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8410_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8410(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8410_15;
    operand.values[16] = tokenCoding8410_16;
    operand.values[17] = tokenCoding8410_17;
    operand.values[18] = tokenCoding8410_18;
}
x64Token x64Parser::tokenBranches8409[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8410,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8412_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8412_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8412_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8412_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8412(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8412_15;
    operand.values[16] = tokenCoding8412_16;
    operand.values[17] = tokenCoding8412_17;
    operand.values[18] = tokenCoding8412_18;
}
x64Token x64Parser::tokenBranches8411[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8412,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8414_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8414_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8414_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8414_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8414(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8414_15;
    operand.values[16] = tokenCoding8414_16;
    operand.values[17] = tokenCoding8414_17;
    operand.values[18] = tokenCoding8414_18;
}
x64Token x64Parser::tokenBranches8413[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8414,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8416_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8416_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8416_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8416_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8416(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8416_15;
    operand.values[16] = tokenCoding8416_16;
    operand.values[17] = tokenCoding8416_17;
    operand.values[18] = tokenCoding8416_18;
}
x64Token x64Parser::tokenBranches8415[] = {{
                                               x64Token::ADDRESSCLASS,
                                               1,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8416,
                                           },
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8469_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8469_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8469_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8469_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8469_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8469(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8469_15;
    operand.values[16] = tokenCoding8469_16;
    operand.values[22] = tokenCoding8469_22;
    operand.values[17] = tokenCoding8469_17;
    operand.values[18] = tokenCoding8469_18;
}
x64Token x64Parser::tokenBranches8468[] = {{
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8469,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8467[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8468}, {x64Token::EOT}};
void x64Parser::TokenFunc8467(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8466[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8467, x64Parser::tokenBranches8467}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8473_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8473_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8473_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8473_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8473_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8473(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8473_15;
    operand.values[16] = tokenCoding8473_16;
    operand.values[22] = tokenCoding8473_22;
    operand.values[17] = tokenCoding8473_17;
    operand.values[18] = tokenCoding8473_18;
}
x64Token x64Parser::tokenBranches8472[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8473,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8471[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8472}, {x64Token::EOT}};
void x64Parser::TokenFunc8471(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8470[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8471, x64Parser::tokenBranches8471}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8489_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8489_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8489_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8489_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8489_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8489(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8489_15;
    operand.values[16] = tokenCoding8489_16;
    operand.values[22] = tokenCoding8489_22;
    operand.values[17] = tokenCoding8489_17;
    operand.values[18] = tokenCoding8489_18;
}
x64Token x64Parser::tokenBranches8488[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8489,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8487[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8488}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8492_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8492_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8492_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8492_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8492_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8492(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8492_15;
    operand.values[16] = tokenCoding8492_16;
    operand.values[22] = tokenCoding8492_22;
    operand.values[17] = tokenCoding8492_17;
    operand.values[18] = tokenCoding8492_18;
}
x64Token x64Parser::tokenBranches8491[] = {{
                                               x64Token::ADDRESSCLASS,
                                               5,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8492,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8490[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8491}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8495_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8495_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8495_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8495_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8495_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8495(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8495_15;
    operand.values[16] = tokenCoding8495_16;
    operand.values[22] = tokenCoding8495_22;
    operand.values[17] = tokenCoding8495_17;
    operand.values[18] = tokenCoding8495_18;
}
Coding x64Parser::tokenCoding8498_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8498_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8498_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8498_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8498_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8498(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8498_15;
    operand.values[16] = tokenCoding8498_16;
    operand.values[22] = tokenCoding8498_22;
    operand.values[17] = tokenCoding8498_17;
    operand.values[18] = tokenCoding8498_18;
}
x64Token x64Parser::tokenBranches8494[] = {{
                                               x64Token::REGISTERCLASS,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8495,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8498,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8493[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8494}, {x64Token::EOT}};
void x64Parser::TokenFunc8487(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8490(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8486[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8487, x64Parser::tokenBranches8487},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8490, x64Parser::tokenBranches8490},
    {x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8493},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8502_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8502_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8502_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8502_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8502_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8502(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8502_15;
    operand.values[16] = tokenCoding8502_16;
    operand.values[22] = tokenCoding8502_22;
    operand.values[17] = tokenCoding8502_17;
    operand.values[18] = tokenCoding8502_18;
}
x64Token x64Parser::tokenBranches8501[] = {{
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8502,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8500[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8501}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8505_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8505_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8505_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8505_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8505_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8505(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8505_15;
    operand.values[16] = tokenCoding8505_16;
    operand.values[22] = tokenCoding8505_22;
    operand.values[17] = tokenCoding8505_17;
    operand.values[18] = tokenCoding8505_18;
}
x64Token x64Parser::tokenBranches8504[] = {{
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8505,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8503[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8504}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8508_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8508_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8508_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8508_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8508_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8508(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8508_15;
    operand.values[16] = tokenCoding8508_16;
    operand.values[22] = tokenCoding8508_22;
    operand.values[17] = tokenCoding8508_17;
    operand.values[18] = tokenCoding8508_18;
}
Coding x64Parser::tokenCoding8511_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8511_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8511_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::valSpecified), 243, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8511_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8511_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8511(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8511_15;
    operand.values[16] = tokenCoding8511_16;
    operand.values[22] = tokenCoding8511_22;
    operand.values[17] = tokenCoding8511_17;
    operand.values[18] = tokenCoding8511_18;
}
x64Token x64Parser::tokenBranches8507[] = {{
                                               x64Token::ADDRESSCLASS,
                                               21,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8508,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8511,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8506[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8507}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8514_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8514_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8514_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8514_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8514_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8514(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8514_15;
    operand.values[16] = tokenCoding8514_16;
    operand.values[22] = tokenCoding8514_22;
    operand.values[17] = tokenCoding8514_17;
    operand.values[18] = tokenCoding8514_18;
}
Coding x64Parser::tokenCoding8520_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8520_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8520_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8520_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8520_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 126, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8520(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8520_15;
    operand.values[16] = tokenCoding8520_16;
    operand.values[22] = tokenCoding8520_22;
    operand.values[17] = tokenCoding8520_17;
    operand.values[18] = tokenCoding8520_18;
}
x64Token x64Parser::tokenBranches8513[] = {{
                                               x64Token::REGISTERCLASS,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8514,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8520,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8512[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8513}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8517_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8517_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8517_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8517_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8517_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 127, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8517(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8517_15;
    operand.values[16] = tokenCoding8517_16;
    operand.values[22] = tokenCoding8517_22;
    operand.values[17] = tokenCoding8517_17;
    operand.values[18] = tokenCoding8517_18;
}
Coding x64Parser::tokenCoding8523_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8523_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8523_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8523_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8523_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8523(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8523_15;
    operand.values[16] = tokenCoding8523_16;
    operand.values[22] = tokenCoding8523_22;
    operand.values[17] = tokenCoding8523_17;
    operand.values[18] = tokenCoding8523_18;
}
x64Token x64Parser::tokenBranches8516[] = {{
                                               x64Token::REGISTERCLASS,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8517,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8523,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8515[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8516}, {x64Token::EOT}};
void x64Parser::TokenFunc8503(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8506(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8499[] = {
    {x64Token::ADDRESSCLASS, 24, 0, 0, NULL, NULL, x64Parser::tokenBranches8500},
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8503, x64Parser::tokenBranches8503},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8506, x64Parser::tokenBranches8506},
    {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches8512},
    {x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8515},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8531_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8531_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8531_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8531_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8531_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8531(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8531_15;
    operand.values[16] = tokenCoding8531_16;
    operand.values[22] = tokenCoding8531_22;
    operand.values[17] = tokenCoding8531_17;
    operand.values[18] = tokenCoding8531_18;
}
x64Token x64Parser::tokenBranches8530[] = {{
                                               x64Token::ADDRESSCLASS,
                                               27,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8531,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8529[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8530}, {x64Token::EOT}};
void x64Parser::TokenFunc8529(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8528[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8529, x64Parser::tokenBranches8529}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8537_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8537_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8537_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8537_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8537_18[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8537(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8537_15;
    operand.values[16] = tokenCoding8537_16;
    operand.values[22] = tokenCoding8537_22;
    operand.values[17] = tokenCoding8537_17;
    operand.values[18] = tokenCoding8537_18;
}
x64Token x64Parser::tokenBranches8536[] = {{
                                               x64Token::ADDRESSCLASS,
                                               27,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8537,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8535[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8536}, {x64Token::EOT}};
void x64Parser::TokenFunc8535(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8534[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8535, x64Parser::tokenBranches8535}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8545_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8545_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8545_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8545_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8545_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8545(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8545_15;
    operand.values[16] = tokenCoding8545_16;
    operand.values[22] = tokenCoding8545_22;
    operand.values[17] = tokenCoding8545_17;
    operand.values[18] = tokenCoding8545_18;
}
x64Token x64Parser::tokenBranches8544[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8545,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8543[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8544}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8542[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8543},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8549_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8549_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8549_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8549(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8549_15;
    operand.values[16] = tokenCoding8549_16;
    operand.values[17] = tokenCoding8549_17;
}
Coding x64Parser::tokenCoding8552_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8552_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8552_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8552(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8552_15;
    operand.values[16] = tokenCoding8552_16;
    operand.values[17] = tokenCoding8552_17;
}
x64Token x64Parser::tokenBranches8548[] = {{
                                               x64Token::REGISTERCLASS,
                                               7,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8549,
                                           },
                                           {
                                               x64Token::REGISTERCLASS,
                                               10,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8552,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8547[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8548}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8546[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8547},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8556_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8556_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8556_22[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8556_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8556_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8556(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8556_15;
    operand.values[16] = tokenCoding8556_16;
    operand.values[22] = tokenCoding8556_22;
    operand.values[17] = tokenCoding8556_17;
    operand.values[18] = tokenCoding8556_18;
}
x64Token x64Parser::tokenBranches8555[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8556,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8554[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8555}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8553[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8554},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8560_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8560_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8560_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8560_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8560_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8560(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8560_15;
    operand.values[16] = tokenCoding8560_16;
    operand.values[22] = tokenCoding8560_22;
    operand.values[17] = tokenCoding8560_17;
    operand.values[18] = tokenCoding8560_18;
}
x64Token x64Parser::tokenBranches8559[] = {{
                                               x64Token::REGISTERCLASS,
                                               17,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8560,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8558[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8559}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8557[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8558},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8564_15[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8564_16[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8564_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8564_17[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8564_18[] = {
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("modreg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8564(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
    operand.values[15] = tokenCoding8564_15;
    operand.values[16] = tokenCoding8564_16;
    operand.values[22] = tokenCoding8564_22;
    operand.values[17] = tokenCoding8564_17;
    operand.values[18] = tokenCoding8564_18;
}
x64Token x64Parser::tokenBranches8563[] = {{
                                               x64Token::REGISTERCLASS,
                                               18,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8564,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8562[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8563}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8561[] = {{x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8562},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8568_15[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8568_16[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8568_22[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8568_17[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8568_18[] = {
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("reg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8568(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8568_15;
    operand.values[16] = tokenCoding8568_16;
    operand.values[22] = tokenCoding8568_22;
    operand.values[17] = tokenCoding8568_17;
    operand.values[18] = tokenCoding8568_18;
}
x64Token x64Parser::tokenBranches8567[] = {{
                                               x64Token::ADDRESSCLASS,
                                               24,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8568,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8566[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8567}, {x64Token::EOT}};
void x64Parser::TokenFunc8566(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8565[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8566, x64Parser::tokenBranches8566}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8596_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8596_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8596_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8596_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8596(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8596_15;
    operand.values[16] = tokenCoding8596_16;
    operand.values[22] = tokenCoding8596_22;
    operand.values[17] = tokenCoding8596_17;
}
x64Token x64Parser::tokenBranches8595[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8596,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8594[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8595}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8593[] = {{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches8594},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8592[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8593}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8601_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8601_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8601_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8601_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8601(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8601_15;
    operand.values[16] = tokenCoding8601_16;
    operand.values[22] = tokenCoding8601_22;
    operand.values[17] = tokenCoding8601_17;
}
x64Token x64Parser::tokenBranches8600[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8601,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8599[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8600}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8598[] = {{x64Token::ADDRESSCLASS, 9, 0, 0, NULL, NULL, x64Parser::tokenBranches8599},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8597[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8598}, {x64Token::EOT}};
void x64Parser::TokenFunc8592(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8597(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8591[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8592, x64Parser::tokenBranches8592},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8597, x64Parser::tokenBranches8597},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8620_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8620_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8620_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8620_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8620(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8620_15;
    operand.values[16] = tokenCoding8620_16;
    operand.values[22] = tokenCoding8620_22;
    operand.values[17] = tokenCoding8620_17;
}
x64Token x64Parser::tokenBranches8619[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8620,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8618[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8619}, {x64Token::EOT}};
void x64Parser::TokenFunc8618(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8617[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8618, x64Parser::tokenBranches8618}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8616[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8617}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8615[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8616},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8626_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8626_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8626_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8626_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8626(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8626_15;
    operand.values[16] = tokenCoding8626_16;
    operand.values[22] = tokenCoding8626_22;
    operand.values[17] = tokenCoding8626_17;
}
x64Token x64Parser::tokenBranches8625[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8626,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8624[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8625}, {x64Token::EOT}};
void x64Parser::TokenFunc8624(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8623[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8624, x64Parser::tokenBranches8624}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8622[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8623}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8621[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8622},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8632_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8632_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8632_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8632_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8632(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8632_15;
    operand.values[16] = tokenCoding8632_16;
    operand.values[22] = tokenCoding8632_22;
    operand.values[17] = tokenCoding8632_17;
}
x64Token x64Parser::tokenBranches8631[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8632,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8630[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8631}, {x64Token::EOT}};
void x64Parser::TokenFunc8630(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8629[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8630, x64Parser::tokenBranches8630}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8628[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8629}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8627[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8628},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8638_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8638_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8638_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8638_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8638_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8638(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8638_15;
    operand.values[16] = tokenCoding8638_16;
    operand.values[22] = tokenCoding8638_22;
    operand.values[17] = tokenCoding8638_17;
    operand.values[18] = tokenCoding8638_18;
}
x64Token x64Parser::tokenBranches8637[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8638,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8636[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8637}, {x64Token::EOT}};
void x64Parser::TokenFunc8636(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8635[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8636, x64Parser::tokenBranches8636}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8634[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8635}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8643_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8643_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8643_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8643_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8643_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8643(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8643_15;
    operand.values[16] = tokenCoding8643_16;
    operand.values[22] = tokenCoding8643_22;
    operand.values[17] = tokenCoding8643_17;
    operand.values[18] = tokenCoding8643_18;
}
x64Token x64Parser::tokenBranches8642[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8643,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8641[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8642}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8640[] = {{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches8641},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8639[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8640}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8648_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8648_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8648_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8648_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8648_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 197, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8648(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8648_15;
    operand.values[16] = tokenCoding8648_16;
    operand.values[22] = tokenCoding8648_22;
    operand.values[17] = tokenCoding8648_17;
    operand.values[18] = tokenCoding8648_18;
}
x64Token x64Parser::tokenBranches8647[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8648,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8646[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8647}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8645[] = {{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches8646},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8644[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8645}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8653_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8653_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8653_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8653_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8653_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8653(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8653_15;
    operand.values[16] = tokenCoding8653_16;
    operand.values[22] = tokenCoding8653_22;
    operand.values[17] = tokenCoding8653_17;
    operand.values[18] = tokenCoding8653_18;
}
x64Token x64Parser::tokenBranches8652[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8653,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8651[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8652}, {x64Token::EOT}};
void x64Parser::TokenFunc8651(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8650[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8651, x64Parser::tokenBranches8651}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8649[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8650}, {x64Token::EOT}};
void x64Parser::TokenFunc8639(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8644(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8633[] = {
    {x64Token::ADDRESSCLASS, 19, 0, 0, NULL, NULL, x64Parser::tokenBranches8634},
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc8639, x64Parser::tokenBranches8639},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc8644, x64Parser::tokenBranches8644},
    {x64Token::ADDRESSCLASS, 1, 0, 0, NULL, NULL, x64Parser::tokenBranches8649},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8659_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8659_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8659_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8659_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8659(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8659_15;
    operand.values[16] = tokenCoding8659_16;
    operand.values[22] = tokenCoding8659_22;
    operand.values[17] = tokenCoding8659_17;
}
x64Token x64Parser::tokenBranches8658[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8659,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8657[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8658}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8656[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8657},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8655[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8656}, {x64Token::EOT}};
void x64Parser::TokenFunc8655(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8654[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8655, x64Parser::tokenBranches8655}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8665_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8665_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8665_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8665_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8665(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8665_15;
    operand.values[16] = tokenCoding8665_16;
    operand.values[22] = tokenCoding8665_22;
    operand.values[17] = tokenCoding8665_17;
}
x64Token x64Parser::tokenBranches8664[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8665,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8663[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8664}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8662[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8663},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8661[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8662}, {x64Token::EOT}};
void x64Parser::TokenFunc8661(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8660[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8661, x64Parser::tokenBranches8661}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8671_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8671_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8671_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8671_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8671(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8671_15;
    operand.values[16] = tokenCoding8671_16;
    operand.values[22] = tokenCoding8671_22;
    operand.values[17] = tokenCoding8671_17;
}
x64Token x64Parser::tokenBranches8670[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8671,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8669[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8670}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8668[] = {{x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8669},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8667[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8668}, {x64Token::EOT}};
void x64Parser::TokenFunc8667(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8666[] = {
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8667, x64Parser::tokenBranches8667}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8677_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8677_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8677_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8677_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8677_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8677(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8677_15;
    operand.values[16] = tokenCoding8677_16;
    operand.values[22] = tokenCoding8677_22;
    operand.values[17] = tokenCoding8677_17;
    operand.values[18] = tokenCoding8677_18;
}
x64Token x64Parser::tokenBranches8676[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8677,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8675[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8676}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8674[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8675},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8673[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8674}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8682_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8682_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8682_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8682_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8682_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8682(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8682_15;
    operand.values[16] = tokenCoding8682_16;
    operand.values[22] = tokenCoding8682_22;
    operand.values[17] = tokenCoding8682_17;
    operand.values[18] = tokenCoding8682_18;
}
x64Token x64Parser::tokenBranches8681[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8682,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8680[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8681}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8687_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8687_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8687_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8687_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8687_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8687(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8687_15;
    operand.values[16] = tokenCoding8687_16;
    operand.values[22] = tokenCoding8687_22;
    operand.values[17] = tokenCoding8687_17;
    operand.values[18] = tokenCoding8687_18;
}
x64Token x64Parser::tokenBranches8686[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8687,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8685[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8686}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8692_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8692_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8692_22[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8692_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8692_18[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("imm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8692(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8692_15;
    operand.values[16] = tokenCoding8692_16;
    operand.values[22] = tokenCoding8692_22;
    operand.values[17] = tokenCoding8692_17;
    operand.values[18] = tokenCoding8692_18;
}
x64Token x64Parser::tokenBranches8691[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8692,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8690[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8691}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8679[] = {{x64Token::ADDRESSCLASS, 5, 0, 0, NULL, NULL, x64Parser::tokenBranches8680},
                                           {x64Token::ADDRESSCLASS, 21, 0, 0, NULL, NULL, x64Parser::tokenBranches8685},
                                           {x64Token::ADDRESSCLASS, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8690},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8678[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8679}, {x64Token::EOT}};
void x64Parser::TokenFunc8673(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8678(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8672[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8673, x64Parser::tokenBranches8673},
    {x64Token::REGISTERCLASS, 17, 0, 0, NULL, &x64Parser::TokenFunc8678, x64Parser::tokenBranches8678},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8701_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8701_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8701_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8701_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8701(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8701_15;
    operand.values[16] = tokenCoding8701_16;
    operand.values[22] = tokenCoding8701_22;
    operand.values[17] = tokenCoding8701_17;
}
Coding x64Parser::tokenCoding8707_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8707_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8707_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8707_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8707(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8707_15;
    operand.values[16] = tokenCoding8707_16;
    operand.values[22] = tokenCoding8707_22;
    operand.values[17] = tokenCoding8707_17;
}
x64Token x64Parser::tokenBranches8700[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8701,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8707,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8699[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8700}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8704_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8704_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8704_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8704_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8704(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8704_15;
    operand.values[16] = tokenCoding8704_16;
    operand.values[22] = tokenCoding8704_22;
    operand.values[17] = tokenCoding8704_17;
}
Coding x64Parser::tokenCoding8710_15[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8710_16[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8710_22[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8710_17[] = {
    {CODING_NAME("rm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8710(x64Operand& operand, int tokenPos)
{
    operand.values[15] = tokenCoding8710_15;
    operand.values[16] = tokenCoding8710_16;
    operand.values[22] = tokenCoding8710_22;
    operand.values[17] = tokenCoding8710_17;
}
x64Token x64Parser::tokenBranches8703[] = {{
                                               x64Token::ADDRESSCLASS,
                                               8,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8704,
                                           },
                                           {
                                               x64Token::ADDRESSCLASS,
                                               9,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8710,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8702[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8703}, {x64Token::EOT}};
void x64Parser::TokenFunc8699(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
void x64Parser::TokenFunc8702(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8698[] = {
    {x64Token::REGISTERCLASS, 7, 0, 0, NULL, &x64Parser::TokenFunc8699, x64Parser::tokenBranches8699},
    {x64Token::REGISTERCLASS, 10, 0, 0, NULL, &x64Parser::TokenFunc8702, x64Parser::tokenBranches8702},
    {x64Token::EOT}};
Coding x64Parser::tokenCoding8724_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8724_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 3, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8724_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8724(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8724_15;
    operand.values[16] = tokenCoding8724_16;
    operand.values[17] = tokenCoding8724_17;
}
x64Token x64Parser::tokenBranches8723[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8724,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8722[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8723}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8721[] = {{x64Token::ADDRESSCLASS, 8, 0, 0, NULL, NULL, x64Parser::tokenBranches8722},
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8720[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8721}, {x64Token::EOT}};
void x64Parser::TokenFunc8720(x64Operand& operand, int tokenPos)
{
    operand.values[19] = new Coding[2];
    CleanupValues.push_back(operand.values[19]);
    operand.values[19]->type = Coding::reg;
    operand.values[19]->val = inputTokens[tokenPos]->val->ival;
    operand.values[19]->bits = 0;
    operand.values[19]->field = 0;
    operand.values[19]->unary = 0;
    operand.values[19]->binary = 0;
    operand.values[19][1].type = Coding::eot;
}
x64Token x64Parser::tokenBranches8719[] = {
    {x64Token::REGISTERCLASS, 18, 0, 0, NULL, &x64Parser::TokenFunc8720, x64Parser::tokenBranches8720}, {x64Token::EOT}};
Coding x64Parser::tokenCoding8729_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8729_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8729_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8729(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8729_15;
    operand.values[16] = tokenCoding8729_16;
    operand.values[17] = tokenCoding8729_17;
}
x64Token x64Parser::tokenBranches8728[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8729,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8727[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8728}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8726[] = {{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches8727},
                                           {x64Token::EOT}};
Coding x64Parser::tokenCoding8738_15[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8738_16[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::tokenCoding8738_17[] = {
    {CODING_NAME("imm")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
void x64Parser::TokenFunc8738(x64Operand& operand, int tokenPos)
{
    operand.operandCoding = 468;
    operand.values[25] = new Coding[2];
    CleanupValues.push_back(operand.values[25]);
    operand.values[25]->type = Coding::number;
    operand.values[25]->val = operands.size();
    operand.values[25]->bits = 0;
    operand.values[25]->field = 0;
    operand.values[25]->unary = 0;
    operand.values[25]->binary = 0;
    operand.values[25][1].type = Coding::eot;
    operands.push_back(numeric);
    operand.values[15] = tokenCoding8738_15;
    operand.values[16] = tokenCoding8738_16;
    operand.values[17] = tokenCoding8738_17;
}
x64Token x64Parser::tokenBranches8737[] = {{
                                               x64Token::NUMBER,
                                               3,
                                               1,
                                               0,
                                               NULL,
                                               &x64Parser::TokenFunc8738,
                                           },
                                           {x64Token::EOT}};
x64Token x64Parser::tokenBranches8736[] = {{x64Token::TOKEN, 7, 0, 0, NULL, NULL, x64Parser::tokenBranches8737}, {x64Token::EOT}};
x64Token x64Parser::tokenBranches8735[] = {{x64Token::ADDRESSCLASS, 27, 0, 0, NULL, NULL, x64Parser::tokenBranches8736},
                                           {x64Token::EOT}};
asmError x64Parser::Opcode0(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5267, operand);
    return rv;
}
asmError x64Parser::Opcode1(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5269, operand);
    return rv;
}
asmError x64Parser::Opcode2(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5271, operand);
    return rv;
}
asmError x64Parser::Opcode3(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5296, operand);
    return rv;
}
asmError x64Parser::Opcode4(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5309, operand);
    return rv;
}
asmError x64Parser::Opcode5(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5483, operand);
    return rv;
}
asmError x64Parser::Opcode6(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5511, operand);
    return rv;
}
asmError x64Parser::Opcode7(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5527, operand);
    return rv;
}
asmError x64Parser::Opcode8(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5540, operand);
    return rv;
}
asmError x64Parser::Opcode9(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5552, operand);
    return rv;
}
asmError x64Parser::Opcode10(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5558, operand);
    return rv;
}
asmError x64Parser::Opcode11(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5563, operand);
    return rv;
}
asmError x64Parser::Opcode12(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5566, operand);
    return rv;
}
asmError x64Parser::Opcode13(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5575, operand);
    return rv;
}
asmError x64Parser::Opcode14(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5588, operand);
    return rv;
}
asmError x64Parser::Opcode15(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5591, operand);
    return rv;
}
asmError x64Parser::Opcode16(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5634, operand);
    return rv;
}
asmError x64Parser::Opcode17(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5729, operand);
    return rv;
}
asmError x64Parser::Opcode18(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5766, operand);
    return rv;
}
asmError x64Parser::Opcode19(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5768, operand);
    return rv;
}
asmError x64Parser::Opcode20(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5772, operand);
    return rv;
}
asmError x64Parser::Opcode21(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5779, operand);
    return rv;
}
asmError x64Parser::Opcode22(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5786, operand);
    return rv;
}
asmError x64Parser::Opcode23(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5793, operand);
    return rv;
}
asmError x64Parser::Opcode24(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5797, operand);
    return rv;
}
asmError x64Parser::Opcode25(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5801, operand);
    return rv;
}
asmError x64Parser::Opcode26(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5808, operand);
    return rv;
}
asmError x64Parser::Opcode27(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5817, operand);
    return rv;
}
asmError x64Parser::Opcode28(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5824, operand);
    return rv;
}
asmError x64Parser::Opcode29(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5830, operand);
    return rv;
}
asmError x64Parser::Opcode30(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5843, operand);
    return rv;
}
asmError x64Parser::Opcode31(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5849, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings32_18[] = {
    {CODING_NAME("aaa") Coding::stateFunc, 6},
    {CODING_NAME("aaa")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 55, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode32(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings32_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings33_18[] = {
    {CODING_NAME("aad") Coding::stateFunc, 6},
    {CODING_NAME("aad")(Coding::Type)(Coding::valSpecified), 213, 0, 0, 0, 0},
    {CODING_NAME("aad")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode33(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings33_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings34_18[] = {
    {CODING_NAME("aam") Coding::stateFunc, 6},
    {CODING_NAME("aam")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, 0, 0, 0},
    {CODING_NAME("aam")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode34(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings34_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings35_18[] = {
    {CODING_NAME("aas") Coding::stateFunc, 6},
    {CODING_NAME("aas")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 63, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode35(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings35_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings36_17[] = {
    {CODING_NAME("adc")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings36_35[] = {
    {CODING_NAME("adc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings36_36[] = {
    {CODING_NAME("adc")(Coding::Type)(Coding::valSpecified), 16, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode36(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings36_17;
    operand.values[35] = OpcodeCodings36_35;
    operand.values[36] = OpcodeCodings36_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings37_17[] = {
    {CODING_NAME("add")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings37_35[] = {
    {CODING_NAME("add")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings37_36[] = {
    {CODING_NAME("add")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode37(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings37_17;
    operand.values[35] = OpcodeCodings37_35;
    operand.values[36] = OpcodeCodings37_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings38_17[] = {
    {CODING_NAME("and")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings38_35[] = {
    {CODING_NAME("and")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 36, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings38_36[] = {
    {CODING_NAME("and")(Coding::Type)(Coding::valSpecified), 32, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode38(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings38_17;
    operand.values[35] = OpcodeCodings38_35;
    operand.values[36] = OpcodeCodings38_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
asmError x64Parser::Opcode39(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5862, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings40_35[] = {
    {CODING_NAME("bound") Coding::stateFunc, 6},
    {CODING_NAME("bound")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode40(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings40_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings41_35[] = {
    {CODING_NAME("bsf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bsf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 188, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode41(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings41_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings42_35[] = {
    {CODING_NAME("bsr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bsr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 189, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode42(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings42_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
asmError x64Parser::Opcode43(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5869, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings44_17[] = {
    {CODING_NAME("bt")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings44_35[] = {
    {CODING_NAME("bt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings44_36[] = {
    {CODING_NAME("bt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode44(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings44_17;
    operand.values[35] = OpcodeCodings44_35;
    operand.values[36] = OpcodeCodings44_36;
    asmError rv;
    {
        rv = Opcode5(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings45_17[] = {
    {CODING_NAME("btc")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings45_35[] = {
    {CODING_NAME("btc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("btc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings45_36[] = {
    {CODING_NAME("btc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("btc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 187, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode45(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings45_17;
    operand.values[35] = OpcodeCodings45_35;
    operand.values[36] = OpcodeCodings45_36;
    asmError rv;
    {
        rv = Opcode5(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings46_17[] = {
    {CODING_NAME("btr")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings46_35[] = {
    {CODING_NAME("btr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("btr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings46_36[] = {
    {CODING_NAME("btr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("btr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 179, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode46(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings46_17;
    operand.values[35] = OpcodeCodings46_35;
    operand.values[36] = OpcodeCodings46_36;
    asmError rv;
    {
        rv = Opcode5(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings47_17[] = {
    {CODING_NAME("bts")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings47_35[] = {
    {CODING_NAME("bts")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bts")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 186, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings47_36[] = {
    {CODING_NAME("bts")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("bts")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode47(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings47_17;
    operand.values[35] = OpcodeCodings47_35;
    operand.values[36] = OpcodeCodings47_36;
    asmError rv;
    {
        rv = Opcode5(operand);
    }
    return rv;
}
asmError x64Parser::Opcode48(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5876, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings49_18[] = {
    {CODING_NAME("cbw") Coding::stateFunc, 3},
    {CODING_NAME("cbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode49(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings49_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings50_18[] = {
    {CODING_NAME("cdq") Coding::stateFunc, 4},
    {CODING_NAME("cdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode50(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings50_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode51(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5911, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings52_18[] = {
    {CODING_NAME("clc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode52(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings52_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings53_18[] = {
    {CODING_NAME("cld")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode53(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings53_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings54_18[] = {
    {CODING_NAME("cli")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode54(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings54_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings55_18[] = {
    {CODING_NAME("clts")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode55(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings55_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings56_18[] = {
    {CODING_NAME("cmc")(Coding::Type)(Coding::valSpecified), 245, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode56(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings56_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings57_37[] = {
    {CODING_NAME("cmova")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode57(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings57_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings58_37[] = {
    {CODING_NAME("cmovae")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode58(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings58_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings59_37[] = {
    {CODING_NAME("cmovb")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode59(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings59_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings60_37[] = {
    {CODING_NAME("cmovbe")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode60(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings60_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings61_37[] = {
    {CODING_NAME("cmovc")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode61(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings61_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings62_37[] = {
    {CODING_NAME("cmove")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode62(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings62_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings63_37[] = {
    {CODING_NAME("cmovg")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode63(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings63_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings64_37[] = {
    {CODING_NAME("cmovge")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode64(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings64_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings65_37[] = {
    {CODING_NAME("cmovl")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode65(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings65_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings66_37[] = {
    {CODING_NAME("cmovle")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode66(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings66_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings67_37[] = {
    {CODING_NAME("cmovna")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode67(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings67_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings68_37[] = {
    {CODING_NAME("cmovnae")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode68(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings68_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings69_37[] = {
    {CODING_NAME("cmovnb")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode69(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings69_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings70_37[] = {
    {CODING_NAME("cmovnbe")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode70(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings70_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings71_37[] = {
    {CODING_NAME("cmovnc")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode71(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings71_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings72_37[] = {
    {CODING_NAME("cmovne")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode72(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings72_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings73_37[] = {
    {CODING_NAME("cmovng")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode73(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings73_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings74_37[] = {
    {CODING_NAME("cmovnge")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode74(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings74_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings75_37[] = {
    {CODING_NAME("cmovnl")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode75(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings75_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings76_37[] = {
    {CODING_NAME("cmovnle")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode76(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings76_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings77_37[] = {
    {CODING_NAME("cmovno")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode77(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings77_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings78_37[] = {
    {CODING_NAME("cmovnp")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode78(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings78_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings79_37[] = {
    {CODING_NAME("cmovns")(Coding::Type)(Coding::valSpecified), 9, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode79(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings79_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings80_37[] = {
    {CODING_NAME("cmovnz")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode80(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings80_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings81_37[] = {
    {CODING_NAME("cmovo")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode81(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings81_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings82_37[] = {
    {CODING_NAME("cmovp")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode82(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings82_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings83_37[] = {
    {CODING_NAME("cmovpe")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode83(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings83_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings84_37[] = {
    {CODING_NAME("cmovpo")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode84(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings84_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings85_37[] = {
    {CODING_NAME("cmovs")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode85(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings85_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings86_37[] = {
    {CODING_NAME("cmovz")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode86(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings86_37;
    asmError rv;
    {
        rv = Opcode13(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings87_17[] = {
    {CODING_NAME("cmp")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings87_35[] = {
    {CODING_NAME("cmp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 60, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings87_36[] = {
    {CODING_NAME("cmp")(Coding::Type)(Coding::valSpecified), 56, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode87(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings87_17;
    operand.values[35] = OpcodeCodings87_35;
    operand.values[36] = OpcodeCodings87_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
asmError x64Parser::Opcode88(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches5949, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings89_18[] = {
    {CODING_NAME("cmpsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode89(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings89_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings90_18[] = {
    {CODING_NAME("cmpsw") Coding::stateFunc, 3},
    {CODING_NAME("cmpsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode90(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings90_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings91_18[] = {
    {CODING_NAME("cmpsd") Coding::stateFunc, 4},
    {CODING_NAME("cmpsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode91(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings91_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode92(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6217, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings93_35[] = {
    {CODING_NAME("cmpxchg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cmpxchg")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 176, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode93(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings93_35;
    asmError rv = ParseOperands(tokenBranches6219, operand);
    return rv;
}
asmError x64Parser::Opcode94(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6240, operand);
    return rv;
}
asmError x64Parser::Opcode95(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6242, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings96_18[] = {
    {CODING_NAME("cpuid")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode96(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings96_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
asmError x64Parser::Opcode97(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6245, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings98_18[] = {
    {CODING_NAME("cwd") Coding::stateFunc, 3},
    {CODING_NAME("cwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode98(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings98_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings99_18[] = {
    {CODING_NAME("cwde") Coding::stateFunc, 4},
    {CODING_NAME("cwde")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode99(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings99_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings100_18[] = {
    {CODING_NAME("daa") Coding::stateFunc, 6},
    {CODING_NAME("daa")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 39, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode100(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings100_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings101_18[] = {
    {CODING_NAME("das") Coding::stateFunc, 6},
    {CODING_NAME("das")(Coding::Type)(Coding::valSpecified), 47, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode101(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings101_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings102_17[] = {
    {CODING_NAME("dec")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings102_18[] = {
    {CODING_NAME("dec")(Coding::Type)(Coding::valSpecified), 9, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode102(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings102_17;
    operand.values[18] = OpcodeCodings102_18;
    asmError rv;
    {
        rv = Opcode6(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings103_17[] = {
    {CODING_NAME("div")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode103(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings103_17;
    asmError rv;
    {
        rv = Opcode7(operand);
    }
    return rv;
}
asmError x64Parser::Opcode104(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6253, operand);
    return rv;
}
asmError x64Parser::Opcode105(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6259, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings106_18[] = {
    {CODING_NAME("f2xm1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("f2xm1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode106(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings106_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings107_18[] = {
    {CODING_NAME("fabs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fabs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode107(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings107_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings108_17[] = {
    {CODING_NAME("fadd")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings108_38[] = {
    {CODING_NAME("fadd")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings108_35[] = {
    {CODING_NAME("fadd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode108(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings108_17;
    operand.values[38] = OpcodeCodings108_38;
    operand.values[35] = OpcodeCodings108_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings109_17[] = {
    {CODING_NAME("faddp")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings109_18[] = {
    {CODING_NAME("faddp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode109(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings109_17;
    operand.values[18] = OpcodeCodings109_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings110_17[] = {
    {CODING_NAME("fbld")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings110_18[] = {
    {CODING_NAME("fbld")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode110(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings110_17;
    operand.values[18] = OpcodeCodings110_18;
    asmError rv;
    {
        rv = Opcode11(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings111_17[] = {
    {CODING_NAME("fbstp")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings111_18[] = {
    {CODING_NAME("fbstp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode111(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings111_17;
    operand.values[18] = OpcodeCodings111_18;
    asmError rv;
    {
        rv = Opcode11(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings112_18[] = {
    {CODING_NAME("fchs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fchs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode112(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings112_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings113_18[] = {
    {CODING_NAME("fclex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("fclex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("fclex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode113(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings113_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings114_18[] = {
    {CODING_NAME("fnclex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("fnclex")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode114(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings114_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings115_17[] = {
    {CODING_NAME("fcmovb")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings115_35[] = {
    {CODING_NAME("fcmovb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode115(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings115_17;
    operand.values[35] = OpcodeCodings115_35;
    asmError rv = ParseOperands(tokenBranches6272, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings116_17[] = {
    {CODING_NAME("fcmovbe")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings116_35[] = {
    {CODING_NAME("fcmovbe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode116(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings116_17;
    operand.values[35] = OpcodeCodings116_35;
    asmError rv = ParseOperands(tokenBranches6276, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings117_17[] = {
    {CODING_NAME("fcmove")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings117_35[] = {
    {CODING_NAME("fcmove")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode117(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings117_17;
    operand.values[35] = OpcodeCodings117_35;
    asmError rv = ParseOperands(tokenBranches6280, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings118_17[] = {
    {CODING_NAME("fcmovnb")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings118_35[] = {
    {CODING_NAME("fcmovnb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode118(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings118_17;
    operand.values[35] = OpcodeCodings118_35;
    asmError rv = ParseOperands(tokenBranches6284, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings119_17[] = {
    {CODING_NAME("fcmovnbe")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings119_35[] = {
    {CODING_NAME("fcmovnbe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode119(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings119_17;
    operand.values[35] = OpcodeCodings119_35;
    asmError rv = ParseOperands(tokenBranches6288, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings120_17[] = {
    {CODING_NAME("fcmovne")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings120_35[] = {
    {CODING_NAME("fcmovne")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode120(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings120_17;
    operand.values[35] = OpcodeCodings120_35;
    asmError rv = ParseOperands(tokenBranches6292, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings121_17[] = {
    {CODING_NAME("fcmovnu")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings121_35[] = {
    {CODING_NAME("fcmovnu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode121(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings121_17;
    operand.values[35] = OpcodeCodings121_35;
    asmError rv = ParseOperands(tokenBranches6296, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings122_17[] = {
    {CODING_NAME("fcmovu")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings122_35[] = {
    {CODING_NAME("fcmovu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode122(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings122_17;
    operand.values[35] = OpcodeCodings122_35;
    asmError rv = ParseOperands(tokenBranches6300, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings123_17[] = {
    {CODING_NAME("fcom")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings123_35[] = {
    {CODING_NAME("fcom")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode123(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings123_17;
    operand.values[35] = OpcodeCodings123_35;
    asmError rv = ParseOperands(tokenBranches6304, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings124_17[] = {
    {CODING_NAME("fcomi")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings124_35[] = {
    {CODING_NAME("fcomi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode124(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings124_17;
    operand.values[35] = OpcodeCodings124_35;
    asmError rv = ParseOperands(tokenBranches6313, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings125_17[] = {
    {CODING_NAME("fcomip")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings125_35[] = {
    {CODING_NAME("fcomip")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode125(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings125_17;
    operand.values[35] = OpcodeCodings125_35;
    asmError rv = ParseOperands(tokenBranches6317, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings126_17[] = {
    {CODING_NAME("fcomp")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings126_35[] = {
    {CODING_NAME("fcomp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode126(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings126_17;
    operand.values[35] = OpcodeCodings126_35;
    asmError rv = ParseOperands(tokenBranches6321, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings127_18[] = {
    {CODING_NAME("fcompp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("fcompp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode127(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings127_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings128_18[] = {
    {CODING_NAME("fcos")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fcos")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 255, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode128(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings128_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings129_18[] = {
    {CODING_NAME("fdecstp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fdecstp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode129(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings129_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings130_18[] = {
    {CODING_NAME("fdisi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("fdisi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("fdisi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode130(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings130_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings131_17[] = {
    {CODING_NAME("fdiv")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings131_38[] = {
    {CODING_NAME("fdiv")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings131_35[] = {
    {CODING_NAME("fdiv")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode131(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings131_17;
    operand.values[38] = OpcodeCodings131_38;
    operand.values[35] = OpcodeCodings131_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings132_17[] = {
    {CODING_NAME("fdivp")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings132_18[] = {
    {CODING_NAME("fdivp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode132(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings132_17;
    operand.values[18] = OpcodeCodings132_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings133_17[] = {
    {CODING_NAME("fdivr")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings133_38[] = {
    {CODING_NAME("fdivr")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings133_35[] = {
    {CODING_NAME("fdivr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode133(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings133_17;
    operand.values[38] = OpcodeCodings133_38;
    operand.values[35] = OpcodeCodings133_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings134_17[] = {
    {CODING_NAME("fdivrp")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings134_18[] = {
    {CODING_NAME("fdivrp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode134(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings134_17;
    operand.values[18] = OpcodeCodings134_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings135_18[] = {
    {CODING_NAME("feni")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("feni")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("feni")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode135(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings135_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode136(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6336, operand);
    return rv;
}
asmError x64Parser::Opcode137(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6338, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings138_17[] = {
    {CODING_NAME("fiadd")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings138_35[] = {
    {CODING_NAME("fiadd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode138(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings138_17;
    operand.values[35] = OpcodeCodings138_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings139_17[] = {
    {CODING_NAME("ficom")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings139_35[] = {
    {CODING_NAME("ficom")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode139(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings139_17;
    operand.values[35] = OpcodeCodings139_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings140_17[] = {
    {CODING_NAME("ficomp")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings140_35[] = {
    {CODING_NAME("ficomp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode140(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings140_17;
    operand.values[35] = OpcodeCodings140_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings141_17[] = {
    {CODING_NAME("fidiv")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings141_35[] = {
    {CODING_NAME("fidiv")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode141(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings141_17;
    operand.values[35] = OpcodeCodings141_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings142_17[] = {
    {CODING_NAME("fidivr")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings142_35[] = {
    {CODING_NAME("fidivr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode142(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings142_17;
    operand.values[35] = OpcodeCodings142_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings143_17[] = {
    {CODING_NAME("fild")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings143_35[] = {
    {CODING_NAME("fild")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode143(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings143_17;
    operand.values[35] = OpcodeCodings143_35;
    asmError rv = ParseOperands(tokenBranches6345, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings144_17[] = {
    {CODING_NAME("fimul")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings144_35[] = {
    {CODING_NAME("fimul")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode144(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings144_17;
    operand.values[35] = OpcodeCodings144_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings145_18[] = {
    {CODING_NAME("fincstp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fincstp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 247, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode145(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings145_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings146_18[] = {
    {CODING_NAME("finit")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("finit")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("finit")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode146(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings146_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings147_18[] = {
    {CODING_NAME("fninit")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("fninit")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode147(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings147_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings148_17[] = {
    {CODING_NAME("fist")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings148_35[] = {
    {CODING_NAME("fist")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode148(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings148_17;
    operand.values[35] = OpcodeCodings148_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings149_17[] = {
    {CODING_NAME("fistp")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings149_35[] = {
    {CODING_NAME("fistp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode149(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings149_17;
    operand.values[35] = OpcodeCodings149_35;
    asmError rv = ParseOperands(tokenBranches6357, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings150_17[] = {
    {CODING_NAME("fisub")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings150_35[] = {
    {CODING_NAME("fisub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode150(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings150_17;
    operand.values[35] = OpcodeCodings150_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings151_17[] = {
    {CODING_NAME("fisubr")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings151_35[] = {
    {CODING_NAME("fisubr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode151(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings151_17;
    operand.values[35] = OpcodeCodings151_35;
    asmError rv;
    {
        rv = Opcode10(operand);
    }
    return rv;
}
asmError x64Parser::Opcode152(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6364, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings153_18[] = {
    {CODING_NAME("fld1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fld1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode153(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings153_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode154(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6373, operand);
    return rv;
}
asmError x64Parser::Opcode155(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6376, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings156_18[] = {
    {CODING_NAME("fldl2e")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldl2e")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode156(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings156_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings157_18[] = {
    {CODING_NAME("fldl2t")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldl2t")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode157(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings157_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings158_18[] = {
    {CODING_NAME("fldlg2")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldlg2")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode158(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings158_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings159_18[] = {
    {CODING_NAME("fldln2")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldln2")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode159(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings159_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings160_18[] = {
    {CODING_NAME("fldpi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldpi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode160(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings160_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings161_18[] = {
    {CODING_NAME("fldz")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fldz")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode161(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings161_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings162_17[] = {
    {CODING_NAME("fmul")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings162_38[] = {
    {CODING_NAME("fmul")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings162_35[] = {
    {CODING_NAME("fmul")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode162(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings162_17;
    operand.values[38] = OpcodeCodings162_38;
    operand.values[35] = OpcodeCodings162_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings163_17[] = {
    {CODING_NAME("fmulp")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings163_18[] = {
    {CODING_NAME("fmulp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode163(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings163_17;
    operand.values[18] = OpcodeCodings163_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings164_18[] = {
    {CODING_NAME("fnop")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fnop")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode164(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings164_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode165(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6387, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings166_18[] = {
    {CODING_NAME("fpatan")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fpatan")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode166(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings166_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings167_18[] = {
    {CODING_NAME("fprem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fprem")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode167(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings167_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings168_18[] = {
    {CODING_NAME("fprem1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fprem1")(Coding::Type)(Coding::valSpecified), 245, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode168(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings168_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings169_18[] = {
    {CODING_NAME("fptan")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fptan")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode169(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings169_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings170_18[] = {
    {CODING_NAME("frndint")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("frndint")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode170(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings170_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode171(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6394, operand);
    return rv;
}
asmError x64Parser::Opcode172(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6396, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings173_18[] = {
    {CODING_NAME("fscale")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fscale")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode173(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings173_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings174_18[] = {
    {CODING_NAME("fsetpm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("fsetpm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode174(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings174_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings175_18[] = {
    {CODING_NAME("fsin")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fsin")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode175(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings175_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings176_18[] = {
    {CODING_NAME("fsincos")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fsincos")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode176(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings176_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings177_18[] = {
    {CODING_NAME("fsqrt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fsqrt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode177(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings177_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode178(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6403, operand);
    return rv;
}
asmError x64Parser::Opcode179(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6409, operand);
    return rv;
}
asmError x64Parser::Opcode180(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6412, operand);
    return rv;
}
asmError x64Parser::Opcode181(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6415, operand);
    return rv;
}
asmError x64Parser::Opcode182(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6417, operand);
    return rv;
}
asmError x64Parser::Opcode183(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6419, operand);
    return rv;
}
asmError x64Parser::Opcode184(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6427, operand);
    return rv;
}
asmError x64Parser::Opcode185(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6431, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings186_17[] = {
    {CODING_NAME("fsub")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings186_38[] = {
    {CODING_NAME("fsub")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings186_35[] = {
    {CODING_NAME("fsub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode186(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings186_17;
    operand.values[38] = OpcodeCodings186_38;
    operand.values[35] = OpcodeCodings186_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings187_17[] = {
    {CODING_NAME("fsubp")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings187_18[] = {
    {CODING_NAME("fsubp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode187(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings187_17;
    operand.values[18] = OpcodeCodings187_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings188_17[] = {
    {CODING_NAME("fsubr")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings188_38[] = {
    {CODING_NAME("fsubr")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings188_35[] = {
    {CODING_NAME("fsubr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode188(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings188_17;
    operand.values[38] = OpcodeCodings188_38;
    operand.values[35] = OpcodeCodings188_35;
    asmError rv;
    {
        rv = Opcode8(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings189_17[] = {
    {CODING_NAME("fsubrp")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings189_18[] = {
    {CODING_NAME("fsubrp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode189(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings189_17;
    operand.values[18] = OpcodeCodings189_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings190_18[] = {
    {CODING_NAME("ftst")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("ftst")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode190(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings190_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings191_17[] = {
    {CODING_NAME("fucom")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings191_18[] = {
    {CODING_NAME("fucom")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode191(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings191_17;
    operand.values[18] = OpcodeCodings191_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings192_17[] = {
    {CODING_NAME("fucomi")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings192_35[] = {
    {CODING_NAME("fucomi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode192(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings192_17;
    operand.values[35] = OpcodeCodings192_35;
    asmError rv = ParseOperands(tokenBranches6441, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings193_17[] = {
    {CODING_NAME("fucomip")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings193_35[] = {
    {CODING_NAME("fucomip")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode193(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings193_17;
    operand.values[35] = OpcodeCodings193_35;
    asmError rv = ParseOperands(tokenBranches6445, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings194_17[] = {
    {CODING_NAME("fucomp")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings194_18[] = {
    {CODING_NAME("fucomp")(Coding::Type)(Coding::valSpecified), 221, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode194(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings194_17;
    operand.values[18] = OpcodeCodings194_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings195_18[] = {
    {CODING_NAME("fucompp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("fucompp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode195(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings195_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings196_18[] = {
    {CODING_NAME("fwait")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode196(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings196_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings197_18[] = {
    {CODING_NAME("fxam")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fxam")(Coding::Type)(Coding::valSpecified), 229, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode197(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings197_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings198_17[] = {
    {CODING_NAME("fxch")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings198_18[] = {
    {CODING_NAME("fxch")(Coding::Type)(Coding::valSpecified), 217, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode198(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings198_17;
    operand.values[18] = OpcodeCodings198_18;
    asmError rv;
    {
        rv = Opcode9(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings199_17[] = {
    {CODING_NAME("fxch4")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings199_35[] = {
    {CODING_NAME("fxch4")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode199(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings199_17;
    operand.values[35] = OpcodeCodings199_35;
    asmError rv = ParseOperands(tokenBranches6454, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings200_17[] = {
    {CODING_NAME("fxch7")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings200_35[] = {
    {CODING_NAME("fxch7")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode200(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings200_17;
    operand.values[35] = OpcodeCodings200_35;
    asmError rv = ParseOperands(tokenBranches6458, operand);
    return rv;
}
asmError x64Parser::Opcode201(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6462, operand);
    return rv;
}
asmError x64Parser::Opcode202(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6464, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings203_18[] = {
    {CODING_NAME("fxtract")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fxtract")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode203(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings203_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings204_18[] = {
    {CODING_NAME("fyl2x")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fyl2x")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode204(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings204_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings205_18[] = {
    {CODING_NAME("fyl2xp1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("fyl2xp1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode205(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings205_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings206_18[] = {
    {CODING_NAME("hlt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode206(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings206_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings207_18[] = {
    {CODING_NAME("icebp")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode207(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings207_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings208_17[] = {
    {CODING_NAME("idiv")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode208(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings208_17;
    asmError rv;
    {
        rv = Opcode7(operand);
    }
    return rv;
}
asmError x64Parser::Opcode209(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6472, operand);
    return rv;
}
asmError x64Parser::Opcode210(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6556, operand);
    return rv;
}
asmError x64Parser::Opcode211(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6585, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings212_18[] = {
    {CODING_NAME("insb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode212(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings212_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings213_18[] = {
    {CODING_NAME("insw") Coding::stateFunc, 3},
    {CODING_NAME("insw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode213(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings213_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings214_18[] = {
    {CODING_NAME("insd") Coding::stateFunc, 4},
    {CODING_NAME("insd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode214(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings214_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings215_17[] = {
    {CODING_NAME("inc")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings215_18[] = {
    {CODING_NAME("inc")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode215(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings215_17;
    operand.values[18] = OpcodeCodings215_18;
    asmError rv;
    {
        rv = Opcode6(operand);
    }
    return rv;
}
asmError x64Parser::Opcode216(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6728, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings217_18[] = {
    {CODING_NAME("int1")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 241, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode217(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings217_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings218_18[] = {
    {CODING_NAME("int3")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 204, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode218(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings218_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings219_18[] = {
    {CODING_NAME("into")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 206, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode219(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings219_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings220_18[] = {
    {CODING_NAME("invd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode220(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings220_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
asmError x64Parser::Opcode221(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6735, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings222_18[] = {
    {CODING_NAME("iret")(Coding::Type)(Coding::valSpecified), 207, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode222(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings222_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings223_18[] = {
    {CODING_NAME("iretw") Coding::stateFunc, 3},
    {CODING_NAME("iretw")(Coding::Type)(Coding::valSpecified), 207, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode223(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings223_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode224(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6739, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings225_18[] = {
    {CODING_NAME("iretq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("iretq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 207, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode225(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings225_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings226_37[] = {
    {CODING_NAME("ja")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode226(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings226_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings227_37[] = {
    {CODING_NAME("jae")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode227(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings227_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings228_37[] = {
    {CODING_NAME("jb")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode228(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings228_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings229_37[] = {
    {CODING_NAME("jbe")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode229(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings229_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings230_37[] = {
    {CODING_NAME("jc")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode230(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings230_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
asmError x64Parser::Opcode231(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6747, operand);
    return rv;
}
asmError x64Parser::Opcode232(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6749, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings233_37[] = {
    {CODING_NAME("je")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode233(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings233_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings234_37[] = {
    {CODING_NAME("jg")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode234(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings234_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings235_37[] = {
    {CODING_NAME("jge")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode235(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings235_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings236_37[] = {
    {CODING_NAME("jl")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode236(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings236_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings237_37[] = {
    {CODING_NAME("jle")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode237(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings237_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
asmError x64Parser::Opcode238(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6756, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings239_37[] = {
    {CODING_NAME("jna")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode239(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings239_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings240_37[] = {
    {CODING_NAME("jnae")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode240(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings240_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings241_37[] = {
    {CODING_NAME("jnb")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode241(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings241_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings242_37[] = {
    {CODING_NAME("jnbe")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode242(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings242_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings243_37[] = {
    {CODING_NAME("jnc")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode243(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings243_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings244_37[] = {
    {CODING_NAME("jne")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode244(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings244_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings245_37[] = {
    {CODING_NAME("jng")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode245(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings245_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings246_37[] = {
    {CODING_NAME("jnge")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode246(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings246_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings247_37[] = {
    {CODING_NAME("jnl")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode247(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings247_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings248_37[] = {
    {CODING_NAME("jnle")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode248(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings248_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings249_37[] = {
    {CODING_NAME("jno")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode249(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings249_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings250_37[] = {
    {CODING_NAME("jnp")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode250(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings250_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings251_37[] = {
    {CODING_NAME("jns")(Coding::Type)(Coding::valSpecified), 9, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode251(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings251_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings252_37[] = {
    {CODING_NAME("jnz")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode252(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings252_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings253_37[] = {
    {CODING_NAME("jo")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode253(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings253_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings254_37[] = {
    {CODING_NAME("jp")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode254(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings254_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings255_37[] = {
    {CODING_NAME("jpe")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode255(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings255_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings256_37[] = {
    {CODING_NAME("jpo")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode256(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings256_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings257_37[] = {
    {CODING_NAME("js")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode257(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings257_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings258_37[] = {
    {CODING_NAME("jz")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode258(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings258_37;
    asmError rv;
    {
        rv = Opcode12(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings259_18[] = {
    {CODING_NAME("lahf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 159, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode259(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings259_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings260_35[] = {
    {CODING_NAME("lar")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lar")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode260(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings260_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings261_35[] = {
    {CODING_NAME("lds") Coding::stateFunc, 6},
    {CODING_NAME("lds")(Coding::Type)(Coding::valSpecified), 197, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode261(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings261_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings262_35[] = {
    {CODING_NAME("lea")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 141, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode262(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings262_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings263_18[] = {
    {CODING_NAME("leave")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 201, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode263(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings263_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings264_35[] = {
    {CODING_NAME("les") Coding::stateFunc, 6},
    {CODING_NAME("les")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 196, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode264(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings264_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings265_18[] = {
    {CODING_NAME("lfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("lfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode265(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings265_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings266_35[] = {
    {CODING_NAME("lfs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lfs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 180, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode266(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings266_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings267_17[] = {
    {CODING_NAME("lgdt")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings267_18[] = {
    {CODING_NAME("lgdt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lgdt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode267(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings267_17;
    operand.values[18] = OpcodeCodings267_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings268_35[] = {
    {CODING_NAME("lgs")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lgs")(Coding::Type)(Coding::valSpecified), 181, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode268(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings268_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings269_17[] = {
    {CODING_NAME("lidt")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings269_18[] = {
    {CODING_NAME("lidt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lidt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode269(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings269_17;
    operand.values[18] = OpcodeCodings269_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings270_17[] = {
    {CODING_NAME("lldt")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings270_18[] = {
    {CODING_NAME("lldt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lldt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode270(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings270_17;
    operand.values[18] = OpcodeCodings270_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings271_17[] = {
    {CODING_NAME("lmsw")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings271_18[] = {
    {CODING_NAME("lmsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lmsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode271(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings271_17;
    operand.values[18] = OpcodeCodings271_18;
    asmError rv = ParseOperands(tokenBranches6829, operand);
    return rv;
}
asmError x64Parser::Opcode272(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6831, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings273_18[] = {
    {CODING_NAME("lodsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode273(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings273_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings274_18[] = {
    {CODING_NAME("lodsw") Coding::stateFunc, 3},
    {CODING_NAME("lodsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode274(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings274_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings275_18[] = {
    {CODING_NAME("lodsd") Coding::stateFunc, 4},
    {CODING_NAME("lodsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode275(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings275_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode276(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6959, operand);
    return rv;
}
asmError x64Parser::Opcode277(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6961, operand);
    return rv;
}
asmError x64Parser::Opcode278(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6963, operand);
    return rv;
}
asmError x64Parser::Opcode279(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6965, operand);
    return rv;
}
asmError x64Parser::Opcode280(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6967, operand);
    return rv;
}
asmError x64Parser::Opcode281(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6969, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings282_35[] = {
    {CODING_NAME("lsl")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lsl")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode282(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings282_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings283_35[] = {
    {CODING_NAME("lss") Coding::stateFunc, 6},
    {CODING_NAME("lss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 178, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode283(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings283_35;
    asmError rv;
    {
        rv = Opcode3(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings284_17[] = {
    {CODING_NAME("ltr")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings284_18[] = {
    {CODING_NAME("ltr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("ltr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode284(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings284_17;
    operand.values[18] = OpcodeCodings284_18;
    asmError rv = ParseOperands(tokenBranches6973, operand);
    if (rv == AERR_NONE)
    {
        rv = Opcode18(operand);
    }
    return rv;
}
asmError x64Parser::Opcode285(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches6975, operand);
    return rv;
}
asmError x64Parser::Opcode286(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7284, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings287_35[] = {
    {CODING_NAME("movbe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movbe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, 0, 0, 0},
    {CODING_NAME("movbe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode287(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings287_35;
    asmError rv = ParseOperands(tokenBranches7547, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings288_18[] = {
    {CODING_NAME("movsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode288(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings288_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings289_18[] = {
    {CODING_NAME("movsw") Coding::stateFunc, 3},
    {CODING_NAME("movsw")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode289(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings289_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode290(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7574, operand);
    return rv;
}
asmError x64Parser::Opcode291(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7582, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings292_35[] = {
    {CODING_NAME("movsx")(Coding::Type)(Coding::valSpecified), 190, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode292(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings292_35;
    asmError rv;
    {
        rv = Opcode15(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings293_35[] = {
    {CODING_NAME("movzx")(Coding::Type)(Coding::valSpecified), 182, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode293(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings293_35;
    asmError rv;
    {
        rv = Opcode15(operand);
    }
    return rv;
}
asmError x64Parser::Opcode294(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7586, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings295_17[] = {
    {CODING_NAME("mul")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode295(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings295_17;
    asmError rv;
    {
        rv = Opcode7(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings296_17[] = {
    {CODING_NAME("neg")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode296(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings296_17;
    asmError rv;
    {
        rv = Opcode7(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings297_18[] = {
    {CODING_NAME("nop")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 144, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode297(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings297_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings298_17[] = {
    {CODING_NAME("not")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode298(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings298_17;
    asmError rv;
    {
        rv = Opcode7(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings299_17[] = {
    {CODING_NAME("or")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings299_35[] = {
    {CODING_NAME("or")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings299_36[] = {
    {CODING_NAME("or")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode299(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings299_17;
    operand.values[35] = OpcodeCodings299_35;
    operand.values[36] = OpcodeCodings299_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
asmError x64Parser::Opcode300(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7606, operand);
    return rv;
}
asmError x64Parser::Opcode301(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7635, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings302_18[] = {
    {CODING_NAME("outsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode302(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings302_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings303_18[] = {
    {CODING_NAME("outsw") Coding::stateFunc, 3},
    {CODING_NAME("outsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode303(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings303_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings304_18[] = {
    {CODING_NAME("outsd") Coding::stateFunc, 4},
    {CODING_NAME("outsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode304(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings304_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode305(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7777, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings306_18[] = {
    {CODING_NAME("popa") Coding::stateFunc, 6},
    {CODING_NAME("popa")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode306(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings306_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings307_18[] = {
    {CODING_NAME("popaw") Coding::stateFunc, 6},
    {CODING_NAME("popaw") Coding::stateFunc, 3},
    {CODING_NAME("popaw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode307(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings307_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings308_18[] = {
    {CODING_NAME("popad") Coding::stateFunc, 6},
    {CODING_NAME("popad") Coding::stateFunc, 4},
    {CODING_NAME("popad")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode308(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings308_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings309_22[] = {
    {CODING_NAME("popcnt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings309_35[] = {
    {CODING_NAME("popcnt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("popcnt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 184, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode309(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings309_22;
    operand.values[35] = OpcodeCodings309_35;
    asmError rv;
    {
        rv = Opcode2(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings310_18[] = {
    {CODING_NAME("popf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode310(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings310_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings311_18[] = {
    {CODING_NAME("popfw") Coding::stateFunc, 3},
    {CODING_NAME("popfw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode311(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings311_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings312_18[] = {
    {CODING_NAME("popfd") Coding::stateFunc, 4},
    {CODING_NAME("popfd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode312(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings312_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings313_18[] = {
    {CODING_NAME("popfq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 157, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode313(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings313_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode314(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7798, operand);
    return rv;
}
asmError x64Parser::Opcode315(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7800, operand);
    return rv;
}
asmError x64Parser::Opcode316(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7802, operand);
    return rv;
}
asmError x64Parser::Opcode317(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7804, operand);
    return rv;
}
asmError x64Parser::Opcode318(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7806, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings319_18[] = {
    {CODING_NAME("pusha") Coding::stateFunc, 6},
    {CODING_NAME("pusha")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode319(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings319_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings320_18[] = {
    {CODING_NAME("pushaw") Coding::stateFunc, 6},
    {CODING_NAME("pushaw") Coding::stateFunc, 3},
    {CODING_NAME("pushaw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode320(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings320_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings321_18[] = {
    {CODING_NAME("pushad") Coding::stateFunc, 6},
    {CODING_NAME("pushad") Coding::stateFunc, 4},
    {CODING_NAME("pushad")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode321(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings321_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings322_18[] = {
    {CODING_NAME("pushf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode322(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings322_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings323_18[] = {
    {CODING_NAME("pushfw") Coding::stateFunc, 3},
    {CODING_NAME("pushfw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode323(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings323_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings324_18[] = {
    {CODING_NAME("pushfd") Coding::stateFunc, 4},
    {CODING_NAME("pushfd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 156, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode324(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings324_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings325_18[] = {
    {CODING_NAME("pushfq")(Coding::Type)(Coding::valSpecified), 156, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode325(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings325_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings326_17[] = {
    {CODING_NAME("rcl")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode326(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings326_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings327_17[] = {
    {CODING_NAME("rcr")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode327(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings327_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings328_18[] = {
    {CODING_NAME("rdmsr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 50, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode328(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings328_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings329_18[] = {
    {CODING_NAME("rdpmc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 51, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode329(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings329_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings330_18[] = {
    {CODING_NAME("rdtsc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 49, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode330(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings330_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
asmError x64Parser::Opcode331(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7842, operand);
    return rv;
}
asmError x64Parser::Opcode332(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7845, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings333_17[] = {
    {CODING_NAME("rol")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode333(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings333_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings334_17[] = {
    {CODING_NAME("ror")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode334(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings334_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings335_18[] = {
    {CODING_NAME("rsm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode335(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings335_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings336_18[] = {
    {CODING_NAME("sahf")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 158, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode336(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings336_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings337_17[] = {
    {CODING_NAME("sal")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode337(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings337_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings338_17[] = {
    {CODING_NAME("sar")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode338(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings338_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings339_17[] = {
    {CODING_NAME("sbb")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings339_35[] = {
    {CODING_NAME("sbb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings339_36[] = {
    {CODING_NAME("sbb")(Coding::Type)(Coding::valSpecified), 24, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode339(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings339_17;
    operand.values[35] = OpcodeCodings339_35;
    operand.values[36] = OpcodeCodings339_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
asmError x64Parser::Opcode340(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7855, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings341_18[] = {
    {CODING_NAME("scasb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode341(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings341_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings342_18[] = {
    {CODING_NAME("scasw") Coding::stateFunc, 3},
    {CODING_NAME("scasw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode342(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings342_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings343_18[] = {
    {CODING_NAME("scasd") Coding::stateFunc, 4},
    {CODING_NAME("scasd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode343(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings343_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode344(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches7983, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings345_37[] = {
    {CODING_NAME("seta")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode345(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings345_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings346_37[] = {
    {CODING_NAME("setae")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode346(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings346_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings347_37[] = {
    {CODING_NAME("setb")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode347(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings347_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings348_37[] = {
    {CODING_NAME("setbe")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode348(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings348_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings349_37[] = {
    {CODING_NAME("setc")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode349(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings349_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings350_37[] = {
    {CODING_NAME("sete")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode350(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings350_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings351_37[] = {
    {CODING_NAME("setg")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode351(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings351_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings352_37[] = {
    {CODING_NAME("setge")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode352(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings352_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings353_37[] = {
    {CODING_NAME("setl")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode353(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings353_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings354_37[] = {
    {CODING_NAME("setle")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode354(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings354_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings355_37[] = {
    {CODING_NAME("setna")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode355(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings355_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings356_37[] = {
    {CODING_NAME("setnae")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode356(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings356_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings357_37[] = {
    {CODING_NAME("setnb")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode357(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings357_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings358_37[] = {
    {CODING_NAME("setnbe")(Coding::Type)(Coding::valSpecified), 7, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode358(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings358_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings359_37[] = {
    {CODING_NAME("setnc")(Coding::Type)(Coding::valSpecified), 3, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode359(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings359_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings360_37[] = {
    {CODING_NAME("setne")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode360(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings360_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings361_37[] = {
    {CODING_NAME("setng")(Coding::Type)(Coding::valSpecified), 14, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode361(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings361_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings362_37[] = {
    {CODING_NAME("setnge")(Coding::Type)(Coding::valSpecified), 12, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode362(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings362_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings363_37[] = {
    {CODING_NAME("setnl")(Coding::Type)(Coding::valSpecified), 13, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode363(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings363_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings364_37[] = {
    {CODING_NAME("setnle")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode364(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings364_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings365_37[] = {
    {CODING_NAME("setno")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode365(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings365_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings366_37[] = {
    {CODING_NAME("setnp")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode366(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings366_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings367_37[] = {
    {CODING_NAME("setns")(Coding::Type)(Coding::valSpecified), 9, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode367(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings367_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings368_37[] = {
    {CODING_NAME("setnz")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode368(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings368_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings369_37[] = {
    {CODING_NAME("seto")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode369(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings369_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings370_37[] = {
    {CODING_NAME("setp")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode370(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings370_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings371_37[] = {
    {CODING_NAME("setpe")(Coding::Type)(Coding::valSpecified), 10, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode371(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings371_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings372_37[] = {
    {CODING_NAME("setpo")(Coding::Type)(Coding::valSpecified), 11, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode372(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings372_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings373_37[] = {
    {CODING_NAME("sets")(Coding::Type)(Coding::valSpecified), 8, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode373(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings373_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings374_37[] = {
    {CODING_NAME("setz")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode374(x64Operand& operand)
{
    operand.values[37] = OpcodeCodings374_37;
    asmError rv;
    {
        rv = Opcode14(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings375_18[] = {
    {CODING_NAME("sfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("sfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode375(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings375_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings376_17[] = {
    {CODING_NAME("sgdt")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings376_18[] = {
    {CODING_NAME("sgdt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sgdt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode376(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings376_17;
    operand.values[18] = OpcodeCodings376_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings377_17[] = {
    {CODING_NAME("shl")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode377(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings377_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings378_35[] = {
    {CODING_NAME("shld")(Coding::Type)(Coding::valSpecified), 164, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode378(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings378_35;
    asmError rv;
    {
        rv = Opcode17(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings379_17[] = {
    {CODING_NAME("shr")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode379(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings379_17;
    asmError rv;
    {
        rv = Opcode16(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings380_35[] = {
    {CODING_NAME("shrd")(Coding::Type)(Coding::valSpecified), 172, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode380(x64Operand& operand)
{
    operand.values[35] = OpcodeCodings380_35;
    asmError rv;
    {
        rv = Opcode17(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings381_17[] = {
    {CODING_NAME("sidt")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings381_18[] = {
    {CODING_NAME("sidt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sidt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode381(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings381_17;
    operand.values[18] = OpcodeCodings381_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings382_17[] = {
    {CODING_NAME("sldt")(Coding::Type)(Coding::valSpecified), 0, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings382_18[] = {
    {CODING_NAME("sldt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sldt")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode382(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings382_17;
    operand.values[18] = OpcodeCodings382_18;
    asmError rv;
    {
        rv = Opcode18(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings383_17[] = {
    {CODING_NAME("smsw")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings383_18[] = {
    {CODING_NAME("smsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("smsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode383(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings383_17;
    operand.values[18] = OpcodeCodings383_18;
    asmError rv = ParseOperands(tokenBranches8023, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings384_18[] = {
    {CODING_NAME("stc")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 249, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode384(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings384_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings385_18[] = {
    {CODING_NAME("std")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode385(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings385_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings386_18[] = {
    {CODING_NAME("sti")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode386(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings386_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode387(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8028, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings388_18[] = {
    {CODING_NAME("stosb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode388(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings388_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings389_18[] = {
    {CODING_NAME("stosw") Coding::stateFunc, 3},
    {CODING_NAME("stosw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode389(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings389_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings390_18[] = {
    {CODING_NAME("stosd") Coding::stateFunc, 4},
    {CODING_NAME("stosd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode390(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings390_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
asmError x64Parser::Opcode391(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8156, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings392_17[] = {
    {CODING_NAME("str")(Coding::Type)(Coding::valSpecified), 1, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings392_18[] = {
    {CODING_NAME("str")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("str")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode392(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings392_17;
    operand.values[18] = OpcodeCodings392_18;
    asmError rv = ParseOperands(tokenBranches8158, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings393_17[] = {
    {CODING_NAME("sub")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings393_35[] = {
    {CODING_NAME("sub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings393_36[] = {
    {CODING_NAME("sub")(Coding::Type)(Coding::valSpecified), 40, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode393(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings393_17;
    operand.values[35] = OpcodeCodings393_35;
    operand.values[36] = OpcodeCodings393_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings394_18[] = {
    {CODING_NAME("syscall")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode394(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings394_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings395_18[] = {
    {CODING_NAME("sysenter")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode395(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings395_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings396_18[] = {
    {CODING_NAME("sysexit")(Coding::Type)(Coding::valSpecified), 53, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode396(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings396_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings397_18[] = {
    {CODING_NAME("sysret")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode397(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings397_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
asmError x64Parser::Opcode398(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8167, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings399_18[] = {
    {CODING_NAME("ud2")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode399(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings399_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings400_17[] = {
    {CODING_NAME("verr")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings400_18[] = {
    {CODING_NAME("verr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("verr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode400(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings400_17;
    operand.values[18] = OpcodeCodings400_18;
    asmError rv = ParseOperands(tokenBranches8282, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings401_17[] = {
    {CODING_NAME("verw")(Coding::Type)(Coding::valSpecified), 5, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings401_18[] = {
    {CODING_NAME("verw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("verw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode401(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings401_17;
    operand.values[18] = OpcodeCodings401_18;
    asmError rv = ParseOperands(tokenBranches8284, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings402_18[] = {
    {CODING_NAME("wait")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode402(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings402_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings403_18[] = {
    {CODING_NAME("wbinvd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode403(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings403_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings404_18[] = {
    {CODING_NAME("wrmsr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 48, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode404(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings404_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
asmError x64Parser::Opcode405(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8289, operand);
    return rv;
}
asmError x64Parser::Opcode406(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8310, operand);
    return rv;
}
asmError x64Parser::Opcode407(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8369, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings408_18[] = {
    {CODING_NAME("xlatb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode408(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings408_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings409_17[] = {
    {CODING_NAME("xor")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings409_35[] = {
    {CODING_NAME("xor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 52, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings409_36[] = {
    {CODING_NAME("xor")(Coding::Type)(Coding::valSpecified), 48, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode409(x64Operand& operand)
{
    operand.values[17] = OpcodeCodings409_17;
    operand.values[35] = OpcodeCodings409_35;
    operand.values[36] = OpcodeCodings409_36;
    asmError rv;
    {
        rv = Opcode4(operand);
    }
    return rv;
}
asmError x64Parser::Opcode410(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8409, operand);
    return rv;
}
asmError x64Parser::Opcode411(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8411, operand);
    return rv;
}
asmError x64Parser::Opcode412(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8413, operand);
    return rv;
}
asmError x64Parser::Opcode413(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8415, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings414_18[] = {
    {CODING_NAME("xsetbv")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("xsetbv")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 209, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode414(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings414_18;
    asmError rv;
    {
        rv = Opcode1(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings415_22[] = {
    {CODING_NAME("addpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings415_18[] = {
    {CODING_NAME("addpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode415(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings415_22;
    operand.values[18] = OpcodeCodings415_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings416_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings416_18[] = {
    {CODING_NAME("addps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode416(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings416_22;
    operand.values[18] = OpcodeCodings416_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings417_22[] = {
    {CODING_NAME("addsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings417_18[] = {
    {CODING_NAME("addsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode417(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings417_22;
    operand.values[18] = OpcodeCodings417_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings418_22[] = {
    {CODING_NAME("addss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings418_18[] = {
    {CODING_NAME("addss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 88, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode418(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings418_22;
    operand.values[18] = OpcodeCodings418_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings419_22[] = {
    {CODING_NAME("addsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings419_18[] = {
    {CODING_NAME("addsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode419(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings419_22;
    operand.values[18] = OpcodeCodings419_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings420_22[] = {
    {CODING_NAME("addsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings420_18[] = {
    {CODING_NAME("addsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("addsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 208, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode420(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings420_22;
    operand.values[18] = OpcodeCodings420_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings421_22[] = {
    {CODING_NAME("andnpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings421_18[] = {
    {CODING_NAME("andnpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("andnpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode421(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings421_22;
    operand.values[18] = OpcodeCodings421_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings422_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings422_18[] = {
    {CODING_NAME("andnps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("andnps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 85, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode422(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings422_22;
    operand.values[18] = OpcodeCodings422_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings423_22[] = {
    {CODING_NAME("andpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings423_18[] = {
    {CODING_NAME("andpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("andpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode423(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings423_22;
    operand.values[18] = OpcodeCodings423_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings424_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings424_18[] = {
    {CODING_NAME("andps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("andps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 84, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode424(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings424_22;
    operand.values[18] = OpcodeCodings424_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings425_22[] = {
    {CODING_NAME("blendpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings425_18[] = {
    {CODING_NAME("blendpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("blendpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("blendpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 13, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode425(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings425_22;
    operand.values[18] = OpcodeCodings425_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings426_22[] = {
    {CODING_NAME("blendps")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings426_18[] = {
    {CODING_NAME("blendps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("blendps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("blendps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 12, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode426(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings426_22;
    operand.values[18] = OpcodeCodings426_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings427_22[] = {
    {CODING_NAME("cmppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings427_18[] = {
    {CODING_NAME("cmppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cmppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode427(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings427_22;
    operand.values[18] = OpcodeCodings427_18;
    asmError rv;
    {
        rv = Opcode28(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings428_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings428_18[] = {
    {CODING_NAME("cmpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cmpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode428(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings428_22;
    operand.values[18] = OpcodeCodings428_18;
    asmError rv;
    {
        rv = Opcode28(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings429_22[] = {
    {CODING_NAME("comisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings429_18[] = {
    {CODING_NAME("comisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("comisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 47, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode429(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings429_22;
    operand.values[18] = OpcodeCodings429_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings430_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings430_18[] = {
    {CODING_NAME("comiss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("comiss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 47, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode430(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings430_22;
    operand.values[18] = OpcodeCodings430_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings431_22[] = {
    {CODING_NAME("cvtdq2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings431_18[] = {
    {CODING_NAME("cvtdq2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtdq2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode431(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings431_22;
    operand.values[18] = OpcodeCodings431_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings432_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings432_18[] = {
    {CODING_NAME("cvtdq2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtdq2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode432(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings432_22;
    operand.values[18] = OpcodeCodings432_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings433_22[] = {
    {CODING_NAME("cvtpd2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings433_18[] = {
    {CODING_NAME("cvtpd2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtpd2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode433(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings433_22;
    operand.values[18] = OpcodeCodings433_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings434_22[] = {
    {CODING_NAME("cvtpd2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings434_18[] = {
    {CODING_NAME("cvtpd2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtpd2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode434(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings434_22;
    operand.values[18] = OpcodeCodings434_18;
    asmError rv;
    {
        rv = Opcode23(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings435_22[] = {
    {CODING_NAME("cvtpd2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings435_18[] = {
    {CODING_NAME("cvtpd2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtpd2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode435(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings435_22;
    operand.values[18] = OpcodeCodings435_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings436_22[] = {
    {CODING_NAME("cvtpi2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings436_18[] = {
    {CODING_NAME("cvtpi2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtpi2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode436(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings436_22;
    operand.values[18] = OpcodeCodings436_18;
    asmError rv;
    {
        rv = Opcode24(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings437_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings437_18[] = {
    {CODING_NAME("cvtpi2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtpi2ps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode437(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings437_22;
    operand.values[18] = OpcodeCodings437_18;
    asmError rv;
    {
        rv = Opcode24(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings438_22[] = {
    {CODING_NAME("cvtps2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings438_18[] = {
    {CODING_NAME("cvtps2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtps2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode438(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings438_22;
    operand.values[18] = OpcodeCodings438_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings439_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings439_18[] = {
    {CODING_NAME("cvtps2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtps2pd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode439(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings439_22;
    operand.values[18] = OpcodeCodings439_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings440_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings440_18[] = {
    {CODING_NAME("cvtps2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtps2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode440(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings440_22;
    operand.values[18] = OpcodeCodings440_18;
    asmError rv;
    {
        rv = Opcode23(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings441_22[] = {
    {CODING_NAME("cvtsd2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings441_18[] = {
    {CODING_NAME("cvtsd2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtsd2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode441(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings441_22;
    operand.values[18] = OpcodeCodings441_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings442_22[] = {
    {CODING_NAME("cvtsd2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings442_18[] = {
    {CODING_NAME("cvtsd2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtsd2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode442(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings442_22;
    operand.values[18] = OpcodeCodings442_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings443_22[] = {
    {CODING_NAME("cvtsi2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings443_18[] = {
    {CODING_NAME("cvtsi2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtsi2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode443(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings443_22;
    operand.values[18] = OpcodeCodings443_18;
    asmError rv;
    {
        rv = Opcode26(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings444_22[] = {
    {CODING_NAME("cvtsi2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings444_18[] = {
    {CODING_NAME("cvtsi2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtsi2ss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 42, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode444(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings444_22;
    operand.values[18] = OpcodeCodings444_18;
    asmError rv;
    {
        rv = Opcode26(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings445_22[] = {
    {CODING_NAME("cvtss2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings445_18[] = {
    {CODING_NAME("cvtss2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtss2sd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 90, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode445(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings445_22;
    operand.values[18] = OpcodeCodings445_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings446_22[] = {
    {CODING_NAME("cvtss2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings446_18[] = {
    {CODING_NAME("cvtss2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvtss2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 45, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode446(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings446_22;
    operand.values[18] = OpcodeCodings446_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings447_22[] = {
    {CODING_NAME("cvttpd2dq")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings447_18[] = {
    {CODING_NAME("cvttpd2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttpd2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode447(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings447_22;
    operand.values[18] = OpcodeCodings447_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings448_22[] = {
    {CODING_NAME("cvttpd2pi")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings448_18[] = {
    {CODING_NAME("cvttpd2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttpd2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode448(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings448_22;
    operand.values[18] = OpcodeCodings448_18;
    asmError rv;
    {
        rv = Opcode23(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings449_22[] = {
    {CODING_NAME("cvttps2dq")(Coding::Type)(Coding::valSpecified), 243, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings449_18[] = {
    {CODING_NAME("cvttps2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttps2dq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 91, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode449(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings449_22;
    operand.values[18] = OpcodeCodings449_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings450_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings450_18[] = {
    {CODING_NAME("cvttps2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttps2pi")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode450(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings450_22;
    operand.values[18] = OpcodeCodings450_18;
    asmError rv;
    {
        rv = Opcode23(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings451_22[] = {
    {CODING_NAME("cvttsd2si")(Coding::Type)(Coding::valSpecified), 242, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings451_18[] = {
    {CODING_NAME("cvttsd2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttsd2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode451(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings451_22;
    operand.values[18] = OpcodeCodings451_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings452_22[] = {
    {CODING_NAME("cvttss2si")(Coding::Type)(Coding::valSpecified), 243, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings452_18[] = {
    {CODING_NAME("cvttss2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("cvttss2si")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 44, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode452(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings452_22;
    operand.values[18] = OpcodeCodings452_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings453_22[] = {
    {CODING_NAME("divpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings453_18[] = {
    {CODING_NAME("divpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("divpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode453(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings453_22;
    operand.values[18] = OpcodeCodings453_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings454_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings454_18[] = {
    {CODING_NAME("divps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("divps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode454(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings454_22;
    operand.values[18] = OpcodeCodings454_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings455_22[] = {
    {CODING_NAME("divsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings455_18[] = {
    {CODING_NAME("divsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("divsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode455(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings455_22;
    operand.values[18] = OpcodeCodings455_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings456_22[] = {
    {CODING_NAME("divss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings456_18[] = {
    {CODING_NAME("divss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("divss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 94, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode456(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings456_22;
    operand.values[18] = OpcodeCodings456_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings457_22[] = {
    {CODING_NAME("dppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings457_18[] = {
    {CODING_NAME("dppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("dppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("dppd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode457(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings457_22;
    operand.values[18] = OpcodeCodings457_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings458_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings458_18[] = {
    {CODING_NAME("dpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("dpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("dpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode458(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings458_22;
    operand.values[18] = OpcodeCodings458_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings459_22[] = {
    {CODING_NAME("hsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings459_18[] = {
    {CODING_NAME("hsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("hsubpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode459(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings459_22;
    operand.values[18] = OpcodeCodings459_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings460_22[] = {
    {CODING_NAME("hsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings460_18[] = {
    {CODING_NAME("hsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("hsubps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 125, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode460(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings460_22;
    operand.values[18] = OpcodeCodings460_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings461_22[] = {
    {CODING_NAME("insertps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings461_18[] = {
    {CODING_NAME("insertps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("insertps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("insertps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 33, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode461(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings461_22;
    operand.values[18] = OpcodeCodings461_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings462_22[] = {
    {CODING_NAME("lddqu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings462_18[] = {
    {CODING_NAME("lddqu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("lddqu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode462(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings462_22;
    operand.values[18] = OpcodeCodings462_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
asmError x64Parser::Opcode463(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8466, operand);
    return rv;
}
asmError x64Parser::Opcode464(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8470, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings465_22[] = {
    {CODING_NAME("maxpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings465_18[] = {
    {CODING_NAME("maxpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("maxpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode465(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings465_22;
    operand.values[18] = OpcodeCodings465_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings466_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings466_18[] = {
    {CODING_NAME("maxps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("maxps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode466(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings466_22;
    operand.values[18] = OpcodeCodings466_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings467_22[] = {
    {CODING_NAME("maxsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings467_18[] = {
    {CODING_NAME("maxsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("maxsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode467(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings467_22;
    operand.values[18] = OpcodeCodings467_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings468_22[] = {
    {CODING_NAME("maxss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings468_18[] = {
    {CODING_NAME("maxss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("maxss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 95, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode468(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings468_22;
    operand.values[18] = OpcodeCodings468_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings469_18[] = {
    {CODING_NAME("mfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("mfence")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode469(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings469_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings470_22[] = {
    {CODING_NAME("minpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings470_18[] = {
    {CODING_NAME("minpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("minpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode470(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings470_22;
    operand.values[18] = OpcodeCodings470_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings471_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings471_18[] = {
    {CODING_NAME("minps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("minps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode471(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings471_22;
    operand.values[18] = OpcodeCodings471_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings472_22[] = {
    {CODING_NAME("minsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings472_18[] = {
    {CODING_NAME("minsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("minsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode472(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings472_22;
    operand.values[18] = OpcodeCodings472_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings473_22[] = {
    {CODING_NAME("minss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings473_18[] = {
    {CODING_NAME("minss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("minss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 93, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode473(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings473_22;
    operand.values[18] = OpcodeCodings473_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings474_18[] = {
    {CODING_NAME("monitor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("monitor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("monitor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode474(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings474_18;
    asmError rv;
    {
        rv = Opcode0(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings475_22[] = {
    {CODING_NAME("movapd")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings475_35[] = {
    {CODING_NAME("movapd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode475(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings475_22;
    operand.values[35] = OpcodeCodings475_35;
    asmError rv;
    {
        rv = Opcode20(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings476_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings476_35[] = {
    {CODING_NAME("movaps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 40, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode476(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings476_22;
    operand.values[35] = OpcodeCodings476_35;
    asmError rv;
    {
        rv = Opcode20(operand);
    }
    return rv;
}
asmError x64Parser::Opcode477(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8486, operand);
    return rv;
}
asmError x64Parser::Opcode478(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8499, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings479_22[] = {
    {CODING_NAME("movddup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings479_18[] = {
    {CODING_NAME("movddup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movddup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode479(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings479_22;
    operand.values[18] = OpcodeCodings479_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings480_22[] = {
    {CODING_NAME("movdq2q")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings480_18[] = {
    {CODING_NAME("movdq2q")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movdq2q")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 214, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode480(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings480_22;
    operand.values[18] = OpcodeCodings480_18;
    asmError rv;
    {
        rv = Opcode23(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings481_22[] = {
    {CODING_NAME("movdqa")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings481_35[] = {
    {CODING_NAME("movdqa")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode481(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings481_22;
    operand.values[35] = OpcodeCodings481_35;
    asmError rv;
    {
        rv = Opcode21(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings482_22[] = {
    {CODING_NAME("movdqu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings482_35[] = {
    {CODING_NAME("movdqu")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode482(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings482_22;
    operand.values[35] = OpcodeCodings482_35;
    asmError rv;
    {
        rv = Opcode21(operand);
    }
    return rv;
}
asmError x64Parser::Opcode483(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8528, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings484_22[] = {
    {CODING_NAME("movhpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings484_35[] = {
    {CODING_NAME("movhpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode484(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings484_22;
    operand.values[35] = OpcodeCodings484_35;
    asmError rv;
    {
        rv = Opcode22(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings485_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings485_35[] = {
    {CODING_NAME("movhps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode485(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings485_22;
    operand.values[35] = OpcodeCodings485_35;
    asmError rv;
    {
        rv = Opcode22(operand);
    }
    return rv;
}
asmError x64Parser::Opcode486(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8534, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings487_22[] = {
    {CODING_NAME("movlpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings487_35[] = {
    {CODING_NAME("movlpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode487(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings487_22;
    operand.values[35] = OpcodeCodings487_35;
    asmError rv;
    {
        rv = Opcode22(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings488_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings488_35[] = {
    {CODING_NAME("movlps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode488(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings488_22;
    operand.values[35] = OpcodeCodings488_35;
    asmError rv;
    {
        rv = Opcode22(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings489_22[] = {
    {CODING_NAME("movmskpd")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings489_18[] = {
    {CODING_NAME("movmskpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movmskpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode489(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings489_22;
    operand.values[18] = OpcodeCodings489_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings490_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings490_18[] = {
    {CODING_NAME("movmskps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movmskps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 80, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode490(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings490_22;
    operand.values[18] = OpcodeCodings490_18;
    asmError rv;
    {
        rv = Opcode25(operand);
    }
    return rv;
}
asmError x64Parser::Opcode491(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8542, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings492_18[] = {
    {CODING_NAME("movnti")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movnti")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode492(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings492_18;
    asmError rv = ParseOperands(tokenBranches8546, operand);
    return rv;
}
asmError x64Parser::Opcode493(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8553, operand);
    return rv;
}
asmError x64Parser::Opcode494(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8557, operand);
    return rv;
}
asmError x64Parser::Opcode495(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8561, operand);
    return rv;
}
asmError x64Parser::Opcode496(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8565, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings497_22[] = {
    {CODING_NAME("movshdup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings497_18[] = {
    {CODING_NAME("movshdup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movshdup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode497(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings497_22;
    operand.values[18] = OpcodeCodings497_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings498_22[] = {
    {CODING_NAME("movsldup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings498_18[] = {
    {CODING_NAME("movsldup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("movsldup")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode498(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings498_22;
    operand.values[18] = OpcodeCodings498_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings499_22[] = {
    {CODING_NAME("movss")(Coding::Type)(Coding::valSpecified), 243, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings499_35[] = {
    {CODING_NAME("movss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode499(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings499_22;
    operand.values[35] = OpcodeCodings499_35;
    asmError rv;
    {
        rv = Opcode20(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings500_22[] = {
    {CODING_NAME("movupd")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings500_35[] = {
    {CODING_NAME("movupd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode500(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings500_22;
    operand.values[35] = OpcodeCodings500_35;
    asmError rv;
    {
        rv = Opcode20(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings501_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings501_35[] = {
    {CODING_NAME("movups")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 16, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode501(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings501_22;
    operand.values[35] = OpcodeCodings501_35;
    asmError rv;
    {
        rv = Opcode20(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings502_22[] = {
    {CODING_NAME("mpsadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings502_18[] = {
    {CODING_NAME("mpsadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mpsadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("mpsadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 66, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode502(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings502_22;
    operand.values[18] = OpcodeCodings502_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings503_22[] = {
    {CODING_NAME("mulpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings503_18[] = {
    {CODING_NAME("mulpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mulpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode503(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings503_22;
    operand.values[18] = OpcodeCodings503_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings504_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings504_18[] = {
    {CODING_NAME("mulps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mulps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode504(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings504_22;
    operand.values[18] = OpcodeCodings504_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings505_22[] = {
    {CODING_NAME("mulsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings505_18[] = {
    {CODING_NAME("mulsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mulsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode505(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings505_22;
    operand.values[18] = OpcodeCodings505_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings506_22[] = {
    {CODING_NAME("mulss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings506_18[] = {
    {CODING_NAME("mulss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("mulss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 89, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode506(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings506_22;
    operand.values[18] = OpcodeCodings506_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings507_22[] = {
    {CODING_NAME("orpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings507_18[] = {
    {CODING_NAME("orpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("orpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode507(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings507_22;
    operand.values[18] = OpcodeCodings507_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings508_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings508_18[] = {
    {CODING_NAME("orps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("orps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 86, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode508(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings508_22;
    operand.values[18] = OpcodeCodings508_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings509_18[] = {
    {CODING_NAME("packssdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("packssdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode509(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings509_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings510_18[] = {
    {CODING_NAME("packsswb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("packsswb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 99, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode510(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings510_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings511_22[] = {
    {CODING_NAME("packusdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings511_18[] = {
    {CODING_NAME("packusdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("packusdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 56, 8, 0, 0, 0},
    {CODING_NAME("packusdw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 43, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode511(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings511_22;
    operand.values[18] = OpcodeCodings511_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings512_18[] = {
    {CODING_NAME("paddb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 252, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode512(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings512_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings513_18[] = {
    {CODING_NAME("paddd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 254, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode513(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings513_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings514_18[] = {
    {CODING_NAME("paddq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 212, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode514(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings514_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings515_18[] = {
    {CODING_NAME("paddsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode515(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings515_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings516_18[] = {
    {CODING_NAME("paddusb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddusb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 220, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode516(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings516_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings517_18[] = {
    {CODING_NAME("paddusw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddusw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 221, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode517(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings517_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings518_18[] = {
    {CODING_NAME("paddw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("paddw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 253, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode518(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings518_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings519_18[] = {
    {CODING_NAME("palignr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("palignr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("palignr")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode519(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings519_18;
    asmError rv = ParseOperands(tokenBranches8591, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings520_18[] = {
    {CODING_NAME("pand")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pand")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 219, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode520(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings520_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings521_18[] = {
    {CODING_NAME("pandn")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pandn")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode521(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings521_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings522_18[] = {
    {CODING_NAME("pavgb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pavgb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode522(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings522_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings523_18[] = {
    {CODING_NAME("pavgw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pavgw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode523(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings523_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings524_22[] = {
    {CODING_NAME("pblendw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings524_18[] = {
    {CODING_NAME("pblendw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pblendw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pblendw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 14, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode524(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings524_22;
    operand.values[18] = OpcodeCodings524_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings525_18[] = {
    {CODING_NAME("pcmpeqb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpeqb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 116, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode525(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings525_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings526_18[] = {
    {CODING_NAME("pcmpeqd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpeqd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 118, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode526(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings526_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings527_18[] = {
    {CODING_NAME("pcmpeqw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpeqw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 117, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode527(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings527_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings528_22[] = {
    {CODING_NAME("pcmpestri")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings528_18[] = {
    {CODING_NAME("pcmpestri")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpestri")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pcmpestri")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode528(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings528_22;
    operand.values[18] = OpcodeCodings528_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings529_22[] = {
    {CODING_NAME("pcmpestrm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings529_18[] = {
    {CODING_NAME("pcmpestrm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpestrm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pcmpestrm")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode529(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings529_22;
    operand.values[18] = OpcodeCodings529_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings530_18[] = {
    {CODING_NAME("pcmpgtb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpgtb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 100, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode530(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings530_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings531_18[] = {
    {CODING_NAME("pcmpgtd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpgtd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode531(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings531_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings532_18[] = {
    {CODING_NAME("pcmpgtw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pcmpgtw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 101, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode532(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings532_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings533_18[] = {
    {CODING_NAME("pextrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pextrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pextrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode533(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings533_18;
    asmError rv = ParseOperands(tokenBranches8615, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings534_18[] = {
    {CODING_NAME("pextrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pextrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pextrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode534(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings534_18;
    asmError rv = ParseOperands(tokenBranches8621, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings535_18[] = {
    {CODING_NAME("pextrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pextrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pextrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode535(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings535_18;
    asmError rv = ParseOperands(tokenBranches8627, operand);
    return rv;
}
asmError x64Parser::Opcode536(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8633, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings537_18[] = {
    {CODING_NAME("pinsrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pinsrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pinsrb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 32, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode537(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings537_18;
    asmError rv = ParseOperands(tokenBranches8654, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings538_18[] = {
    {CODING_NAME("pinsrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pinsrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pinsrd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode538(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings538_18;
    asmError rv = ParseOperands(tokenBranches8660, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings539_18[] = {
    {CODING_NAME("pinsrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pinsrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("pinsrq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 34, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode539(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings539_18;
    asmError rv = ParseOperands(tokenBranches8666, operand);
    return rv;
}
asmError x64Parser::Opcode540(x64Operand& operand)
{
    asmError rv = ParseOperands(tokenBranches8672, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings541_18[] = {
    {CODING_NAME("pmaddwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmaddwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 245, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode541(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings541_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings542_18[] = {
    {CODING_NAME("pmaxsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmaxsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode542(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings542_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings543_18[] = {
    {CODING_NAME("pmaxub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmaxub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 222, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode543(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings543_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings544_18[] = {
    {CODING_NAME("pminsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pminsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode544(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings544_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings545_18[] = {
    {CODING_NAME("pminub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pminub")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 218, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode545(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings545_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings546_18[] = {
    {CODING_NAME("pmovmskb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmovmskb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode546(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings546_18;
    asmError rv = ParseOperands(tokenBranches8698, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings547_18[] = {
    {CODING_NAME("pmulhuw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmulhuw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode547(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings547_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings548_18[] = {
    {CODING_NAME("pmulhw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmulhw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 229, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode548(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings548_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings549_18[] = {
    {CODING_NAME("pmullw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmullw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 213, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode549(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings549_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings550_18[] = {
    {CODING_NAME("pmuludq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pmuludq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 244, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode550(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings550_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings551_18[] = {
    {CODING_NAME("psadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psadbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 246, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode551(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings551_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings552_22[] = {
    {CODING_NAME("pshufd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings552_18[] = {
    {CODING_NAME("pshufd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pshufd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode552(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings552_22;
    operand.values[18] = OpcodeCodings552_18;
    asmError rv;
    {
        rv = Opcode28(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings553_22[] = {
    {CODING_NAME("pshufhw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings553_18[] = {
    {CODING_NAME("pshufhw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pshufhw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode553(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings553_22;
    operand.values[18] = OpcodeCodings553_18;
    asmError rv;
    {
        rv = Opcode28(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings554_22[] = {
    {CODING_NAME("pshuflw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings554_18[] = {
    {CODING_NAME("pshuflw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pshuflw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode554(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings554_22;
    operand.values[18] = OpcodeCodings554_18;
    asmError rv;
    {
        rv = Opcode28(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings555_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings555_18[] = {
    {CODING_NAME("pshufw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pshufw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 112, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode555(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings555_22;
    operand.values[18] = OpcodeCodings555_18;
    asmError rv = ParseOperands(tokenBranches8719, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings556_38[] = {
    {CODING_NAME("pslld")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings556_35[] = {
    {CODING_NAME("pslld")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings556_36[] = {
    {CODING_NAME("pslld")(Coding::Type)(Coding::valSpecified), 242, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode556(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings556_38;
    operand.values[35] = OpcodeCodings556_35;
    operand.values[36] = OpcodeCodings556_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings557_22[] = {
    {CODING_NAME("pslldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings557_18[] = {
    {CODING_NAME("pslldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pslldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode557(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings557_22;
    operand.values[18] = OpcodeCodings557_18;
    asmError rv = ParseOperands(tokenBranches8726, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings558_38[] = {
    {CODING_NAME("psllq")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings558_35[] = {
    {CODING_NAME("psllq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings558_36[] = {
    {CODING_NAME("psllq")(Coding::Type)(Coding::valSpecified), 243, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode558(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings558_38;
    operand.values[35] = OpcodeCodings558_35;
    operand.values[36] = OpcodeCodings558_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings559_38[] = {
    {CODING_NAME("psllw")(Coding::Type)(Coding::valSpecified), 6, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings559_35[] = {
    {CODING_NAME("psllw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings559_36[] = {
    {CODING_NAME("psllw")(Coding::Type)(Coding::valSpecified), 241, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode559(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings559_38;
    operand.values[35] = OpcodeCodings559_35;
    operand.values[36] = OpcodeCodings559_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings560_38[] = {
    {CODING_NAME("psrad")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings560_35[] = {
    {CODING_NAME("psrad")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings560_36[] = {
    {CODING_NAME("psrad")(Coding::Type)(Coding::valSpecified), 226, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode560(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings560_38;
    operand.values[35] = OpcodeCodings560_35;
    operand.values[36] = OpcodeCodings560_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings561_38[] = {
    {CODING_NAME("psraw")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings561_35[] = {
    {CODING_NAME("psraw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings561_36[] = {
    {CODING_NAME("psraw")(Coding::Type)(Coding::valSpecified), 225, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode561(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings561_38;
    operand.values[35] = OpcodeCodings561_35;
    operand.values[36] = OpcodeCodings561_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings562_38[] = {
    {CODING_NAME("psrld")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings562_35[] = {
    {CODING_NAME("psrld")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 114, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings562_36[] = {
    {CODING_NAME("psrld")(Coding::Type)(Coding::valSpecified), 210, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode562(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings562_38;
    operand.values[35] = OpcodeCodings562_35;
    operand.values[36] = OpcodeCodings562_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings563_22[] = {
    {CODING_NAME("psrldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings563_18[] = {
    {CODING_NAME("psrldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psrldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode563(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings563_22;
    operand.values[18] = OpcodeCodings563_18;
    asmError rv = ParseOperands(tokenBranches8735, operand);
    return rv;
}
Coding x64Parser::OpcodeCodings564_38[] = {
    {CODING_NAME("psrlq")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings564_35[] = {
    {CODING_NAME("psrlq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 115, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings564_36[] = {
    {CODING_NAME("psrlq")(Coding::Type)(Coding::valSpecified), 211, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode564(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings564_38;
    operand.values[35] = OpcodeCodings564_35;
    operand.values[36] = OpcodeCodings564_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings565_38[] = {
    {CODING_NAME("psrlw")(Coding::Type)(Coding::valSpecified), 2, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings565_35[] = {
    {CODING_NAME("psrlw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 113, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings565_36[] = {
    {CODING_NAME("psrlw")(Coding::Type)(Coding::valSpecified), 209, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode565(x64Operand& operand)
{
    operand.values[38] = OpcodeCodings565_38;
    operand.values[35] = OpcodeCodings565_35;
    operand.values[36] = OpcodeCodings565_36;
    asmError rv;
    {
        rv = Opcode29(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings566_18[] = {
    {CODING_NAME("psubb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 248, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode566(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings566_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings567_18[] = {
    {CODING_NAME("psubd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 250, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode567(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings567_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings568_18[] = {
    {CODING_NAME("psubq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 251, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode568(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings568_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings569_18[] = {
    {CODING_NAME("psubsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubsb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode569(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings569_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings570_18[] = {
    {CODING_NAME("psubsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubsw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode570(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings570_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings571_18[] = {
    {CODING_NAME("psubusb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubusb")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 216, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode571(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings571_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings572_18[] = {
    {CODING_NAME("psubusw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("psubusw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 217, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode572(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings572_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings573_18[] = {
    {CODING_NAME("punpckhbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpckhbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode573(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings573_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings574_18[] = {
    {CODING_NAME("punpckhdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpckhdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode574(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings574_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings575_22[] = {
    {CODING_NAME("punpckhqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings575_18[] = {
    {CODING_NAME("punpckhqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpckhqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode575(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings575_22;
    operand.values[18] = OpcodeCodings575_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings576_18[] = {
    {CODING_NAME("punpckhwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpckhwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode576(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings576_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings577_18[] = {
    {CODING_NAME("punpcklbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpcklbw")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 96, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode577(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings577_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings578_18[] = {
    {CODING_NAME("punpckldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpckldq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 98, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode578(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings578_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings579_22[] = {
    {CODING_NAME("punpcklqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings579_18[] = {
    {CODING_NAME("punpcklqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpcklqdq")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode579(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings579_22;
    operand.values[18] = OpcodeCodings579_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings580_18[] = {
    {CODING_NAME("punpcklwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("punpcklwd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 97, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode580(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings580_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings581_18[] = {
    {CODING_NAME("pxor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("pxor")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode581(x64Operand& operand)
{
    operand.values[18] = OpcodeCodings581_18;
    asmError rv;
    {
        rv = Opcode27(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings582_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings582_18[] = {
    {CODING_NAME("rcpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rcpps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode582(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings582_22;
    operand.values[18] = OpcodeCodings582_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings583_22[] = {
    {CODING_NAME("rcpss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings583_18[] = {
    {CODING_NAME("rcpss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rcpss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 83, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode583(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings583_22;
    operand.values[18] = OpcodeCodings583_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings584_22[] = {
    {CODING_NAME("roundpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings584_18[] = {
    {CODING_NAME("roundpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("roundpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("roundpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 9, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode584(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings584_22;
    operand.values[18] = OpcodeCodings584_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings585_22[] = {
    {CODING_NAME("roundps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings585_18[] = {
    {CODING_NAME("roundps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("roundps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("roundps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode585(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings585_22;
    operand.values[18] = OpcodeCodings585_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings586_22[] = {
    {CODING_NAME("roundsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings586_18[] = {
    {CODING_NAME("roundsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("roundsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("roundsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode586(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings586_22;
    operand.values[18] = OpcodeCodings586_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings587_22[] = {
    {CODING_NAME("roundss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings587_18[] = {
    {CODING_NAME("roundss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("roundss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 58, 8, 0, 0, 0},
    {CODING_NAME("roundss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode587(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings587_22;
    operand.values[18] = OpcodeCodings587_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings588_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings588_18[] = {
    {CODING_NAME("rsqrtps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rsqrtps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode588(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings588_22;
    operand.values[18] = OpcodeCodings588_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings589_22[] = {
    {CODING_NAME("rsqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings589_18[] = {
    {CODING_NAME("rsqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("rsqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 82, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode589(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings589_22;
    operand.values[18] = OpcodeCodings589_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings590_22[] = {
    {CODING_NAME("shufpd")(Coding::Type)(Coding::valSpecified), 102, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings590_18[] = {
    {CODING_NAME("shufpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("shufpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode590(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings590_22;
    operand.values[18] = OpcodeCodings590_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings591_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings591_18[] = {
    {CODING_NAME("shufps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("shufps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 198, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode591(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings591_22;
    operand.values[18] = OpcodeCodings591_18;
    asmError rv;
    {
        rv = Opcode30(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings592_22[] = {
    {CODING_NAME("sqrtpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings592_18[] = {
    {CODING_NAME("sqrtpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sqrtpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode592(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings592_22;
    operand.values[18] = OpcodeCodings592_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings593_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings593_18[] = {
    {CODING_NAME("sqrtps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sqrtps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode593(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings593_22;
    operand.values[18] = OpcodeCodings593_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings594_22[] = {
    {CODING_NAME("sqrtsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings594_18[] = {
    {CODING_NAME("sqrtsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sqrtsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode594(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings594_22;
    operand.values[18] = OpcodeCodings594_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings595_22[] = {
    {CODING_NAME("sqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings595_18[] = {
    {CODING_NAME("sqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("sqrtss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 81, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode595(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings595_22;
    operand.values[18] = OpcodeCodings595_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings596_22[] = {
    {CODING_NAME("subpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings596_18[] = {
    {CODING_NAME("subpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("subpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode596(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings596_22;
    operand.values[18] = OpcodeCodings596_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings597_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings597_18[] = {
    {CODING_NAME("subps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("subps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode597(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings597_22;
    operand.values[18] = OpcodeCodings597_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings598_22[] = {
    {CODING_NAME("subsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings598_18[] = {
    {CODING_NAME("subsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("subsd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode598(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings598_22;
    operand.values[18] = OpcodeCodings598_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings599_22[] = {
    {CODING_NAME("subss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings599_18[] = {
    {CODING_NAME("subss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("subss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 92, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode599(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings599_22;
    operand.values[18] = OpcodeCodings599_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings600_22[] = {
    {CODING_NAME("ucomisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings600_18[] = {
    {CODING_NAME("ucomisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("ucomisd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 46, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode600(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings600_22;
    operand.values[18] = OpcodeCodings600_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings601_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings601_18[] = {
    {CODING_NAME("ucomiss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("ucomiss")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 46, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode601(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings601_22;
    operand.values[18] = OpcodeCodings601_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings602_22[] = {
    {CODING_NAME("unpckhpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings602_18[] = {
    {CODING_NAME("unpckhpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unpckhpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode602(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings602_22;
    operand.values[18] = OpcodeCodings602_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings603_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings603_18[] = {
    {CODING_NAME("unpckhps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unpckhps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode603(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings603_22;
    operand.values[18] = OpcodeCodings603_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings604_22[] = {
    {CODING_NAME("unpcklpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings604_18[] = {
    {CODING_NAME("unpcklpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unpcklpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode604(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings604_22;
    operand.values[18] = OpcodeCodings604_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings605_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings605_18[] = {
    {CODING_NAME("unpcklps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unpcklps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 20, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode605(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings605_22;
    operand.values[18] = OpcodeCodings605_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings606_22[] = {
    {CODING_NAME("xorpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 102, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings606_18[] = {
    {CODING_NAME("xorpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("xorpd")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode606(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings606_22;
    operand.values[18] = OpcodeCodings606_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
Coding x64Parser::OpcodeCodings607_22[] = {
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::OpcodeCodings607_18[] = {
    {CODING_NAME("xorps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("xorps")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 87, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
asmError x64Parser::Opcode607(x64Operand& operand)
{
    operand.values[22] = OpcodeCodings607_22;
    operand.values[18] = OpcodeCodings607_18;
    asmError rv;
    {
        rv = Opcode19(operand);
    }
    return rv;
}
asmError x64Parser::Opcode608(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode609(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode610(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode611(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode612(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode613(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode614(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode615(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode616(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode617(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode618(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
asmError x64Parser::Opcode619(x64Operand& operand)
{
    asmError rv = AERR_NONE;
    return rv;
}
x64Parser::DispatchType x64Parser::DispatchTable[620] = {
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    &x64Parser::Opcode32,
    &x64Parser::Opcode33,
    &x64Parser::Opcode34,
    &x64Parser::Opcode35,
    &x64Parser::Opcode36,
    &x64Parser::Opcode37,
    &x64Parser::Opcode38,
    &x64Parser::Opcode39,
    &x64Parser::Opcode40,
    &x64Parser::Opcode41,
    &x64Parser::Opcode42,
    &x64Parser::Opcode43,
    &x64Parser::Opcode44,
    &x64Parser::Opcode45,
    &x64Parser::Opcode46,
    &x64Parser::Opcode47,
    &x64Parser::Opcode48,
    &x64Parser::Opcode49,
    &x64Parser::Opcode50,
    &x64Parser::Opcode51,
    &x64Parser::Opcode52,
    &x64Parser::Opcode53,
    &x64Parser::Opcode54,
    &x64Parser::Opcode55,
    &x64Parser::Opcode56,
    &x64Parser::Opcode57,
    &x64Parser::Opcode58,
    &x64Parser::Opcode59,
    &x64Parser::Opcode60,
    &x64Parser::Opcode61,
    &x64Parser::Opcode62,
    &x64Parser::Opcode63,
    &x64Parser::Opcode64,
    &x64Parser::Opcode65,
    &x64Parser::Opcode66,
    &x64Parser::Opcode67,
    &x64Parser::Opcode68,
    &x64Parser::Opcode69,
    &x64Parser::Opcode70,
    &x64Parser::Opcode71,
    &x64Parser::Opcode72,
    &x64Parser::Opcode73,
    &x64Parser::Opcode74,
    &x64Parser::Opcode75,
    &x64Parser::Opcode76,
    &x64Parser::Opcode77,
    &x64Parser::Opcode78,
    &x64Parser::Opcode79,
    &x64Parser::Opcode80,
    &x64Parser::Opcode81,
    &x64Parser::Opcode82,
    &x64Parser::Opcode83,
    &x64Parser::Opcode84,
    &x64Parser::Opcode85,
    &x64Parser::Opcode86,
    &x64Parser::Opcode87,
    &x64Parser::Opcode88,
    &x64Parser::Opcode89,
    &x64Parser::Opcode90,
    &x64Parser::Opcode91,
    &x64Parser::Opcode92,
    &x64Parser::Opcode93,
    &x64Parser::Opcode94,
    &x64Parser::Opcode95,
    &x64Parser::Opcode96,
    &x64Parser::Opcode97,
    &x64Parser::Opcode98,
    &x64Parser::Opcode99,
    &x64Parser::Opcode100,
    &x64Parser::Opcode101,
    &x64Parser::Opcode102,
    &x64Parser::Opcode103,
    &x64Parser::Opcode104,
    &x64Parser::Opcode105,
    &x64Parser::Opcode106,
    &x64Parser::Opcode107,
    &x64Parser::Opcode108,
    &x64Parser::Opcode109,
    &x64Parser::Opcode110,
    &x64Parser::Opcode111,
    &x64Parser::Opcode112,
    &x64Parser::Opcode113,
    &x64Parser::Opcode114,
    &x64Parser::Opcode115,
    &x64Parser::Opcode116,
    &x64Parser::Opcode117,
    &x64Parser::Opcode118,
    &x64Parser::Opcode119,
    &x64Parser::Opcode120,
    &x64Parser::Opcode121,
    &x64Parser::Opcode122,
    &x64Parser::Opcode123,
    &x64Parser::Opcode124,
    &x64Parser::Opcode125,
    &x64Parser::Opcode126,
    &x64Parser::Opcode127,
    &x64Parser::Opcode128,
    &x64Parser::Opcode129,
    &x64Parser::Opcode130,
    &x64Parser::Opcode131,
    &x64Parser::Opcode132,
    &x64Parser::Opcode133,
    &x64Parser::Opcode134,
    &x64Parser::Opcode135,
    &x64Parser::Opcode136,
    &x64Parser::Opcode137,
    &x64Parser::Opcode138,
    &x64Parser::Opcode139,
    &x64Parser::Opcode140,
    &x64Parser::Opcode141,
    &x64Parser::Opcode142,
    &x64Parser::Opcode143,
    &x64Parser::Opcode144,
    &x64Parser::Opcode145,
    &x64Parser::Opcode146,
    &x64Parser::Opcode147,
    &x64Parser::Opcode148,
    &x64Parser::Opcode149,
    &x64Parser::Opcode150,
    &x64Parser::Opcode151,
    &x64Parser::Opcode152,
    &x64Parser::Opcode153,
    &x64Parser::Opcode154,
    &x64Parser::Opcode155,
    &x64Parser::Opcode156,
    &x64Parser::Opcode157,
    &x64Parser::Opcode158,
    &x64Parser::Opcode159,
    &x64Parser::Opcode160,
    &x64Parser::Opcode161,
    &x64Parser::Opcode162,
    &x64Parser::Opcode163,
    &x64Parser::Opcode164,
    &x64Parser::Opcode165,
    &x64Parser::Opcode166,
    &x64Parser::Opcode167,
    &x64Parser::Opcode168,
    &x64Parser::Opcode169,
    &x64Parser::Opcode170,
    &x64Parser::Opcode171,
    &x64Parser::Opcode172,
    &x64Parser::Opcode173,
    &x64Parser::Opcode174,
    &x64Parser::Opcode175,
    &x64Parser::Opcode176,
    &x64Parser::Opcode177,
    &x64Parser::Opcode178,
    &x64Parser::Opcode179,
    &x64Parser::Opcode180,
    &x64Parser::Opcode181,
    &x64Parser::Opcode182,
    &x64Parser::Opcode183,
    &x64Parser::Opcode184,
    &x64Parser::Opcode185,
    &x64Parser::Opcode186,
    &x64Parser::Opcode187,
    &x64Parser::Opcode188,
    &x64Parser::Opcode189,
    &x64Parser::Opcode190,
    &x64Parser::Opcode191,
    &x64Parser::Opcode192,
    &x64Parser::Opcode193,
    &x64Parser::Opcode194,
    &x64Parser::Opcode195,
    &x64Parser::Opcode196,
    &x64Parser::Opcode197,
    &x64Parser::Opcode198,
    &x64Parser::Opcode199,
    &x64Parser::Opcode200,
    &x64Parser::Opcode201,
    &x64Parser::Opcode202,
    &x64Parser::Opcode203,
    &x64Parser::Opcode204,
    &x64Parser::Opcode205,
    &x64Parser::Opcode206,
    &x64Parser::Opcode207,
    &x64Parser::Opcode208,
    &x64Parser::Opcode209,
    &x64Parser::Opcode210,
    &x64Parser::Opcode211,
    &x64Parser::Opcode212,
    &x64Parser::Opcode213,
    &x64Parser::Opcode214,
    &x64Parser::Opcode215,
    &x64Parser::Opcode216,
    &x64Parser::Opcode217,
    &x64Parser::Opcode218,
    &x64Parser::Opcode219,
    &x64Parser::Opcode220,
    &x64Parser::Opcode221,
    &x64Parser::Opcode222,
    &x64Parser::Opcode223,
    &x64Parser::Opcode224,
    &x64Parser::Opcode225,
    &x64Parser::Opcode226,
    &x64Parser::Opcode227,
    &x64Parser::Opcode228,
    &x64Parser::Opcode229,
    &x64Parser::Opcode230,
    &x64Parser::Opcode231,
    &x64Parser::Opcode232,
    &x64Parser::Opcode233,
    &x64Parser::Opcode234,
    &x64Parser::Opcode235,
    &x64Parser::Opcode236,
    &x64Parser::Opcode237,
    &x64Parser::Opcode238,
    &x64Parser::Opcode239,
    &x64Parser::Opcode240,
    &x64Parser::Opcode241,
    &x64Parser::Opcode242,
    &x64Parser::Opcode243,
    &x64Parser::Opcode244,
    &x64Parser::Opcode245,
    &x64Parser::Opcode246,
    &x64Parser::Opcode247,
    &x64Parser::Opcode248,
    &x64Parser::Opcode249,
    &x64Parser::Opcode250,
    &x64Parser::Opcode251,
    &x64Parser::Opcode252,
    &x64Parser::Opcode253,
    &x64Parser::Opcode254,
    &x64Parser::Opcode255,
    &x64Parser::Opcode256,
    &x64Parser::Opcode257,
    &x64Parser::Opcode258,
    &x64Parser::Opcode259,
    &x64Parser::Opcode260,
    &x64Parser::Opcode261,
    &x64Parser::Opcode262,
    &x64Parser::Opcode263,
    &x64Parser::Opcode264,
    &x64Parser::Opcode265,
    &x64Parser::Opcode266,
    &x64Parser::Opcode267,
    &x64Parser::Opcode268,
    &x64Parser::Opcode269,
    &x64Parser::Opcode270,
    &x64Parser::Opcode271,
    &x64Parser::Opcode272,
    &x64Parser::Opcode273,
    &x64Parser::Opcode274,
    &x64Parser::Opcode275,
    &x64Parser::Opcode276,
    &x64Parser::Opcode277,
    &x64Parser::Opcode278,
    &x64Parser::Opcode279,
    &x64Parser::Opcode280,
    &x64Parser::Opcode281,
    &x64Parser::Opcode282,
    &x64Parser::Opcode283,
    &x64Parser::Opcode284,
    &x64Parser::Opcode285,
    &x64Parser::Opcode286,
    &x64Parser::Opcode287,
    &x64Parser::Opcode288,
    &x64Parser::Opcode289,
    &x64Parser::Opcode290,
    &x64Parser::Opcode291,
    &x64Parser::Opcode292,
    &x64Parser::Opcode293,
    &x64Parser::Opcode294,
    &x64Parser::Opcode295,
    &x64Parser::Opcode296,
    &x64Parser::Opcode297,
    &x64Parser::Opcode298,
    &x64Parser::Opcode299,
    &x64Parser::Opcode300,
    &x64Parser::Opcode301,
    &x64Parser::Opcode302,
    &x64Parser::Opcode303,
    &x64Parser::Opcode304,
    &x64Parser::Opcode305,
    &x64Parser::Opcode306,
    &x64Parser::Opcode307,
    &x64Parser::Opcode308,
    &x64Parser::Opcode309,
    &x64Parser::Opcode310,
    &x64Parser::Opcode311,
    &x64Parser::Opcode312,
    &x64Parser::Opcode313,
    &x64Parser::Opcode314,
    &x64Parser::Opcode315,
    &x64Parser::Opcode316,
    &x64Parser::Opcode317,
    &x64Parser::Opcode318,
    &x64Parser::Opcode319,
    &x64Parser::Opcode320,
    &x64Parser::Opcode321,
    &x64Parser::Opcode322,
    &x64Parser::Opcode323,
    &x64Parser::Opcode324,
    &x64Parser::Opcode325,
    &x64Parser::Opcode326,
    &x64Parser::Opcode327,
    &x64Parser::Opcode328,
    &x64Parser::Opcode329,
    &x64Parser::Opcode330,
    &x64Parser::Opcode331,
    &x64Parser::Opcode332,
    &x64Parser::Opcode333,
    &x64Parser::Opcode334,
    &x64Parser::Opcode335,
    &x64Parser::Opcode336,
    &x64Parser::Opcode337,
    &x64Parser::Opcode338,
    &x64Parser::Opcode339,
    &x64Parser::Opcode340,
    &x64Parser::Opcode341,
    &x64Parser::Opcode342,
    &x64Parser::Opcode343,
    &x64Parser::Opcode344,
    &x64Parser::Opcode345,
    &x64Parser::Opcode346,
    &x64Parser::Opcode347,
    &x64Parser::Opcode348,
    &x64Parser::Opcode349,
    &x64Parser::Opcode350,
    &x64Parser::Opcode351,
    &x64Parser::Opcode352,
    &x64Parser::Opcode353,
    &x64Parser::Opcode354,
    &x64Parser::Opcode355,
    &x64Parser::Opcode356,
    &x64Parser::Opcode357,
    &x64Parser::Opcode358,
    &x64Parser::Opcode359,
    &x64Parser::Opcode360,
    &x64Parser::Opcode361,
    &x64Parser::Opcode362,
    &x64Parser::Opcode363,
    &x64Parser::Opcode364,
    &x64Parser::Opcode365,
    &x64Parser::Opcode366,
    &x64Parser::Opcode367,
    &x64Parser::Opcode368,
    &x64Parser::Opcode369,
    &x64Parser::Opcode370,
    &x64Parser::Opcode371,
    &x64Parser::Opcode372,
    &x64Parser::Opcode373,
    &x64Parser::Opcode374,
    &x64Parser::Opcode375,
    &x64Parser::Opcode376,
    &x64Parser::Opcode377,
    &x64Parser::Opcode378,
    &x64Parser::Opcode379,
    &x64Parser::Opcode380,
    &x64Parser::Opcode381,
    &x64Parser::Opcode382,
    &x64Parser::Opcode383,
    &x64Parser::Opcode384,
    &x64Parser::Opcode385,
    &x64Parser::Opcode386,
    &x64Parser::Opcode387,
    &x64Parser::Opcode388,
    &x64Parser::Opcode389,
    &x64Parser::Opcode390,
    &x64Parser::Opcode391,
    &x64Parser::Opcode392,
    &x64Parser::Opcode393,
    &x64Parser::Opcode394,
    &x64Parser::Opcode395,
    &x64Parser::Opcode396,
    &x64Parser::Opcode397,
    &x64Parser::Opcode398,
    &x64Parser::Opcode399,
    &x64Parser::Opcode400,
    &x64Parser::Opcode401,
    &x64Parser::Opcode402,
    &x64Parser::Opcode403,
    &x64Parser::Opcode404,
    &x64Parser::Opcode405,
    &x64Parser::Opcode406,
    &x64Parser::Opcode407,
    &x64Parser::Opcode408,
    &x64Parser::Opcode409,
    &x64Parser::Opcode410,
    &x64Parser::Opcode411,
    &x64Parser::Opcode412,
    &x64Parser::Opcode413,
    &x64Parser::Opcode414,
    &x64Parser::Opcode415,
    &x64Parser::Opcode416,
    &x64Parser::Opcode417,
    &x64Parser::Opcode418,
    &x64Parser::Opcode419,
    &x64Parser::Opcode420,
    &x64Parser::Opcode421,
    &x64Parser::Opcode422,
    &x64Parser::Opcode423,
    &x64Parser::Opcode424,
    &x64Parser::Opcode425,
    &x64Parser::Opcode426,
    &x64Parser::Opcode427,
    &x64Parser::Opcode428,
    &x64Parser::Opcode429,
    &x64Parser::Opcode430,
    &x64Parser::Opcode431,
    &x64Parser::Opcode432,
    &x64Parser::Opcode433,
    &x64Parser::Opcode434,
    &x64Parser::Opcode435,
    &x64Parser::Opcode436,
    &x64Parser::Opcode437,
    &x64Parser::Opcode438,
    &x64Parser::Opcode439,
    &x64Parser::Opcode440,
    &x64Parser::Opcode441,
    &x64Parser::Opcode442,
    &x64Parser::Opcode443,
    &x64Parser::Opcode444,
    &x64Parser::Opcode445,
    &x64Parser::Opcode446,
    &x64Parser::Opcode447,
    &x64Parser::Opcode448,
    &x64Parser::Opcode449,
    &x64Parser::Opcode450,
    &x64Parser::Opcode451,
    &x64Parser::Opcode452,
    &x64Parser::Opcode453,
    &x64Parser::Opcode454,
    &x64Parser::Opcode455,
    &x64Parser::Opcode456,
    &x64Parser::Opcode457,
    &x64Parser::Opcode458,
    &x64Parser::Opcode459,
    &x64Parser::Opcode460,
    &x64Parser::Opcode461,
    &x64Parser::Opcode462,
    &x64Parser::Opcode463,
    &x64Parser::Opcode464,
    &x64Parser::Opcode465,
    &x64Parser::Opcode466,
    &x64Parser::Opcode467,
    &x64Parser::Opcode468,
    &x64Parser::Opcode469,
    &x64Parser::Opcode470,
    &x64Parser::Opcode471,
    &x64Parser::Opcode472,
    &x64Parser::Opcode473,
    &x64Parser::Opcode474,
    &x64Parser::Opcode475,
    &x64Parser::Opcode476,
    &x64Parser::Opcode477,
    &x64Parser::Opcode478,
    &x64Parser::Opcode479,
    &x64Parser::Opcode480,
    &x64Parser::Opcode481,
    &x64Parser::Opcode482,
    &x64Parser::Opcode483,
    &x64Parser::Opcode484,
    &x64Parser::Opcode485,
    &x64Parser::Opcode486,
    &x64Parser::Opcode487,
    &x64Parser::Opcode488,
    &x64Parser::Opcode489,
    &x64Parser::Opcode490,
    &x64Parser::Opcode491,
    &x64Parser::Opcode492,
    &x64Parser::Opcode493,
    &x64Parser::Opcode494,
    &x64Parser::Opcode495,
    &x64Parser::Opcode496,
    &x64Parser::Opcode497,
    &x64Parser::Opcode498,
    &x64Parser::Opcode499,
    &x64Parser::Opcode500,
    &x64Parser::Opcode501,
    &x64Parser::Opcode502,
    &x64Parser::Opcode503,
    &x64Parser::Opcode504,
    &x64Parser::Opcode505,
    &x64Parser::Opcode506,
    &x64Parser::Opcode507,
    &x64Parser::Opcode508,
    &x64Parser::Opcode509,
    &x64Parser::Opcode510,
    &x64Parser::Opcode511,
    &x64Parser::Opcode512,
    &x64Parser::Opcode513,
    &x64Parser::Opcode514,
    &x64Parser::Opcode515,
    &x64Parser::Opcode516,
    &x64Parser::Opcode517,
    &x64Parser::Opcode518,
    &x64Parser::Opcode519,
    &x64Parser::Opcode520,
    &x64Parser::Opcode521,
    &x64Parser::Opcode522,
    &x64Parser::Opcode523,
    &x64Parser::Opcode524,
    &x64Parser::Opcode525,
    &x64Parser::Opcode526,
    &x64Parser::Opcode527,
    &x64Parser::Opcode528,
    &x64Parser::Opcode529,
    &x64Parser::Opcode530,
    &x64Parser::Opcode531,
    &x64Parser::Opcode532,
    &x64Parser::Opcode533,
    &x64Parser::Opcode534,
    &x64Parser::Opcode535,
    &x64Parser::Opcode536,
    &x64Parser::Opcode537,
    &x64Parser::Opcode538,
    &x64Parser::Opcode539,
    &x64Parser::Opcode540,
    &x64Parser::Opcode541,
    &x64Parser::Opcode542,
    &x64Parser::Opcode543,
    &x64Parser::Opcode544,
    &x64Parser::Opcode545,
    &x64Parser::Opcode546,
    &x64Parser::Opcode547,
    &x64Parser::Opcode548,
    &x64Parser::Opcode549,
    &x64Parser::Opcode550,
    &x64Parser::Opcode551,
    &x64Parser::Opcode552,
    &x64Parser::Opcode553,
    &x64Parser::Opcode554,
    &x64Parser::Opcode555,
    &x64Parser::Opcode556,
    &x64Parser::Opcode557,
    &x64Parser::Opcode558,
    &x64Parser::Opcode559,
    &x64Parser::Opcode560,
    &x64Parser::Opcode561,
    &x64Parser::Opcode562,
    &x64Parser::Opcode563,
    &x64Parser::Opcode564,
    &x64Parser::Opcode565,
    &x64Parser::Opcode566,
    &x64Parser::Opcode567,
    &x64Parser::Opcode568,
    &x64Parser::Opcode569,
    &x64Parser::Opcode570,
    &x64Parser::Opcode571,
    &x64Parser::Opcode572,
    &x64Parser::Opcode573,
    &x64Parser::Opcode574,
    &x64Parser::Opcode575,
    &x64Parser::Opcode576,
    &x64Parser::Opcode577,
    &x64Parser::Opcode578,
    &x64Parser::Opcode579,
    &x64Parser::Opcode580,
    &x64Parser::Opcode581,
    &x64Parser::Opcode582,
    &x64Parser::Opcode583,
    &x64Parser::Opcode584,
    &x64Parser::Opcode585,
    &x64Parser::Opcode586,
    &x64Parser::Opcode587,
    &x64Parser::Opcode588,
    &x64Parser::Opcode589,
    &x64Parser::Opcode590,
    &x64Parser::Opcode591,
    &x64Parser::Opcode592,
    &x64Parser::Opcode593,
    &x64Parser::Opcode594,
    &x64Parser::Opcode595,
    &x64Parser::Opcode596,
    &x64Parser::Opcode597,
    &x64Parser::Opcode598,
    &x64Parser::Opcode599,
    &x64Parser::Opcode600,
    &x64Parser::Opcode601,
    &x64Parser::Opcode602,
    &x64Parser::Opcode603,
    &x64Parser::Opcode604,
    &x64Parser::Opcode605,
    &x64Parser::Opcode606,
    &x64Parser::Opcode607,
    &x64Parser::Opcode608,
    &x64Parser::Opcode609,
    &x64Parser::Opcode610,
    &x64Parser::Opcode611,
    &x64Parser::Opcode612,
    &x64Parser::Opcode613,
    &x64Parser::Opcode614,
    &x64Parser::Opcode615,
    &x64Parser::Opcode616,
    &x64Parser::Opcode617,
    &x64Parser::Opcode618,
    &x64Parser::Opcode619,
};

x64Token* x64Parser::addressTable[] = {
    &x64Parser::tokenBranches3[0],    &x64Parser::tokenBranches8[0],    &x64Parser::tokenBranches199[0],
    &x64Parser::tokenBranches345[0],  &x64Parser::tokenBranches198[0],  &x64Parser::tokenBranches35[0],
    &x64Parser::tokenBranches136[0],  &x64Parser::tokenBranches282[0],  &x64Parser::tokenBranches428[0],
    &x64Parser::tokenBranches34[0],   &x64Parser::tokenBranches33[0],   &x64Parser::tokenBranches226[0],
    &x64Parser::tokenBranches372[0],  &x64Parser::tokenBranches225[0],  &x64Parser::tokenBranches56[0],
    &x64Parser::tokenBranches169[0],  &x64Parser::tokenBranches315[0],  &x64Parser::tokenBranches461[0],
    &x64Parser::tokenBranches55[0],   &x64Parser::tokenBranches54[0],   &x64Parser::tokenBranches256[0],
    &x64Parser::tokenBranches402[0],  &x64Parser::tokenBranches255[0],  &x64Parser::tokenBranches78[0],
    &x64Parser::tokenBranches605[0],  &x64Parser::tokenBranches701[0],  &x64Parser::tokenBranches825[0],
    &x64Parser::tokenBranches2120[0], &x64Parser::tokenBranches2679[0], &x64Parser::tokenBranches2950[0],
    &x64Parser::tokenBranches2119[0], &x64Parser::tokenBranches2118[0], &x64Parser::tokenBranches2117[0],
    &x64Parser::tokenBranches2129[0], &x64Parser::tokenBranches2688[0], &x64Parser::tokenBranches2959[0],
    &x64Parser::tokenBranches2128[0], &x64Parser::tokenBranches2116[0], &x64Parser::tokenBranches604[0],
    &x64Parser::tokenBranches505[0],  &x64Parser::tokenBranches612[0],  &x64Parser::tokenBranches708[0],
    &x64Parser::tokenBranches832[0],  &x64Parser::tokenBranches2100[0], &x64Parser::tokenBranches2659[0],
    &x64Parser::tokenBranches2930[0], &x64Parser::tokenBranches2099[0], &x64Parser::tokenBranches2098[0],
    &x64Parser::tokenBranches2097[0], &x64Parser::tokenBranches2109[0], &x64Parser::tokenBranches2668[0],
    &x64Parser::tokenBranches2939[0], &x64Parser::tokenBranches2108[0], &x64Parser::tokenBranches2096[0],
    &x64Parser::tokenBranches2218[0], &x64Parser::tokenBranches2630[0], &x64Parser::tokenBranches3008[0],
    &x64Parser::tokenBranches2217[0], &x64Parser::tokenBranches2216[0], &x64Parser::tokenBranches611[0],
    &x64Parser::tokenBranches974[0],  &x64Parser::tokenBranches983[0],  &x64Parser::tokenBranches992[0],
    &x64Parser::tokenBranches973[0],  &x64Parser::tokenBranches965[0],  &x64Parser::tokenBranches1102[0],
    &x64Parser::tokenBranches1111[0], &x64Parser::tokenBranches1120[0], &x64Parser::tokenBranches1101[0],
    &x64Parser::tokenBranches1093[0], &x64Parser::tokenBranches1479[0], &x64Parser::tokenBranches1488[0],
    &x64Parser::tokenBranches1478[0], &x64Parser::tokenBranches1470[0], &x64Parser::tokenBranches964[0],
    &x64Parser::tokenBranches510[0],  &x64Parser::tokenBranches652[0],  &x64Parser::tokenBranches776[0],
    &x64Parser::tokenBranches900[0],  &x64Parser::tokenBranches651[0],  &x64Parser::tokenBranches537[0],
    &x64Parser::tokenBranches643[0],  &x64Parser::tokenBranches767[0],  &x64Parser::tokenBranches891[0],
    &x64Parser::tokenBranches2299[0], &x64Parser::tokenBranches2831[0], &x64Parser::tokenBranches3129[0],
    &x64Parser::tokenBranches2298[0], &x64Parser::tokenBranches2297[0], &x64Parser::tokenBranches2296[0],
    &x64Parser::tokenBranches2308[0], &x64Parser::tokenBranches2840[0], &x64Parser::tokenBranches3138[0],
    &x64Parser::tokenBranches2307[0], &x64Parser::tokenBranches2295[0], &x64Parser::tokenBranches536[0],
    &x64Parser::tokenBranches1624[0], &x64Parser::tokenBranches1633[0], &x64Parser::tokenBranches1642[0],
    &x64Parser::tokenBranches1623[0], &x64Parser::tokenBranches1615[0], &x64Parser::tokenBranches1752[0],
    &x64Parser::tokenBranches1761[0], &x64Parser::tokenBranches1770[0], &x64Parser::tokenBranches1751[0],
    &x64Parser::tokenBranches1743[0], &x64Parser::tokenBranches1898[0], &x64Parser::tokenBranches1907[0],
    &x64Parser::tokenBranches1927[0], &x64Parser::tokenBranches1938[0], &x64Parser::tokenBranches1926[0],
    &x64Parser::tokenBranches1916[0], &x64Parser::tokenBranches1897[0], &x64Parser::tokenBranches1889[0],
    &x64Parser::tokenBranches1614[0], &x64Parser::tokenBranches525[0],  &x64Parser::tokenBranches564[0],
    &x64Parser::tokenBranches1230[0], &x64Parser::tokenBranches1239[0], &x64Parser::tokenBranches1248[0],
    &x64Parser::tokenBranches1229[0], &x64Parser::tokenBranches1221[0], &x64Parser::tokenBranches1358[0],
    &x64Parser::tokenBranches1367[0], &x64Parser::tokenBranches1376[0], &x64Parser::tokenBranches1357[0],
    &x64Parser::tokenBranches1349[0], &x64Parser::tokenBranches1220[0], &x64Parser::tokenBranches1219[0],
    &x64Parser::tokenBranches3747[0], &x64Parser::tokenBranches3756[0], &x64Parser::tokenBranches3765[0],
    &x64Parser::tokenBranches3746[0], &x64Parser::tokenBranches3738[0], &x64Parser::tokenBranches3875[0],
    &x64Parser::tokenBranches3884[0], &x64Parser::tokenBranches3893[0], &x64Parser::tokenBranches3874[0],
    &x64Parser::tokenBranches3866[0], &x64Parser::tokenBranches3737[0], &x64Parser::tokenBranches3736[0],
    &x64Parser::tokenBranches4003[0], &x64Parser::tokenBranches4012[0], &x64Parser::tokenBranches4021[0],
    &x64Parser::tokenBranches4002[0], &x64Parser::tokenBranches3994[0], &x64Parser::tokenBranches4131[0],
    &x64Parser::tokenBranches4140[0], &x64Parser::tokenBranches4149[0], &x64Parser::tokenBranches4130[0],
    &x64Parser::tokenBranches4122[0], &x64Parser::tokenBranches3993[0], &x64Parser::tokenBranches3992[0],
    &x64Parser::tokenBranches7[0],    &x64Parser::tokenBranches6[0],    &x64Parser::tokenBranches13[0],
    &x64Parser::tokenBranches208[0],  &x64Parser::tokenBranches354[0],  &x64Parser::tokenBranches207[0],
    &x64Parser::tokenBranches42[0],   &x64Parser::tokenBranches143[0],  &x64Parser::tokenBranches289[0],
    &x64Parser::tokenBranches435[0],  &x64Parser::tokenBranches41[0],   &x64Parser::tokenBranches40[0],
    &x64Parser::tokenBranches217[0],  &x64Parser::tokenBranches363[0],  &x64Parser::tokenBranches216[0],
    &x64Parser::tokenBranches49[0],   &x64Parser::tokenBranches162[0],  &x64Parser::tokenBranches308[0],
    &x64Parser::tokenBranches454[0],  &x64Parser::tokenBranches48[0],   &x64Parser::tokenBranches47[0],
    &x64Parser::tokenBranches263[0],  &x64Parser::tokenBranches409[0],  &x64Parser::tokenBranches262[0],
    &x64Parser::tokenBranches83[0],   &x64Parser::tokenBranches591[0],  &x64Parser::tokenBranches715[0],
    &x64Parser::tokenBranches839[0],  &x64Parser::tokenBranches2160[0], &x64Parser::tokenBranches2719[0],
    &x64Parser::tokenBranches2990[0], &x64Parser::tokenBranches2159[0], &x64Parser::tokenBranches2158[0],
    &x64Parser::tokenBranches2157[0], &x64Parser::tokenBranches2169[0], &x64Parser::tokenBranches2728[0],
    &x64Parser::tokenBranches2999[0], &x64Parser::tokenBranches2168[0], &x64Parser::tokenBranches2156[0],
    &x64Parser::tokenBranches590[0],  &x64Parser::tokenBranches515[0],  &x64Parser::tokenBranches598[0],
    &x64Parser::tokenBranches722[0],  &x64Parser::tokenBranches846[0],  &x64Parser::tokenBranches2140[0],
    &x64Parser::tokenBranches2699[0], &x64Parser::tokenBranches2970[0], &x64Parser::tokenBranches2139[0],
    &x64Parser::tokenBranches2138[0], &x64Parser::tokenBranches2137[0], &x64Parser::tokenBranches2149[0],
    &x64Parser::tokenBranches2708[0], &x64Parser::tokenBranches2979[0], &x64Parser::tokenBranches2148[0],
    &x64Parser::tokenBranches2136[0], &x64Parser::tokenBranches2227[0], &x64Parser::tokenBranches2639[0],
    &x64Parser::tokenBranches3017[0], &x64Parser::tokenBranches2226[0], &x64Parser::tokenBranches2225[0],
    &x64Parser::tokenBranches597[0],  &x64Parser::tokenBranches1008[0], &x64Parser::tokenBranches1017[0],
    &x64Parser::tokenBranches1026[0], &x64Parser::tokenBranches1007[0], &x64Parser::tokenBranches999[0],
    &x64Parser::tokenBranches1136[0], &x64Parser::tokenBranches1145[0], &x64Parser::tokenBranches1154[0],
    &x64Parser::tokenBranches1135[0], &x64Parser::tokenBranches1127[0], &x64Parser::tokenBranches1504[0],
    &x64Parser::tokenBranches1513[0], &x64Parser::tokenBranches1503[0], &x64Parser::tokenBranches1495[0],
    &x64Parser::tokenBranches998[0],  &x64Parser::tokenBranches520[0],  &x64Parser::tokenBranches668[0],
    &x64Parser::tokenBranches792[0],  &x64Parser::tokenBranches916[0],  &x64Parser::tokenBranches667[0],
    &x64Parser::tokenBranches544[0],  &x64Parser::tokenBranches659[0],  &x64Parser::tokenBranches783[0],
    &x64Parser::tokenBranches907[0],  &x64Parser::tokenBranches2319[0], &x64Parser::tokenBranches2851[0],
    &x64Parser::tokenBranches3149[0], &x64Parser::tokenBranches2318[0], &x64Parser::tokenBranches2317[0],
    &x64Parser::tokenBranches2316[0], &x64Parser::tokenBranches2328[0], &x64Parser::tokenBranches2860[0],
    &x64Parser::tokenBranches3158[0], &x64Parser::tokenBranches2327[0], &x64Parser::tokenBranches2315[0],
    &x64Parser::tokenBranches543[0],  &x64Parser::tokenBranches1658[0], &x64Parser::tokenBranches1667[0],
    &x64Parser::tokenBranches1676[0], &x64Parser::tokenBranches1657[0], &x64Parser::tokenBranches1649[0],
    &x64Parser::tokenBranches1786[0], &x64Parser::tokenBranches1795[0], &x64Parser::tokenBranches1804[0],
    &x64Parser::tokenBranches1785[0], &x64Parser::tokenBranches1777[0], &x64Parser::tokenBranches1954[0],
    &x64Parser::tokenBranches1963[0], &x64Parser::tokenBranches1983[0], &x64Parser::tokenBranches1994[0],
    &x64Parser::tokenBranches1982[0], &x64Parser::tokenBranches1972[0], &x64Parser::tokenBranches1953[0],
    &x64Parser::tokenBranches1945[0], &x64Parser::tokenBranches1648[0], &x64Parser::tokenBranches530[0],
    &x64Parser::tokenBranches569[0],  &x64Parser::tokenBranches1264[0], &x64Parser::tokenBranches1273[0],
    &x64Parser::tokenBranches1282[0], &x64Parser::tokenBranches1263[0], &x64Parser::tokenBranches1255[0],
    &x64Parser::tokenBranches1392[0], &x64Parser::tokenBranches1401[0], &x64Parser::tokenBranches1410[0],
    &x64Parser::tokenBranches1391[0], &x64Parser::tokenBranches1383[0], &x64Parser::tokenBranches1254[0],
    &x64Parser::tokenBranches1253[0], &x64Parser::tokenBranches3781[0], &x64Parser::tokenBranches3790[0],
    &x64Parser::tokenBranches3799[0], &x64Parser::tokenBranches3780[0], &x64Parser::tokenBranches3772[0],
    &x64Parser::tokenBranches3909[0], &x64Parser::tokenBranches3918[0], &x64Parser::tokenBranches3927[0],
    &x64Parser::tokenBranches3908[0], &x64Parser::tokenBranches3900[0], &x64Parser::tokenBranches3771[0],
    &x64Parser::tokenBranches3770[0], &x64Parser::tokenBranches4037[0], &x64Parser::tokenBranches4046[0],
    &x64Parser::tokenBranches4055[0], &x64Parser::tokenBranches4036[0], &x64Parser::tokenBranches4028[0],
    &x64Parser::tokenBranches4165[0], &x64Parser::tokenBranches4174[0], &x64Parser::tokenBranches4183[0],
    &x64Parser::tokenBranches4164[0], &x64Parser::tokenBranches4156[0], &x64Parser::tokenBranches4027[0],
    &x64Parser::tokenBranches4026[0], &x64Parser::tokenBranches12[0],   &x64Parser::tokenBranches11[0],
    &x64Parser::tokenBranches18[0],   &x64Parser::tokenBranches235[0],  &x64Parser::tokenBranches381[0],
    &x64Parser::tokenBranches234[0],  &x64Parser::tokenBranches63[0],   &x64Parser::tokenBranches150[0],
    &x64Parser::tokenBranches296[0],  &x64Parser::tokenBranches442[0],  &x64Parser::tokenBranches62[0],
    &x64Parser::tokenBranches61[0],   &x64Parser::tokenBranches244[0],  &x64Parser::tokenBranches390[0],
    &x64Parser::tokenBranches243[0],  &x64Parser::tokenBranches70[0],   &x64Parser::tokenBranches176[0],
    &x64Parser::tokenBranches322[0],  &x64Parser::tokenBranches468[0],  &x64Parser::tokenBranches69[0],
    &x64Parser::tokenBranches68[0],   &x64Parser::tokenBranches270[0],  &x64Parser::tokenBranches416[0],
    &x64Parser::tokenBranches269[0],  &x64Parser::tokenBranches88[0],   &x64Parser::tokenBranches729[0],
    &x64Parser::tokenBranches853[0],  &x64Parser::tokenBranches2200[0], &x64Parser::tokenBranches2759[0],
    &x64Parser::tokenBranches3057[0], &x64Parser::tokenBranches2199[0], &x64Parser::tokenBranches2198[0],
    &x64Parser::tokenBranches2197[0], &x64Parser::tokenBranches2209[0], &x64Parser::tokenBranches2768[0],
    &x64Parser::tokenBranches3066[0], &x64Parser::tokenBranches2208[0], &x64Parser::tokenBranches2196[0],
    &x64Parser::tokenBranches728[0],  &x64Parser::tokenBranches490[0],  &x64Parser::tokenBranches736[0],
    &x64Parser::tokenBranches860[0],  &x64Parser::tokenBranches2180[0], &x64Parser::tokenBranches2739[0],
    &x64Parser::tokenBranches3037[0], &x64Parser::tokenBranches2179[0], &x64Parser::tokenBranches2178[0],
    &x64Parser::tokenBranches2177[0], &x64Parser::tokenBranches2189[0], &x64Parser::tokenBranches2748[0],
    &x64Parser::tokenBranches3046[0], &x64Parser::tokenBranches2188[0], &x64Parser::tokenBranches2176[0],
    &x64Parser::tokenBranches2236[0], &x64Parser::tokenBranches2648[0], &x64Parser::tokenBranches3026[0],
    &x64Parser::tokenBranches2235[0], &x64Parser::tokenBranches2234[0], &x64Parser::tokenBranches735[0],
    &x64Parser::tokenBranches1042[0], &x64Parser::tokenBranches1051[0], &x64Parser::tokenBranches1060[0],
    &x64Parser::tokenBranches1041[0], &x64Parser::tokenBranches1033[0], &x64Parser::tokenBranches1170[0],
    &x64Parser::tokenBranches1179[0], &x64Parser::tokenBranches1188[0], &x64Parser::tokenBranches1169[0],
    &x64Parser::tokenBranches1161[0], &x64Parser::tokenBranches1529[0], &x64Parser::tokenBranches1538[0],
    &x64Parser::tokenBranches1528[0], &x64Parser::tokenBranches1520[0], &x64Parser::tokenBranches1032[0],
    &x64Parser::tokenBranches495[0],  &x64Parser::tokenBranches636[0],  &x64Parser::tokenBranches760[0],
    &x64Parser::tokenBranches884[0],  &x64Parser::tokenBranches2279[0], &x64Parser::tokenBranches2811[0],
    &x64Parser::tokenBranches3109[0], &x64Parser::tokenBranches2278[0], &x64Parser::tokenBranches2277[0],
    &x64Parser::tokenBranches2276[0], &x64Parser::tokenBranches2288[0], &x64Parser::tokenBranches2820[0],
    &x64Parser::tokenBranches3118[0], &x64Parser::tokenBranches2287[0], &x64Parser::tokenBranches2275[0],
    &x64Parser::tokenBranches635[0],  &x64Parser::tokenBranches1298[0], &x64Parser::tokenBranches1307[0],
    &x64Parser::tokenBranches1316[0], &x64Parser::tokenBranches1297[0], &x64Parser::tokenBranches1289[0],
    &x64Parser::tokenBranches1426[0], &x64Parser::tokenBranches1435[0], &x64Parser::tokenBranches1444[0],
    &x64Parser::tokenBranches1425[0], &x64Parser::tokenBranches1417[0], &x64Parser::tokenBranches1573[0],
    &x64Parser::tokenBranches1582[0], &x64Parser::tokenBranches1572[0], &x64Parser::tokenBranches1564[0],
    &x64Parser::tokenBranches1288[0], &x64Parser::tokenBranches500[0],  &x64Parser::tokenBranches684[0],
    &x64Parser::tokenBranches808[0],  &x64Parser::tokenBranches925[0],  &x64Parser::tokenBranches683[0],
    &x64Parser::tokenBranches556[0],  &x64Parser::tokenBranches675[0],  &x64Parser::tokenBranches799[0],
    &x64Parser::tokenBranches932[0],  &x64Parser::tokenBranches2339[0], &x64Parser::tokenBranches2871[0],
    &x64Parser::tokenBranches3169[0], &x64Parser::tokenBranches2338[0], &x64Parser::tokenBranches2337[0],
    &x64Parser::tokenBranches2336[0], &x64Parser::tokenBranches2348[0], &x64Parser::tokenBranches2880[0],
    &x64Parser::tokenBranches3178[0], &x64Parser::tokenBranches2347[0], &x64Parser::tokenBranches2335[0],
    &x64Parser::tokenBranches555[0],  &x64Parser::tokenBranches1692[0], &x64Parser::tokenBranches1701[0],
    &x64Parser::tokenBranches1710[0], &x64Parser::tokenBranches1691[0], &x64Parser::tokenBranches1683[0],
    &x64Parser::tokenBranches1820[0], &x64Parser::tokenBranches1829[0], &x64Parser::tokenBranches1838[0],
    &x64Parser::tokenBranches1819[0], &x64Parser::tokenBranches1811[0], &x64Parser::tokenBranches2010[0],
    &x64Parser::tokenBranches2019[0], &x64Parser::tokenBranches2039[0], &x64Parser::tokenBranches2050[0],
    &x64Parser::tokenBranches2038[0], &x64Parser::tokenBranches2028[0], &x64Parser::tokenBranches2009[0],
    &x64Parser::tokenBranches2001[0], &x64Parser::tokenBranches1682[0], &x64Parser::tokenBranches549[0],
    &x64Parser::tokenBranches574[0],  &x64Parser::tokenBranches3276[0], &x64Parser::tokenBranches3367[0],
    &x64Parser::tokenBranches3459[0], &x64Parser::tokenBranches4568[0], &x64Parser::tokenBranches4944[0],
    &x64Parser::tokenBranches5156[0], &x64Parser::tokenBranches4567[0], &x64Parser::tokenBranches4566[0],
    &x64Parser::tokenBranches4565[0], &x64Parser::tokenBranches4577[0], &x64Parser::tokenBranches4953[0],
    &x64Parser::tokenBranches5165[0], &x64Parser::tokenBranches4576[0], &x64Parser::tokenBranches4564[0],
    &x64Parser::tokenBranches3275[0], &x64Parser::tokenBranches3195[0], &x64Parser::tokenBranches3336[0],
    &x64Parser::tokenBranches3428[0], &x64Parser::tokenBranches3520[0], &x64Parser::tokenBranches3335[0],
    &x64Parser::tokenBranches3235[0], &x64Parser::tokenBranches3374[0], &x64Parser::tokenBranches3466[0],
    &x64Parser::tokenBranches4588[0], &x64Parser::tokenBranches4964[0], &x64Parser::tokenBranches5176[0],
    &x64Parser::tokenBranches4587[0], &x64Parser::tokenBranches4586[0], &x64Parser::tokenBranches4585[0],
    &x64Parser::tokenBranches4597[0], &x64Parser::tokenBranches4973[0], &x64Parser::tokenBranches5185[0],
    &x64Parser::tokenBranches4596[0], &x64Parser::tokenBranches4584[0], &x64Parser::tokenBranches3234[0],
    &x64Parser::tokenBranches3282[0], &x64Parser::tokenBranches3571[0], &x64Parser::tokenBranches3580[0],
    &x64Parser::tokenBranches3589[0], &x64Parser::tokenBranches3570[0], &x64Parser::tokenBranches3562[0],
    &x64Parser::tokenBranches3631[0], &x64Parser::tokenBranches3640[0], &x64Parser::tokenBranches3649[0],
    &x64Parser::tokenBranches3630[0], &x64Parser::tokenBranches3622[0], &x64Parser::tokenBranches3677[0],
    &x64Parser::tokenBranches3676[0], &x64Parser::tokenBranches3668[0], &x64Parser::tokenBranches3705[0],
    &x64Parser::tokenBranches3704[0], &x64Parser::tokenBranches3696[0], &x64Parser::tokenBranches3561[0],
    &x64Parser::tokenBranches3200[0], &x64Parser::tokenBranches3289[0], &x64Parser::tokenBranches3381[0],
    &x64Parser::tokenBranches3473[0], &x64Parser::tokenBranches4480[0], &x64Parser::tokenBranches4856[0],
    &x64Parser::tokenBranches5068[0], &x64Parser::tokenBranches4479[0], &x64Parser::tokenBranches4478[0],
    &x64Parser::tokenBranches4548[0], &x64Parser::tokenBranches4924[0], &x64Parser::tokenBranches5136[0],
    &x64Parser::tokenBranches4547[0], &x64Parser::tokenBranches4546[0], &x64Parser::tokenBranches4545[0],
    &x64Parser::tokenBranches4557[0], &x64Parser::tokenBranches4933[0], &x64Parser::tokenBranches5145[0],
    &x64Parser::tokenBranches4556[0], &x64Parser::tokenBranches4544[0], &x64Parser::tokenBranches3288[0],
    &x64Parser::tokenBranches3815[0], &x64Parser::tokenBranches3824[0], &x64Parser::tokenBranches3833[0],
    &x64Parser::tokenBranches3814[0], &x64Parser::tokenBranches3806[0], &x64Parser::tokenBranches3943[0],
    &x64Parser::tokenBranches3952[0], &x64Parser::tokenBranches3961[0], &x64Parser::tokenBranches3942[0],
    &x64Parser::tokenBranches3934[0], &x64Parser::tokenBranches4245[0], &x64Parser::tokenBranches4244[0],
    &x64Parser::tokenBranches4236[0], &x64Parser::tokenBranches3805[0], &x64Parser::tokenBranches3205[0],
    &x64Parser::tokenBranches3320[0], &x64Parser::tokenBranches3412[0], &x64Parser::tokenBranches3504[0],
    &x64Parser::tokenBranches4489[0], &x64Parser::tokenBranches4865[0], &x64Parser::tokenBranches5077[0],
    &x64Parser::tokenBranches4488[0], &x64Parser::tokenBranches4487[0], &x64Parser::tokenBranches4640[0],
    &x64Parser::tokenBranches5016[0], &x64Parser::tokenBranches5228[0], &x64Parser::tokenBranches4639[0],
    &x64Parser::tokenBranches4638[0], &x64Parser::tokenBranches4637[0], &x64Parser::tokenBranches4649[0],
    &x64Parser::tokenBranches5025[0], &x64Parser::tokenBranches5237[0], &x64Parser::tokenBranches4648[0],
    &x64Parser::tokenBranches4636[0], &x64Parser::tokenBranches3319[0], &x64Parser::tokenBranches4071[0],
    &x64Parser::tokenBranches4080[0], &x64Parser::tokenBranches4089[0], &x64Parser::tokenBranches4070[0],
    &x64Parser::tokenBranches4062[0], &x64Parser::tokenBranches4199[0], &x64Parser::tokenBranches4208[0],
    &x64Parser::tokenBranches4217[0], &x64Parser::tokenBranches4198[0], &x64Parser::tokenBranches4190[0],
    &x64Parser::tokenBranches4273[0], &x64Parser::tokenBranches4272[0], &x64Parser::tokenBranches4264[0],
    &x64Parser::tokenBranches4061[0], &x64Parser::tokenBranches3210[0], &x64Parser::tokenBranches3345[0],
    &x64Parser::tokenBranches3437[0], &x64Parser::tokenBranches3529[0], &x64Parser::tokenBranches3344[0],
    &x64Parser::tokenBranches3242[0], &x64Parser::tokenBranches3327[0], &x64Parser::tokenBranches3419[0],
    &x64Parser::tokenBranches3511[0], &x64Parser::tokenBranches4660[0], &x64Parser::tokenBranches5036[0],
    &x64Parser::tokenBranches5248[0], &x64Parser::tokenBranches4659[0], &x64Parser::tokenBranches4658[0],
    &x64Parser::tokenBranches4657[0], &x64Parser::tokenBranches4669[0], &x64Parser::tokenBranches5045[0],
    &x64Parser::tokenBranches5257[0], &x64Parser::tokenBranches4668[0], &x64Parser::tokenBranches4656[0],
    &x64Parser::tokenBranches3241[0], &x64Parser::tokenBranches4315[0], &x64Parser::tokenBranches4324[0],
    &x64Parser::tokenBranches4333[0], &x64Parser::tokenBranches4314[0], &x64Parser::tokenBranches4306[0],
    &x64Parser::tokenBranches4375[0], &x64Parser::tokenBranches4384[0], &x64Parser::tokenBranches4393[0],
    &x64Parser::tokenBranches4374[0], &x64Parser::tokenBranches4366[0], &x64Parser::tokenBranches4437[0],
    &x64Parser::tokenBranches4457[0], &x64Parser::tokenBranches4456[0], &x64Parser::tokenBranches4446[0],
    &x64Parser::tokenBranches4436[0], &x64Parser::tokenBranches4428[0], &x64Parser::tokenBranches4305[0],
    &x64Parser::tokenBranches3228[0], &x64Parser::tokenBranches3255[0], &x64Parser::tokenBranches17[0],
    &x64Parser::tokenBranches16[0],   &x64Parser::tokenBranches183[0],  &x64Parser::tokenBranches329[0],
    &x64Parser::tokenBranches182[0],  &x64Parser::tokenBranches23[0],   &x64Parser::tokenBranches129[0],
    &x64Parser::tokenBranches275[0],  &x64Parser::tokenBranches421[0],  &x64Parser::tokenBranches22[0],
    &x64Parser::tokenBranches21[0],   &x64Parser::tokenBranches190[0],  &x64Parser::tokenBranches336[0],
    &x64Parser::tokenBranches189[0],  &x64Parser::tokenBranches28[0],   &x64Parser::tokenBranches155[0],
    &x64Parser::tokenBranches301[0],  &x64Parser::tokenBranches447[0],  &x64Parser::tokenBranches27[0],
    &x64Parser::tokenBranches26[0],   &x64Parser::tokenBranches249[0],  &x64Parser::tokenBranches395[0],
    &x64Parser::tokenBranches248[0],  &x64Parser::tokenBranches73[0],   &x64Parser::tokenBranches579[0],
    &x64Parser::tokenBranches689[0],  &x64Parser::tokenBranches813[0],  &x64Parser::tokenBranches2082[0],
    &x64Parser::tokenBranches2614[0], &x64Parser::tokenBranches2912[0], &x64Parser::tokenBranches2081[0],
    &x64Parser::tokenBranches2080[0], &x64Parser::tokenBranches2079[0], &x64Parser::tokenBranches2089[0],
    &x64Parser::tokenBranches2621[0], &x64Parser::tokenBranches2919[0], &x64Parser::tokenBranches2088[0],
    &x64Parser::tokenBranches2078[0], &x64Parser::tokenBranches578[0],  &x64Parser::tokenBranches471[0],
    &x64Parser::tokenBranches584[0],  &x64Parser::tokenBranches694[0],  &x64Parser::tokenBranches818[0],
    &x64Parser::tokenBranches2057[0], &x64Parser::tokenBranches2589[0], &x64Parser::tokenBranches2887[0],
    &x64Parser::tokenBranches2056[0], &x64Parser::tokenBranches2055[0], &x64Parser::tokenBranches2066[0],
    &x64Parser::tokenBranches2598[0], &x64Parser::tokenBranches2896[0], &x64Parser::tokenBranches2065[0],
    &x64Parser::tokenBranches2064[0], &x64Parser::tokenBranches2063[0], &x64Parser::tokenBranches2073[0],
    &x64Parser::tokenBranches2605[0], &x64Parser::tokenBranches2903[0], &x64Parser::tokenBranches2072[0],
    &x64Parser::tokenBranches2062[0], &x64Parser::tokenBranches583[0],  &x64Parser::tokenBranches944[0],
    &x64Parser::tokenBranches951[0],  &x64Parser::tokenBranches958[0],  &x64Parser::tokenBranches943[0],
    &x64Parser::tokenBranches937[0],  &x64Parser::tokenBranches1072[0], &x64Parser::tokenBranches1079[0],
    &x64Parser::tokenBranches1086[0], &x64Parser::tokenBranches1071[0], &x64Parser::tokenBranches1065[0],
    &x64Parser::tokenBranches1456[0], &x64Parser::tokenBranches1463[0], &x64Parser::tokenBranches1455[0],
    &x64Parser::tokenBranches1449[0], &x64Parser::tokenBranches936[0],  &x64Parser::tokenBranches474[0],
    &x64Parser::tokenBranches617[0],  &x64Parser::tokenBranches741[0],  &x64Parser::tokenBranches865[0],
    &x64Parser::tokenBranches2245[0], &x64Parser::tokenBranches2777[0], &x64Parser::tokenBranches3075[0],
    &x64Parser::tokenBranches2244[0], &x64Parser::tokenBranches2243[0], &x64Parser::tokenBranches2242[0],
    &x64Parser::tokenBranches2252[0], &x64Parser::tokenBranches2784[0], &x64Parser::tokenBranches3082[0],
    &x64Parser::tokenBranches2251[0], &x64Parser::tokenBranches2241[0], &x64Parser::tokenBranches616[0],
    &x64Parser::tokenBranches1200[0], &x64Parser::tokenBranches1207[0], &x64Parser::tokenBranches1214[0],
    &x64Parser::tokenBranches1199[0], &x64Parser::tokenBranches1193[0], &x64Parser::tokenBranches1328[0],
    &x64Parser::tokenBranches1335[0], &x64Parser::tokenBranches1342[0], &x64Parser::tokenBranches1327[0],
    &x64Parser::tokenBranches1321[0], &x64Parser::tokenBranches1550[0], &x64Parser::tokenBranches1557[0],
    &x64Parser::tokenBranches1549[0], &x64Parser::tokenBranches1543[0], &x64Parser::tokenBranches1192[0],
    &x64Parser::tokenBranches477[0],  &x64Parser::tokenBranches629[0],  &x64Parser::tokenBranches753[0],
    &x64Parser::tokenBranches877[0],  &x64Parser::tokenBranches628[0],  &x64Parser::tokenBranches485[0],
    &x64Parser::tokenBranches622[0],  &x64Parser::tokenBranches746[0],  &x64Parser::tokenBranches870[0],
    &x64Parser::tokenBranches2261[0], &x64Parser::tokenBranches2793[0], &x64Parser::tokenBranches3091[0],
    &x64Parser::tokenBranches2260[0], &x64Parser::tokenBranches2259[0], &x64Parser::tokenBranches2258[0],
    &x64Parser::tokenBranches2268[0], &x64Parser::tokenBranches2800[0], &x64Parser::tokenBranches3098[0],
    &x64Parser::tokenBranches2267[0], &x64Parser::tokenBranches2257[0], &x64Parser::tokenBranches484[0],
    &x64Parser::tokenBranches1594[0], &x64Parser::tokenBranches1601[0], &x64Parser::tokenBranches1608[0],
    &x64Parser::tokenBranches1593[0], &x64Parser::tokenBranches1587[0], &x64Parser::tokenBranches1722[0],
    &x64Parser::tokenBranches1729[0], &x64Parser::tokenBranches1736[0], &x64Parser::tokenBranches1721[0],
    &x64Parser::tokenBranches1715[0], &x64Parser::tokenBranches1850[0], &x64Parser::tokenBranches1857[0],
    &x64Parser::tokenBranches1873[0], &x64Parser::tokenBranches1882[0], &x64Parser::tokenBranches1872[0],
    &x64Parser::tokenBranches1864[0], &x64Parser::tokenBranches1849[0], &x64Parser::tokenBranches1843[0],
    &x64Parser::tokenBranches1586[0], &x64Parser::tokenBranches480[0],  &x64Parser::tokenBranches559[0],
    &x64Parser::tokenBranches3260[0], &x64Parser::tokenBranches3350[0], &x64Parser::tokenBranches3442[0],
    &x64Parser::tokenBranches4514[0], &x64Parser::tokenBranches4890[0], &x64Parser::tokenBranches5102[0],
    &x64Parser::tokenBranches4513[0], &x64Parser::tokenBranches4512[0], &x64Parser::tokenBranches4511[0],
    &x64Parser::tokenBranches4521[0], &x64Parser::tokenBranches4897[0], &x64Parser::tokenBranches5109[0],
    &x64Parser::tokenBranches4520[0], &x64Parser::tokenBranches4510[0], &x64Parser::tokenBranches3259[0],
    &x64Parser::tokenBranches3181[0], &x64Parser::tokenBranches3306[0], &x64Parser::tokenBranches3398[0],
    &x64Parser::tokenBranches3490[0], &x64Parser::tokenBranches3305[0], &x64Parser::tokenBranches3218[0],
    &x64Parser::tokenBranches3355[0], &x64Parser::tokenBranches3447[0], &x64Parser::tokenBranches4530[0],
    &x64Parser::tokenBranches4906[0], &x64Parser::tokenBranches5118[0], &x64Parser::tokenBranches4529[0],
    &x64Parser::tokenBranches4528[0], &x64Parser::tokenBranches4527[0], &x64Parser::tokenBranches4537[0],
    &x64Parser::tokenBranches4913[0], &x64Parser::tokenBranches5125[0], &x64Parser::tokenBranches4536[0],
    &x64Parser::tokenBranches4526[0], &x64Parser::tokenBranches3217[0], &x64Parser::tokenBranches3264[0],
    &x64Parser::tokenBranches3541[0], &x64Parser::tokenBranches3548[0], &x64Parser::tokenBranches3555[0],
    &x64Parser::tokenBranches3540[0], &x64Parser::tokenBranches3534[0], &x64Parser::tokenBranches3601[0],
    &x64Parser::tokenBranches3608[0], &x64Parser::tokenBranches3615[0], &x64Parser::tokenBranches3600[0],
    &x64Parser::tokenBranches3594[0], &x64Parser::tokenBranches3661[0], &x64Parser::tokenBranches3660[0],
    &x64Parser::tokenBranches3654[0], &x64Parser::tokenBranches3689[0], &x64Parser::tokenBranches3688[0],
    &x64Parser::tokenBranches3682[0], &x64Parser::tokenBranches3533[0], &x64Parser::tokenBranches3184[0],
    &x64Parser::tokenBranches3269[0], &x64Parser::tokenBranches3360[0], &x64Parser::tokenBranches3452[0],
    &x64Parser::tokenBranches4464[0], &x64Parser::tokenBranches4840[0], &x64Parser::tokenBranches5052[0],
    &x64Parser::tokenBranches4463[0], &x64Parser::tokenBranches4462[0], &x64Parser::tokenBranches4498[0],
    &x64Parser::tokenBranches4874[0], &x64Parser::tokenBranches5086[0], &x64Parser::tokenBranches4497[0],
    &x64Parser::tokenBranches4496[0], &x64Parser::tokenBranches4495[0], &x64Parser::tokenBranches4505[0],
    &x64Parser::tokenBranches4881[0], &x64Parser::tokenBranches5093[0], &x64Parser::tokenBranches4504[0],
    &x64Parser::tokenBranches4494[0], &x64Parser::tokenBranches3268[0], &x64Parser::tokenBranches3717[0],
    &x64Parser::tokenBranches3724[0], &x64Parser::tokenBranches3731[0], &x64Parser::tokenBranches3716[0],
    &x64Parser::tokenBranches3710[0], &x64Parser::tokenBranches3845[0], &x64Parser::tokenBranches3852[0],
    &x64Parser::tokenBranches3859[0], &x64Parser::tokenBranches3844[0], &x64Parser::tokenBranches3838[0],
    &x64Parser::tokenBranches4229[0], &x64Parser::tokenBranches4228[0], &x64Parser::tokenBranches4222[0],
    &x64Parser::tokenBranches3709[0], &x64Parser::tokenBranches3187[0], &x64Parser::tokenBranches3294[0],
    &x64Parser::tokenBranches3386[0], &x64Parser::tokenBranches3478[0], &x64Parser::tokenBranches4471[0],
    &x64Parser::tokenBranches4847[0], &x64Parser::tokenBranches5059[0], &x64Parser::tokenBranches4470[0],
    &x64Parser::tokenBranches4469[0], &x64Parser::tokenBranches4606[0], &x64Parser::tokenBranches4982[0],
    &x64Parser::tokenBranches5194[0], &x64Parser::tokenBranches4605[0], &x64Parser::tokenBranches4604[0],
    &x64Parser::tokenBranches4603[0], &x64Parser::tokenBranches4613[0], &x64Parser::tokenBranches4989[0],
    &x64Parser::tokenBranches5201[0], &x64Parser::tokenBranches4612[0], &x64Parser::tokenBranches4602[0],
    &x64Parser::tokenBranches3293[0], &x64Parser::tokenBranches3973[0], &x64Parser::tokenBranches3980[0],
    &x64Parser::tokenBranches3987[0], &x64Parser::tokenBranches3972[0], &x64Parser::tokenBranches3966[0],
    &x64Parser::tokenBranches4101[0], &x64Parser::tokenBranches4108[0], &x64Parser::tokenBranches4115[0],
    &x64Parser::tokenBranches4100[0], &x64Parser::tokenBranches4094[0], &x64Parser::tokenBranches4257[0],
    &x64Parser::tokenBranches4256[0], &x64Parser::tokenBranches4250[0], &x64Parser::tokenBranches3965[0],
    &x64Parser::tokenBranches3190[0], &x64Parser::tokenBranches3313[0], &x64Parser::tokenBranches3405[0],
    &x64Parser::tokenBranches3497[0], &x64Parser::tokenBranches3312[0], &x64Parser::tokenBranches3223[0],
    &x64Parser::tokenBranches3299[0], &x64Parser::tokenBranches3391[0], &x64Parser::tokenBranches3483[0],
    &x64Parser::tokenBranches4622[0], &x64Parser::tokenBranches4998[0], &x64Parser::tokenBranches5210[0],
    &x64Parser::tokenBranches4621[0], &x64Parser::tokenBranches4620[0], &x64Parser::tokenBranches4619[0],
    &x64Parser::tokenBranches4629[0], &x64Parser::tokenBranches5005[0], &x64Parser::tokenBranches5217[0],
    &x64Parser::tokenBranches4628[0], &x64Parser::tokenBranches4618[0], &x64Parser::tokenBranches3222[0],
    &x64Parser::tokenBranches4285[0], &x64Parser::tokenBranches4292[0], &x64Parser::tokenBranches4299[0],
    &x64Parser::tokenBranches4284[0], &x64Parser::tokenBranches4278[0], &x64Parser::tokenBranches4345[0],
    &x64Parser::tokenBranches4352[0], &x64Parser::tokenBranches4359[0], &x64Parser::tokenBranches4344[0],
    &x64Parser::tokenBranches4338[0], &x64Parser::tokenBranches4405[0], &x64Parser::tokenBranches4421[0],
    &x64Parser::tokenBranches4420[0], &x64Parser::tokenBranches4412[0], &x64Parser::tokenBranches4404[0],
    &x64Parser::tokenBranches4398[0], &x64Parser::tokenBranches4277[0], &x64Parser::tokenBranches3213[0],
    &x64Parser::tokenBranches3247[0], &x64Parser::tokenBranches3246[0], &x64Parser::tokenBranches3245[0],
    &x64Parser::tokenBranches3250[0], &x64Parser::tokenBranches2[0],    &x64Parser::tokenBranches1[0],
};

Coding x64Parser::Coding1[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding2[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding3[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding4[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding5[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding6[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding7[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding8[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding9[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding10[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding11[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding12[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding13[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding14[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding15[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding16[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding17[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding18[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding19[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding20[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding21[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding22[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding23[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding24[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding25[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding26[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding27[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding28[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding29[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding30[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding31[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding32[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding33[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding34[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding35[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding36[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding37[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding38[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding39[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding40[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 1, 6, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding41[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding42[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding43[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 6, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding44[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding45[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding46[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding47[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding48[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding49[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding50[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding51[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding52[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding53[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding54[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding55[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding56[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding57[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding58[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding59[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding60[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding61[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding62[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding63[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding64[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding65[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding66[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding67[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding68[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding69[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding70[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding71[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding72[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding73[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding74[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding75[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding76[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding77[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding78[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding79[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding80[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding81[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding82[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding83[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding84[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding85[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding86[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding87[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding88[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding89[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding90[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding91[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding92[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding93[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding94[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding95[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding96[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding97[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding98[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding99[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding100[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding101[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding102[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding103[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding104[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding105[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding106[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding107[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding108[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding109[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding110[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding111[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding112[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding113[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding114[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding115[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding116[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding117[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding118[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding119[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding120[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding121[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding122[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding123[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding124[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding125[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding126[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding127[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding128[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding129[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding130[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding131[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding132[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding133[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding134[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding135[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding136[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding137[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding138[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding139[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding140[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding141[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding142[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding143[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding144[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding145[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding146[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding147[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding148[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding149[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding150[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding151[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding152[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding153[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding154[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding155[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding156[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding157[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding158[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding159[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding160[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding161[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding162[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding163[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding164[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding165[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 54, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding166[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding167[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding168[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding169[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding170[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding171[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding172[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding173[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding174[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding175[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding176[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding177[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding178[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding179[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding180[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding181[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding182[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding183[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding184[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding185[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding186[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding187[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding188[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding189[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding190[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding191[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding192[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding193[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding194[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding195[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding196[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding197[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding198[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding199[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding200[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding201[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding202[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding203[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding204[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding205[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding206[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding207[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding208[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding209[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding210[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding211[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding212[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding213[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding214[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding215[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding216[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding217[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding218[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding219[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding220[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding221[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding222[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding223[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding224[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding225[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding226[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding227[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding228[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding229[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 62, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding230[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding231[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding232[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding233[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding234[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding235[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding236[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding237[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding238[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding239[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 1057, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding240[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding241[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding242[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 54, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding243[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding244[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding245[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding246[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding247[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding248[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding249[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding250[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding251[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding252[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding253[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding254[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding255[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding256[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding257[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding258[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding259[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding260[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding261[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding262[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding263[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding264[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding265[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding266[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding267[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding268[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding269[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding270[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding271[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding272[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding273[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding274[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding275[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding276[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding277[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding278[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding279[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding280[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding281[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding282[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding283[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding284[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding285[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding286[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding287[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding288[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding289[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding290[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding291[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding292[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding293[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding294[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding295[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding296[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding297[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding298[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 67, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding299[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding300[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding301[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding302[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding303[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding304[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding305[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding306[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding307[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding308[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding309[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding310[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding311[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding312[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding313[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding314[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding315[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding316[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding317[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding318[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding319[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding320[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding321[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding322[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding323[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding324[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding325[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding326[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding327[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding328[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding329[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding330[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding331[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding332[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding333[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding334[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding335[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding336[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding337[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding338[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding339[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 62, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding340[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding341[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding342[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding343[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding344[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding345[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding346[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding347[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding348[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding349[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding350[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding351[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding352[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding353[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding354[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding355[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding356[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding357[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding358[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding359[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 5, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding360[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding361[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding362[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding363[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding364[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding365[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding366[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding367[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding368[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding369[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding370[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding371[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding372[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding373[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding374[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding375[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding376[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding377[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding378[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding379[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding380[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding381[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding382[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding383[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding384[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding385[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding386[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding387[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding388[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding389[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding390[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding391[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding392[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding393[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding394[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding395[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding396[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding397[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding398[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding399[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding400[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding401[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding402[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding403[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding404[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding405[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding406[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding407[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding408[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding409[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding410[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding411[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding412[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding413[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding414[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding415[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 4, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding416[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding417[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding418[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding419[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 66, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding420[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding421[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding422[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding423[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding424[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding425[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding426[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding427[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding428[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding429[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding430[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding431[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding432[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding433[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding434[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding435[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding436[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding437[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 65, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 8, 4, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 5, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding438[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 8, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding439[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 16, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 2, 0, 4, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 2, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 4, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 2, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 5, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 0, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding440[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding441[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding442[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 14, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding443[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::optional | Coding::indirect), 22, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 15, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 16, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding444[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding445[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding446[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 35, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding447[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding448[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding449[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding450[] = {
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding451[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding452[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding453[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding454[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding455[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding456[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 2, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding457[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding458[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding459[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding460[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 6},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 2, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding461[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 6},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 2, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding462[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 6},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 2, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding463[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding464[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 35, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 4, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 38, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 14, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding465[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect), 18, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 17, 3, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 1, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding466[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding467[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding468[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 15, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 8, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 37, 4, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding469[] = {
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 25, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding470[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding471[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 25, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding472[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding473[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding474[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding475[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 232, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding476[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding477[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 154, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding478[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 152, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding479[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding480[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding481[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding482[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding483[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding484[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 166, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding485[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding486[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding487[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding488[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding489[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding490[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding491[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding492[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding493[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding494[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding495[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding496[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding497[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding498[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding499[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding500[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding501[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 167, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding502[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 153, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding503[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 200, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 26, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding504[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 155, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding505[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 223, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding506[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding507[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding508[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding509[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding510[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 107, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 23, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding511[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 19, 0, 2, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 105, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 3, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding512[] = {
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 27, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding513[] = {
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding514[] = {
    {Coding::native},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding515[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 228, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding516[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 229, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding517[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 229, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding518[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 229, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding519[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 236, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding520[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding521[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding522[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 237, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding523[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding524[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding525[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding526[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding527[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding528[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 108, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding529[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding530[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding531[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding532[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding533[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding534[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding535[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding536[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding537[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding538[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding539[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding540[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 109, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding541[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 205, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding542[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 207, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding543[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding544[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 227, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding545[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding546[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 1, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding547[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding548[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 234, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding549[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 235, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding550[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding551[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 233, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding552[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding553[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding554[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding555[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding556[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding557[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 172, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding558[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding559[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding560[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding561[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding562[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding563[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding564[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding565[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding566[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding567[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding568[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding569[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding570[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding571[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding572[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding573[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding574[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 173, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding575[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 226, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding576[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 225, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding577[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 224, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 10, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding578[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding579[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding580[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding581[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding582[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding583[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding584[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding585[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding586[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding587[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding588[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding589[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding590[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding591[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 22, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding592[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding593[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding594[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 23, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding595[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding596[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding597[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding598[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 162, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding599[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding600[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding601[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding602[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding603[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding604[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding605[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding606[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 163, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding607[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding608[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding609[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding610[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding611[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding612[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 164, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding613[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding614[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding615[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding616[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding617[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding618[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding619[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding620[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding621[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding622[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding623[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding624[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding625[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding626[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding627[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 165, 0, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding628[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 165, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding629[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 230, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding630[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding631[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding632[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 231, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 28, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding633[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 238, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding634[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding635[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding636[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 239, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding637[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding638[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding639[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding640[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding641[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding642[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 110, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding643[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding644[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding645[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding646[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding647[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding648[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding649[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding650[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding651[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding652[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding653[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding654[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 111, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding655[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding656[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding657[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 11, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding658[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 161, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding659[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding660[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 7, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding661[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding662[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding663[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 10, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding664[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 106, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding665[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding666[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding667[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 104, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding668[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {Coding::native},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding669[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {Coding::native},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding670[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 160, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding671[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 15, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding672[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 0, 2, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 3, 1, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 6, 3, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding673[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 194, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding674[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 195, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding675[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 202, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding676[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 203, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding677[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding678[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding679[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding680[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding681[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding682[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 174, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding683[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding684[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding685[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding686[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding687[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding688[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding689[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding690[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding691[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding692[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding693[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding694[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding695[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding696[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding697[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 175, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding698[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding699[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding700[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding701[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding702[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding703[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 170, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding704[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding705[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding706[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding707[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding708[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding709[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding710[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding711[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding712[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding713[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding714[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding715[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding716[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding717[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 1, 8, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding718[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 171, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding719[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 168, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding720[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 16, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding721[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding722[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 72, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 169, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect), 21, 32, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding723[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 3},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding724[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 4},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 64, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding725[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 5},
    {CODING_NAME("unknown")(Coding::Type)(Coding::valSpecified), 72, 0, 0, 0, '+'},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 18, 5, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::indirect | Coding::fieldSpecified), 19, 3, 1, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding726[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding727[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding728[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding729[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 1},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding730[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding731[] = {
    {CODING_NAME("unknown") Coding::stateFunc, 2},
    {CODING_NAME("unknown")(Coding::Type)(Coding::indirect | Coding::fieldSpecified), 1, 0, 7, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::Coding732[] = {
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 64, 8, 0, 0, 0},
    {CODING_NAME("unknown")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 215, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding* x64Parser::Codings[732] = {
    x64Parser::Coding1,   x64Parser::Coding2,   x64Parser::Coding3,   x64Parser::Coding4,   x64Parser::Coding5,
    x64Parser::Coding6,   x64Parser::Coding7,   x64Parser::Coding8,   x64Parser::Coding9,   x64Parser::Coding10,
    x64Parser::Coding11,  x64Parser::Coding12,  x64Parser::Coding13,  x64Parser::Coding14,  x64Parser::Coding15,
    x64Parser::Coding16,  x64Parser::Coding17,  x64Parser::Coding18,  x64Parser::Coding19,  x64Parser::Coding20,
    x64Parser::Coding21,  x64Parser::Coding22,  x64Parser::Coding23,  x64Parser::Coding24,  x64Parser::Coding25,
    x64Parser::Coding26,  x64Parser::Coding27,  x64Parser::Coding28,  x64Parser::Coding29,  x64Parser::Coding30,
    x64Parser::Coding31,  x64Parser::Coding32,  x64Parser::Coding33,  x64Parser::Coding34,  x64Parser::Coding35,
    x64Parser::Coding36,  x64Parser::Coding37,  x64Parser::Coding38,  x64Parser::Coding39,  x64Parser::Coding40,
    x64Parser::Coding41,  x64Parser::Coding42,  x64Parser::Coding43,  x64Parser::Coding44,  x64Parser::Coding45,
    x64Parser::Coding46,  x64Parser::Coding47,  x64Parser::Coding48,  x64Parser::Coding49,  x64Parser::Coding50,
    x64Parser::Coding51,  x64Parser::Coding52,  x64Parser::Coding53,  x64Parser::Coding54,  x64Parser::Coding55,
    x64Parser::Coding56,  x64Parser::Coding57,  x64Parser::Coding58,  x64Parser::Coding59,  x64Parser::Coding60,
    x64Parser::Coding61,  x64Parser::Coding62,  x64Parser::Coding63,  x64Parser::Coding64,  x64Parser::Coding65,
    x64Parser::Coding66,  x64Parser::Coding67,  x64Parser::Coding68,  x64Parser::Coding69,  x64Parser::Coding70,
    x64Parser::Coding71,  x64Parser::Coding72,  x64Parser::Coding73,  x64Parser::Coding74,  x64Parser::Coding75,
    x64Parser::Coding76,  x64Parser::Coding77,  x64Parser::Coding78,  x64Parser::Coding79,  x64Parser::Coding80,
    x64Parser::Coding81,  x64Parser::Coding82,  x64Parser::Coding83,  x64Parser::Coding84,  x64Parser::Coding85,
    x64Parser::Coding86,  x64Parser::Coding87,  x64Parser::Coding88,  x64Parser::Coding89,  x64Parser::Coding90,
    x64Parser::Coding91,  x64Parser::Coding92,  x64Parser::Coding93,  x64Parser::Coding94,  x64Parser::Coding95,
    x64Parser::Coding96,  x64Parser::Coding97,  x64Parser::Coding98,  x64Parser::Coding99,  x64Parser::Coding100,
    x64Parser::Coding101, x64Parser::Coding102, x64Parser::Coding103, x64Parser::Coding104, x64Parser::Coding105,
    x64Parser::Coding106, x64Parser::Coding107, x64Parser::Coding108, x64Parser::Coding109, x64Parser::Coding110,
    x64Parser::Coding111, x64Parser::Coding112, x64Parser::Coding113, x64Parser::Coding114, x64Parser::Coding115,
    x64Parser::Coding116, x64Parser::Coding117, x64Parser::Coding118, x64Parser::Coding119, x64Parser::Coding120,
    x64Parser::Coding121, x64Parser::Coding122, x64Parser::Coding123, x64Parser::Coding124, x64Parser::Coding125,
    x64Parser::Coding126, x64Parser::Coding127, x64Parser::Coding128, x64Parser::Coding129, x64Parser::Coding130,
    x64Parser::Coding131, x64Parser::Coding132, x64Parser::Coding133, x64Parser::Coding134, x64Parser::Coding135,
    x64Parser::Coding136, x64Parser::Coding137, x64Parser::Coding138, x64Parser::Coding139, x64Parser::Coding140,
    x64Parser::Coding141, x64Parser::Coding142, x64Parser::Coding143, x64Parser::Coding144, x64Parser::Coding145,
    x64Parser::Coding146, x64Parser::Coding147, x64Parser::Coding148, x64Parser::Coding149, x64Parser::Coding150,
    x64Parser::Coding151, x64Parser::Coding152, x64Parser::Coding153, x64Parser::Coding154, x64Parser::Coding155,
    x64Parser::Coding156, x64Parser::Coding157, x64Parser::Coding158, x64Parser::Coding159, x64Parser::Coding160,
    x64Parser::Coding161, x64Parser::Coding162, x64Parser::Coding163, x64Parser::Coding164, x64Parser::Coding165,
    x64Parser::Coding166, x64Parser::Coding167, x64Parser::Coding168, x64Parser::Coding169, x64Parser::Coding170,
    x64Parser::Coding171, x64Parser::Coding172, x64Parser::Coding173, x64Parser::Coding174, x64Parser::Coding175,
    x64Parser::Coding176, x64Parser::Coding177, x64Parser::Coding178, x64Parser::Coding179, x64Parser::Coding180,
    x64Parser::Coding181, x64Parser::Coding182, x64Parser::Coding183, x64Parser::Coding184, x64Parser::Coding185,
    x64Parser::Coding186, x64Parser::Coding187, x64Parser::Coding188, x64Parser::Coding189, x64Parser::Coding190,
    x64Parser::Coding191, x64Parser::Coding192, x64Parser::Coding193, x64Parser::Coding194, x64Parser::Coding195,
    x64Parser::Coding196, x64Parser::Coding197, x64Parser::Coding198, x64Parser::Coding199, x64Parser::Coding200,
    x64Parser::Coding201, x64Parser::Coding202, x64Parser::Coding203, x64Parser::Coding204, x64Parser::Coding205,
    x64Parser::Coding206, x64Parser::Coding207, x64Parser::Coding208, x64Parser::Coding209, x64Parser::Coding210,
    x64Parser::Coding211, x64Parser::Coding212, x64Parser::Coding213, x64Parser::Coding214, x64Parser::Coding215,
    x64Parser::Coding216, x64Parser::Coding217, x64Parser::Coding218, x64Parser::Coding219, x64Parser::Coding220,
    x64Parser::Coding221, x64Parser::Coding222, x64Parser::Coding223, x64Parser::Coding224, x64Parser::Coding225,
    x64Parser::Coding226, x64Parser::Coding227, x64Parser::Coding228, x64Parser::Coding229, x64Parser::Coding230,
    x64Parser::Coding231, x64Parser::Coding232, x64Parser::Coding233, x64Parser::Coding234, x64Parser::Coding235,
    x64Parser::Coding236, x64Parser::Coding237, x64Parser::Coding238, x64Parser::Coding239, x64Parser::Coding240,
    x64Parser::Coding241, x64Parser::Coding242, x64Parser::Coding243, x64Parser::Coding244, x64Parser::Coding245,
    x64Parser::Coding246, x64Parser::Coding247, x64Parser::Coding248, x64Parser::Coding249, x64Parser::Coding250,
    x64Parser::Coding251, x64Parser::Coding252, x64Parser::Coding253, x64Parser::Coding254, x64Parser::Coding255,
    x64Parser::Coding256, x64Parser::Coding257, x64Parser::Coding258, x64Parser::Coding259, x64Parser::Coding260,
    x64Parser::Coding261, x64Parser::Coding262, x64Parser::Coding263, x64Parser::Coding264, x64Parser::Coding265,
    x64Parser::Coding266, x64Parser::Coding267, x64Parser::Coding268, x64Parser::Coding269, x64Parser::Coding270,
    x64Parser::Coding271, x64Parser::Coding272, x64Parser::Coding273, x64Parser::Coding274, x64Parser::Coding275,
    x64Parser::Coding276, x64Parser::Coding277, x64Parser::Coding278, x64Parser::Coding279, x64Parser::Coding280,
    x64Parser::Coding281, x64Parser::Coding282, x64Parser::Coding283, x64Parser::Coding284, x64Parser::Coding285,
    x64Parser::Coding286, x64Parser::Coding287, x64Parser::Coding288, x64Parser::Coding289, x64Parser::Coding290,
    x64Parser::Coding291, x64Parser::Coding292, x64Parser::Coding293, x64Parser::Coding294, x64Parser::Coding295,
    x64Parser::Coding296, x64Parser::Coding297, x64Parser::Coding298, x64Parser::Coding299, x64Parser::Coding300,
    x64Parser::Coding301, x64Parser::Coding302, x64Parser::Coding303, x64Parser::Coding304, x64Parser::Coding305,
    x64Parser::Coding306, x64Parser::Coding307, x64Parser::Coding308, x64Parser::Coding309, x64Parser::Coding310,
    x64Parser::Coding311, x64Parser::Coding312, x64Parser::Coding313, x64Parser::Coding314, x64Parser::Coding315,
    x64Parser::Coding316, x64Parser::Coding317, x64Parser::Coding318, x64Parser::Coding319, x64Parser::Coding320,
    x64Parser::Coding321, x64Parser::Coding322, x64Parser::Coding323, x64Parser::Coding324, x64Parser::Coding325,
    x64Parser::Coding326, x64Parser::Coding327, x64Parser::Coding328, x64Parser::Coding329, x64Parser::Coding330,
    x64Parser::Coding331, x64Parser::Coding332, x64Parser::Coding333, x64Parser::Coding334, x64Parser::Coding335,
    x64Parser::Coding336, x64Parser::Coding337, x64Parser::Coding338, x64Parser::Coding339, x64Parser::Coding340,
    x64Parser::Coding341, x64Parser::Coding342, x64Parser::Coding343, x64Parser::Coding344, x64Parser::Coding345,
    x64Parser::Coding346, x64Parser::Coding347, x64Parser::Coding348, x64Parser::Coding349, x64Parser::Coding350,
    x64Parser::Coding351, x64Parser::Coding352, x64Parser::Coding353, x64Parser::Coding354, x64Parser::Coding355,
    x64Parser::Coding356, x64Parser::Coding357, x64Parser::Coding358, x64Parser::Coding359, x64Parser::Coding360,
    x64Parser::Coding361, x64Parser::Coding362, x64Parser::Coding363, x64Parser::Coding364, x64Parser::Coding365,
    x64Parser::Coding366, x64Parser::Coding367, x64Parser::Coding368, x64Parser::Coding369, x64Parser::Coding370,
    x64Parser::Coding371, x64Parser::Coding372, x64Parser::Coding373, x64Parser::Coding374, x64Parser::Coding375,
    x64Parser::Coding376, x64Parser::Coding377, x64Parser::Coding378, x64Parser::Coding379, x64Parser::Coding380,
    x64Parser::Coding381, x64Parser::Coding382, x64Parser::Coding383, x64Parser::Coding384, x64Parser::Coding385,
    x64Parser::Coding386, x64Parser::Coding387, x64Parser::Coding388, x64Parser::Coding389, x64Parser::Coding390,
    x64Parser::Coding391, x64Parser::Coding392, x64Parser::Coding393, x64Parser::Coding394, x64Parser::Coding395,
    x64Parser::Coding396, x64Parser::Coding397, x64Parser::Coding398, x64Parser::Coding399, x64Parser::Coding400,
    x64Parser::Coding401, x64Parser::Coding402, x64Parser::Coding403, x64Parser::Coding404, x64Parser::Coding405,
    x64Parser::Coding406, x64Parser::Coding407, x64Parser::Coding408, x64Parser::Coding409, x64Parser::Coding410,
    x64Parser::Coding411, x64Parser::Coding412, x64Parser::Coding413, x64Parser::Coding414, x64Parser::Coding415,
    x64Parser::Coding416, x64Parser::Coding417, x64Parser::Coding418, x64Parser::Coding419, x64Parser::Coding420,
    x64Parser::Coding421, x64Parser::Coding422, x64Parser::Coding423, x64Parser::Coding424, x64Parser::Coding425,
    x64Parser::Coding426, x64Parser::Coding427, x64Parser::Coding428, x64Parser::Coding429, x64Parser::Coding430,
    x64Parser::Coding431, x64Parser::Coding432, x64Parser::Coding433, x64Parser::Coding434, x64Parser::Coding435,
    x64Parser::Coding436, x64Parser::Coding437, x64Parser::Coding438, x64Parser::Coding439, x64Parser::Coding440,
    x64Parser::Coding441, x64Parser::Coding442, x64Parser::Coding443, x64Parser::Coding444, x64Parser::Coding445,
    x64Parser::Coding446, x64Parser::Coding447, x64Parser::Coding448, x64Parser::Coding449, x64Parser::Coding450,
    x64Parser::Coding451, x64Parser::Coding452, x64Parser::Coding453, x64Parser::Coding454, x64Parser::Coding455,
    x64Parser::Coding456, x64Parser::Coding457, x64Parser::Coding458, x64Parser::Coding459, x64Parser::Coding460,
    x64Parser::Coding461, x64Parser::Coding462, x64Parser::Coding463, x64Parser::Coding464, x64Parser::Coding465,
    x64Parser::Coding466, x64Parser::Coding467, x64Parser::Coding468, x64Parser::Coding469, x64Parser::Coding470,
    x64Parser::Coding471, x64Parser::Coding472, x64Parser::Coding473, x64Parser::Coding474, x64Parser::Coding475,
    x64Parser::Coding476, x64Parser::Coding477, x64Parser::Coding478, x64Parser::Coding479, x64Parser::Coding480,
    x64Parser::Coding481, x64Parser::Coding482, x64Parser::Coding483, x64Parser::Coding484, x64Parser::Coding485,
    x64Parser::Coding486, x64Parser::Coding487, x64Parser::Coding488, x64Parser::Coding489, x64Parser::Coding490,
    x64Parser::Coding491, x64Parser::Coding492, x64Parser::Coding493, x64Parser::Coding494, x64Parser::Coding495,
    x64Parser::Coding496, x64Parser::Coding497, x64Parser::Coding498, x64Parser::Coding499, x64Parser::Coding500,
    x64Parser::Coding501, x64Parser::Coding502, x64Parser::Coding503, x64Parser::Coding504, x64Parser::Coding505,
    x64Parser::Coding506, x64Parser::Coding507, x64Parser::Coding508, x64Parser::Coding509, x64Parser::Coding510,
    x64Parser::Coding511, x64Parser::Coding512, x64Parser::Coding513, x64Parser::Coding514, x64Parser::Coding515,
    x64Parser::Coding516, x64Parser::Coding517, x64Parser::Coding518, x64Parser::Coding519, x64Parser::Coding520,
    x64Parser::Coding521, x64Parser::Coding522, x64Parser::Coding523, x64Parser::Coding524, x64Parser::Coding525,
    x64Parser::Coding526, x64Parser::Coding527, x64Parser::Coding528, x64Parser::Coding529, x64Parser::Coding530,
    x64Parser::Coding531, x64Parser::Coding532, x64Parser::Coding533, x64Parser::Coding534, x64Parser::Coding535,
    x64Parser::Coding536, x64Parser::Coding537, x64Parser::Coding538, x64Parser::Coding539, x64Parser::Coding540,
    x64Parser::Coding541, x64Parser::Coding542, x64Parser::Coding543, x64Parser::Coding544, x64Parser::Coding545,
    x64Parser::Coding546, x64Parser::Coding547, x64Parser::Coding548, x64Parser::Coding549, x64Parser::Coding550,
    x64Parser::Coding551, x64Parser::Coding552, x64Parser::Coding553, x64Parser::Coding554, x64Parser::Coding555,
    x64Parser::Coding556, x64Parser::Coding557, x64Parser::Coding558, x64Parser::Coding559, x64Parser::Coding560,
    x64Parser::Coding561, x64Parser::Coding562, x64Parser::Coding563, x64Parser::Coding564, x64Parser::Coding565,
    x64Parser::Coding566, x64Parser::Coding567, x64Parser::Coding568, x64Parser::Coding569, x64Parser::Coding570,
    x64Parser::Coding571, x64Parser::Coding572, x64Parser::Coding573, x64Parser::Coding574, x64Parser::Coding575,
    x64Parser::Coding576, x64Parser::Coding577, x64Parser::Coding578, x64Parser::Coding579, x64Parser::Coding580,
    x64Parser::Coding581, x64Parser::Coding582, x64Parser::Coding583, x64Parser::Coding584, x64Parser::Coding585,
    x64Parser::Coding586, x64Parser::Coding587, x64Parser::Coding588, x64Parser::Coding589, x64Parser::Coding590,
    x64Parser::Coding591, x64Parser::Coding592, x64Parser::Coding593, x64Parser::Coding594, x64Parser::Coding595,
    x64Parser::Coding596, x64Parser::Coding597, x64Parser::Coding598, x64Parser::Coding599, x64Parser::Coding600,
    x64Parser::Coding601, x64Parser::Coding602, x64Parser::Coding603, x64Parser::Coding604, x64Parser::Coding605,
    x64Parser::Coding606, x64Parser::Coding607, x64Parser::Coding608, x64Parser::Coding609, x64Parser::Coding610,
    x64Parser::Coding611, x64Parser::Coding612, x64Parser::Coding613, x64Parser::Coding614, x64Parser::Coding615,
    x64Parser::Coding616, x64Parser::Coding617, x64Parser::Coding618, x64Parser::Coding619, x64Parser::Coding620,
    x64Parser::Coding621, x64Parser::Coding622, x64Parser::Coding623, x64Parser::Coding624, x64Parser::Coding625,
    x64Parser::Coding626, x64Parser::Coding627, x64Parser::Coding628, x64Parser::Coding629, x64Parser::Coding630,
    x64Parser::Coding631, x64Parser::Coding632, x64Parser::Coding633, x64Parser::Coding634, x64Parser::Coding635,
    x64Parser::Coding636, x64Parser::Coding637, x64Parser::Coding638, x64Parser::Coding639, x64Parser::Coding640,
    x64Parser::Coding641, x64Parser::Coding642, x64Parser::Coding643, x64Parser::Coding644, x64Parser::Coding645,
    x64Parser::Coding646, x64Parser::Coding647, x64Parser::Coding648, x64Parser::Coding649, x64Parser::Coding650,
    x64Parser::Coding651, x64Parser::Coding652, x64Parser::Coding653, x64Parser::Coding654, x64Parser::Coding655,
    x64Parser::Coding656, x64Parser::Coding657, x64Parser::Coding658, x64Parser::Coding659, x64Parser::Coding660,
    x64Parser::Coding661, x64Parser::Coding662, x64Parser::Coding663, x64Parser::Coding664, x64Parser::Coding665,
    x64Parser::Coding666, x64Parser::Coding667, x64Parser::Coding668, x64Parser::Coding669, x64Parser::Coding670,
    x64Parser::Coding671, x64Parser::Coding672, x64Parser::Coding673, x64Parser::Coding674, x64Parser::Coding675,
    x64Parser::Coding676, x64Parser::Coding677, x64Parser::Coding678, x64Parser::Coding679, x64Parser::Coding680,
    x64Parser::Coding681, x64Parser::Coding682, x64Parser::Coding683, x64Parser::Coding684, x64Parser::Coding685,
    x64Parser::Coding686, x64Parser::Coding687, x64Parser::Coding688, x64Parser::Coding689, x64Parser::Coding690,
    x64Parser::Coding691, x64Parser::Coding692, x64Parser::Coding693, x64Parser::Coding694, x64Parser::Coding695,
    x64Parser::Coding696, x64Parser::Coding697, x64Parser::Coding698, x64Parser::Coding699, x64Parser::Coding700,
    x64Parser::Coding701, x64Parser::Coding702, x64Parser::Coding703, x64Parser::Coding704, x64Parser::Coding705,
    x64Parser::Coding706, x64Parser::Coding707, x64Parser::Coding708, x64Parser::Coding709, x64Parser::Coding710,
    x64Parser::Coding711, x64Parser::Coding712, x64Parser::Coding713, x64Parser::Coding714, x64Parser::Coding715,
    x64Parser::Coding716, x64Parser::Coding717, x64Parser::Coding718, x64Parser::Coding719, x64Parser::Coding720,
    x64Parser::Coding721, x64Parser::Coding722, x64Parser::Coding723, x64Parser::Coding724, x64Parser::Coding725,
    x64Parser::Coding726, x64Parser::Coding727, x64Parser::Coding728, x64Parser::Coding729, x64Parser::Coding730,
    x64Parser::Coding731, x64Parser::Coding732,
};
Coding x64Parser::prefixCoding1[] = {
    {CODING_NAME("a16") Coding::stateFunc, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding2[] = {
    {CODING_NAME("a32") Coding::stateFunc, 1},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding3[] = {
    {CODING_NAME("lock")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 240, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding4[] = {
    {CODING_NAME("o16") Coding::stateFunc, 3},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding5[] = {
    {CODING_NAME("o32") Coding::stateFunc, 4},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding6[] = {
    {CODING_NAME("rep")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding7[] = {
    {CODING_NAME("repe")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding8[] = {
    {CODING_NAME("repne")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding9[] = {
    {CODING_NAME("repnz")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 242, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding x64Parser::prefixCoding10[] = {
    {CODING_NAME("repz")(Coding::Type)(Coding::bitSpecified | Coding::valSpecified), 243, 8, 0, 0, 0},
    {CODING_NAME("eot") Coding::eot},
};
Coding* x64Parser::prefixCodings[] = {
    x64Parser::prefixCoding1, x64Parser::prefixCoding2,  x64Parser::prefixCoding3, x64Parser::prefixCoding4,
    x64Parser::prefixCoding5, x64Parser::prefixCoding6,  x64Parser::prefixCoding7, x64Parser::prefixCoding8,
    x64Parser::prefixCoding9, x64Parser::prefixCoding10,
};
bool x64Parser::MatchesToken(int token, int tokenPos)
{
    return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::TOKEN &&
           inputTokens[tokenPos]->val->ival == token;
}
bool x64Parser::MatchesRegister(int reg, int tokenPos)
{
    return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER &&
           inputTokens[tokenPos]->val->ival == reg;
}
bool x64Parser::MatchesRegisterClass(int cclass, int tokenPos)
{
    return tokenPos < inputTokens.size() && inputTokens[tokenPos]->type == InputToken::REGISTER &&
           (registerDataIndirect[cclass][inputTokens[tokenPos]->val->ival >> 3] & (1 << (inputTokens[tokenPos]->val->ival & 7)));
}
bool x64Parser::ParseAddresses(x64Operand& operand, int addrClass, int& tokenPos)
{
    int level = 0;
    bool rv = false;
    x64Token* t = tokenBranches1;
    while (t->type != x64Token::EOT)
    {
        bool matches = false;
        if (t->addrClass[addrClass >> 3] & (1 << (addrClass & 7)))
        {
            switch (t->type)
            {
                case x64Token::EMPTY:
                    matches = true;
                    break;
                case x64Token::TOKEN:
                    matches = MatchesToken(t->id, tokenPos);
                    break;
                case x64Token::REGISTER:
                    matches = MatchesRegister(t->id, tokenPos);
                    break;
                case x64Token::REGISTERCLASS:
                    matches = MatchesRegisterClass(t->id, tokenPos);
                    break;
                case x64Token::NUMBER:
                    if (tokenPos < inputTokens.size())
                        matches = (this->*numberFuncs[t->id])(tokenPos);
                    break;
                default:
                    matches = false;
                    break;
            }
        }
        if (!matches)
        {
            if (t->level > level)
            {
                t = t->next;
                continue;
            }
        }
        else
            level = t->level;
        if (matches)
        {
            if (t->tokenFunc)
                (this->*(t->tokenFunc))(operand, tokenPos);
            if (t->eos && (tokenPos == inputTokens.size() - 1 || !t->next))
            {
                rv = true;
                break;
            }
            t = t->next;
            tokenPos++;
        }
        else
        {
            t++;
        }
    }
    return rv;
}

asmError x64Parser::ParseOperands2(x64Token* tokenList, x64Operand& operand, int tokenPos, int level)
{
    asmError rv = AERR_OPERAND;
    x64Token* t = tokenList;
    while (t && t->type != x64Token::EOT)
    {
        bool matches = false;
        int last = tokenPos;
        switch (t->type)
        {
            case x64Token::EMPTY:
                matches = true;
                break;
            case x64Token::TOKEN:
                matches = MatchesToken(t->id, tokenPos);
                break;
            case x64Token::REGISTER:
                matches = MatchesRegister(t->id, tokenPos);
                break;
            case x64Token::REGISTERCLASS:
                matches = MatchesRegisterClass(t->id, tokenPos);
                break;
            case x64Token::ADDRESSCLASS:
                matches = ParseAddresses(operand, t->id, tokenPos);
                break;
            case x64Token::NUMBER:
                if (tokenPos < inputTokens.size())
                    matches = (this->*numberFuncs[t->id])(tokenPos);
                break;
            default:
                matches = false;
                break;
        }
        if (!matches)
        {
            if (t->level > level)
            {
                rv = ParseOperands2(t->next, operand, tokenPos, t->level);
                if (rv == AERR_NONE)
                    break;
            }
        }
        else
        {
            if (t->tokenFunc)
                (this->*(t->tokenFunc))(operand, last);
            if (t->eos && (!t->next || tokenPos == inputTokens.size() - 1))
            {
                bool ok = false;
                if (operand.operandCoding != -1)
                    ok = CheckCoding(operand, Codings[operand.operandCoding]);
                else if (operand.addressCoding != -1)
                    ok = CheckCoding(operand, Codings[operand.addressCoding]);
                if (ok)
                {
                    if (tokenPos >= (int)(inputTokens.size() - 1))
                        eol = true;
                    rv = AERR_NONE;
                    break;
                }
                operand.operandCoding = -1;
                operand.addressCoding = -1;
            }
            if (tokenPos < inputTokens.size())
            {
                rv = ParseOperands2(t->next, operand, tokenPos + 1, t->level);
                if (rv == AERR_NONE)
                    break;
            }
        }
        tokenPos = last;
        t++;
    }
    return rv;
}

asmError x64Parser::ParseOperands(x64Token* tokenList, x64Operand& operand)
{
    asmError rv = ParseOperands2(tokenList, operand, 0, 0);
    if (rv != AERR_NONE)
    {
        int n = tokenTable[","];
        std::vector<InputToken*> fullList = inputTokens;
        for (int i = 0; i < fullList.size();)
        {
            inputTokens.clear();
            while (i < fullList.size() && (fullList[i]->type != InputToken::TOKEN || fullList[i]->val->ival != n))
                inputTokens.push_back(fullList[i++]);
            int j;
            for (j = 0; j < sizeof(addressTable) / sizeof(addressTable[0]); j++)
            {
                if (ParseOperands2(addressTable[j], operand, 0, 0) == AERR_NONE)
                    break;
            }
            if (j == sizeof(addressTable) / sizeof(addressTable[0]))
            {
                inputTokens = fullList;
                return AERR_OPERAND;
            }
            if (i < fullList.size())
            {
                i++;
                if (i == fullList.size())
                {
                    inputTokens = fullList;
                    return AERR_SYNTAX;
                }
            }
        }
        inputTokens = fullList;
        return AERR_BADCOMBINATIONOFOPERANDS;
    }
    return rv;
}

bool x64Parser::CheckCoding(x64Operand& operand, Coding* coding)
{
    while (coding->type != Coding::eot)
    {
        if (coding->type & Coding::stateFunc)
        {
            Coding* c = (this->*stateFuncs[coding->val])();
            if (!CheckCoding(operand, c))
                return false;
        }
        else if (coding->type & Coding::native)
        {
            if (operand.addressCoding == -1)
                return false;
            if (!CheckCoding(operand, Codings[operand.addressCoding]))
                return false;
        }
        else if (coding->type & Coding::indirect)
        {
            if (!operand.values[coding->val])
            {
                if (!(coding->type & Coding::optional))
                {
                    return false;
                }
            }
            else
            {
                if (!CheckCoding(operand, operand.values[coding->val]))
                    return false;
            }
        }
        else if (coding->type & Coding::illegal)
        {
            return false;
        }
        coding++;
    }
    return true;
}
bool x64Parser::ProcessCoding(x64Operand& operand, Coding* coding, int field, int bits, int* arr, char* bitcounts, char* func,
                              int& index)
{
    int acc = 0, binary = 0;
    while (coding->type != Coding::eot)
    {
        if (coding->type & Coding::bitSpecified)
            bits = coding->bits;
        if (coding->type & Coding::valSpecified)
        {
            func[index] = coding->binary;
            bitcounts[index] = bits;
            arr[index++] = coding->val;
        }
        else if (coding->type & Coding::reg)
        {
            int n = coding->val;
            if (field != -1)
                n = registerValues[n][field];
            func[index] = coding->binary;
            bitcounts[index] = bits;
            arr[index++] = n;
        }
        else if (coding->type & Coding::stateFunc)
        {
            Coding* c = (this->*stateFuncs[coding->val])();
            int index1 = index;
            if (!ProcessCoding(operand, c, coding->field, bits, arr, bitcounts, func, index))
                return false;
            if (index != index1 && coding->binary)
                func[index - 1] = coding->binary;
        }
        else if (coding->type & Coding::stateVar)
        {
            func[index] = coding->binary;
            bitcounts[index] = bits;
            arr[index++] = stateVars[coding->val];
        }
        else if (coding->type & Coding::number)
        {
            int n = coding->val;
            auto it = operands.begin();
            for (int i = 0; i < n; i++)
            {
                ++it;
            }
            (*it)->used = true;
            n = 0;
            for (int i = 0; i < index; i++)
                if (!func[i])
                    n += bitcounts[i];
            (*it)->pos = n;
            func[index] = coding->binary;
            bitcounts[index] = bits;
            arr[index++] = (*it)->node->ival;
        }
        else if (coding->type & Coding::native)
        {
            if (operand.addressCoding == -1)
                return false;
            int index1 = index;
            if (!ProcessCoding(operand, Codings[operand.addressCoding], coding->field, bits, arr, bitcounts, func, index))
                return false;
            if (index != index1 && coding->binary)
                func[index - 1] = coding->binary;
        }
        else if (coding->type & Coding::indirect)
        {
            if (!operand.values[coding->val])
            {
                if (!(coding->type & Coding::optional))
                {
                    return false;
                }
            }
            else
            {
                int index1 = index;
                if (!ProcessCoding(operand, operand.values[coding->val], coding->field, bits, arr, bitcounts, func, index))
                    return false;
                if (index != index1 && coding->binary)
                    func[index - 1] = coding->binary;
            }
        }
        else if (coding->type & Coding::illegal)
        {
            return false;
        }
        else
        {
            return false;
        }
        coding++;
    }
    return true;
}
bool x64Parser::ProcessCoding(x64Operand& operand, Coding* coding)
{
    int arr[1000];
    char bitcount[1000];
    char func[1000];
    int index = 0;
    if (coding->type == Coding::eot)
        return true;
    int defaultBits = 8;
    bool rv = ProcessCoding(operand, coding, -1, defaultBits, arr, bitcount, func, index);
    if (rv)
    {
        for (int i = 0; i < index; i++)
        {
            if (func[i])
                arr[i + 1] = DoMath(func[i], arr[i], arr[i + 1]);
            else
                bits.Add(arr[i], bitcount[i]);
        }
    }
    return rv;
}
asmError x64Parser::DispatchOpcode(int opcode)
{
    bool rv = true;
    if (opcode == -1)
    {
        x64Operand operand;
        for (auto& a : prefixes)
            rv &= ProcessCoding(operand, prefixCodings[a]);
        if (!rv)
            return AERR_UNKNOWNOPCODE;
    }
    else
    {
        x64Operand operand;
        operand.opcode = opcode;
        auto err = (this->*DispatchTable[opcode])(operand);
        if (err == AERR_NONE)
        {
            for (auto& a : prefixes)
                rv &= ProcessCoding(operand, prefixCodings[a]);
            if (rv)
            {
                if (operand.operandCoding != -1)
                    rv = ProcessCoding(operand, Codings[operand.operandCoding]);
                else if (operand.addressCoding != -1)
                    rv = ProcessCoding(operand, Codings[operand.addressCoding]);
                else
                    rv = false;
                if (!rv)
                    return AERR_INVALIDINSTRUCTIONUSE;
            }
        }
        else
        {
            return err;
        }
    }
    return AERR_NONE;
}
